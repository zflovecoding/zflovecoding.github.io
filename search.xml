<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>个人博客之旅</title>
    <url>/2021/11/09/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<p>使用工具如下:</p>
<p>Git，Nodejs,(cnpm…)</p>
<p>Hexo,Github,</p>
<p>Hexo-theme(next,yilia,ayer…..)</p>
<p>Typora,PicGo,Gitee(Github+jsDelivr)</p>
<p>Valine,LeanCloud,icon8</p>
<p>给valine添加邮件服务</p>
<p>twikoo</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211110150106575.png" alt="image-20211110150106575"></p>
<p><a href="https://blog.zqxin.top/20210214122428/">https://blog.zqxin.top/20210214122428/</a></p>
<p>yilia:</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211108183731863.png" alt="image-20211108183731863"></p>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MIT_6.S081_Lab学习笔记(一)：环境准备</title>
    <url>/2021/11/07/MIT-6-S081-Lab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80-%EF%BC%9A%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<p>实验前推荐阅读：</p>
<p><a href="https://pdos.csail.mit.edu/6.828/2020/labs/guidance.html">https://pdos.csail.mit.edu/6.828/2020/labs/guidance.html</a></p>
<p><a href="https://pdos.csail.mit.edu/6.828/2020/xv6/book-riscv-rev1.pdf">https://pdos.csail.mit.edu/6.828/2020/xv6/book-riscv-rev1.pdf</a></p>
<p><a href="https://pdos.csail.mit.edu/6.828/2020/labs/util.html">Lab1官网</a></p>
<p><a href="https://pdos.csail.mit.edu/6.828/2020/tools.html">Tools官网</a></p>
<p><strong>参考：</strong></p>
<p><a href="https://blog.csdn.net/wuu1010/article/details/104998804">编译qemu</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/343655412">环境准备</a></p>
<h2 id="Lab0-Boot-Xv6"><a href="#Lab0-Boot-Xv6" class="headerlink" title="Lab0:  Boot Xv6"></a>Lab0:  Boot Xv6</h2><p>操作环境：VMware+Ubuntu20.04/阿里云服务器Ubuntu20.04+Xshell</p>
<p><strong>配置环境：</strong></p>
<p>按照官网指示配置环境即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu </span><br><span class="line">sudo apt-get remove qemu-system-misc</span><br><span class="line">sudo apt-get install qemu-system-misc=1:4.2-3ubuntu6</span><br></pre></td></tr></table></figure>

<p>如果这一步报错以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E: Failed to fetch http://archive.ubuntu.com/ubuntu/pool/main/g/glibc/libc6-dbg_2.31-0ubuntu9.3_amd64.deb  404  Not Found [IP: 119.96.66.248 80]</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<ol>
<li>去修改这个配置文件(vi用vim替代更好)</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/resolv.conf</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加两个DNS</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nameserver 223.5.5.5  </span><br><span class="line">nameserver 223.6.6.6</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>更新</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>再重新执行命令即可成功。</p>
<p><strong>版本检查：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iscv64-unknown-elf-gcc --version</span><br><span class="line"><span class="meta">#</span><span class="bash">官方网站里给的版本是10.0.1，我们安装的版本应该低一些，我的版本是9.3.0，应该影响不大</span></span><br><span class="line">qemu-system-riscv64 --version</span><br><span class="line"><span class="meta">#</span><span class="bash">官方版本是5.1.0，我们通过上述方式安装的版本应该过低，之后来说怎么自己build qemu</span></span><br></pre></td></tr></table></figure>

<p>PS.如果检查没有gcc,使用 <code>sudo apt install gcc-riscv64-unknown-elf</code>安装即可。</p>
<ul>
<li>build qemu</li>
</ul>
<p>首先去<a href="https://download.qemu.org/">官网</a>下载5.1.0版本的qemu.</p>
<p>解压：<code>tar -xvf qemu-5.1.0.tar.xz</code></p>
<p>配置：执行<code>./configure</code>。默认会编译<code>target-list</code>包含的所有包，可以执行<code>./configure --help</code>查看QEMU支持的架构。</p>
<p>编译安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make  -j4           # 视处理器个数增减，一般为处理器个数的2倍</span><br><span class="line">sudo make install   # 安装到系统目录（如/usr/local/bin/）需要root权限，</span><br></pre></td></tr></table></figure>

<p>遇到包或者库未安装的情况，如pkg-config、glib、gthread、pixman，可以使用<code>apt search glib</code>查找安装。</p>
<p>我的情况缺乏如下几个包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install pkg-config</span><br><span class="line">sudo apt install libglib2.0-dev</span><br><span class="line">sudo apt install libpixman-1-dev</span><br></pre></td></tr></table></figure>

<p>PS:编译安装的速度很慢（也可能是我的虚拟机配置不行，我大概编译了一个多小时），耐心等待编译安装结束即可。</p>
<p>安装结束后再次检查版本，正确即可。</p>
<p><strong>XV6-Booting!!!</strong></p>
<p>首先克隆官方仓库,之后切换到实验对应分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://g.csail.mit.edu/xv6-labs-2020</span><br><span class="line"><span class="built_in">cd</span> xv6-labs-2020</span><br><span class="line">git checkout util</span><br></pre></td></tr></table></figure>

<p>执行命令：<code>make qemu</code></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211027084327554.png" alt="image-20211027084327554"></p>
<p>出现$符号说明已成功进入Xv6,实验环境配置结束，可以开(tong)心(ku)地开始后续实验了。</p>
<p>PS.退出qemu快捷键是CTRL+a 再按下x即可。</p>
]]></content>
      <categories>
        <category>MIT6.S081</category>
      </categories>
      <tags>
        <tag>MIT6.S081</tag>
        <tag>国外公开课</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>java序列化及transient关键字</title>
    <url>/2021/11/06/java%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8Atransient%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p><strong>参考：</strong></p>
<p><a href="https://www.runoob.com/java/java-serialization.html">https://www.runoob.com/java/java-serialization.html</a></p>
<p><a href="https://www.cnblogs.com/lanxuezaipiao/p/3369962.html">https://www.cnblogs.com/lanxuezaipiao/p/3369962.html</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1298366845681698">https://www.liaoxuefeng.com/wiki/1252599548343744/1298366845681698</a></p>
<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>序列化是指把一个Java对象变成二进制内容，本质上就是一个<code>byte[]</code>数组。</p>
<p>为什么要把Java对象序列化呢？因为序列化后可以把<code>byte[]</code>保存到文件中，或者把<code>byte[]</code>通过网络传输到远程，这样，就相当于把Java对象存储到文件或者通过网络传输出去了。</p>
<p>有序列化，就有反序列化，即把一个二进制内容（也就是<code>byte[]</code>数组）变回Java对象。有了反序列化，保存到文件中的<code>byte[]</code>数组又可以“变回”Java对象，或者从网络上读取<code>byte[]</code>并把它“变回”Java对象。</p>
<p>整个过程都是 Java 虚拟机（JVM）独立的，也就是说，在一个平台上序列化的对象可以在另一个完全不同的平台上反序列化该对象。</p>
<p>类 ObjectInputStream 和 ObjectOutputStream 是高层次的数据流，它们包含反序列化和序列化对象的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(Object x)</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>

<p>上面的方法序列化一个对象，并将它发送到输出流。相似的 ObjectInputStream 类包含如下反序列化一个对象的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException,                                  ClassNotFoundException</span></span><br></pre></td></tr></table></figure>

<p>该方法从流中取出下一个对象，并将对象反序列化。<strong>它的返回值为Object，因此，你需要将它转换成合适的数据类型。</strong></p>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>把一个Java对象变为<code>byte[]</code>数组，需要使用<code>ObjectOutputStream</code>。它负责把一个Java对象写入一个字节流。</p>
<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> String name;</span><br><span class="line">   <span class="keyword">public</span> String address;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> SSN;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> number;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailCheck</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mailing a check to &quot;</span> + name</span><br><span class="line">                           + <span class="string">&quot; &quot;</span> + address);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个类的对象要想序列化成功，必须满足两个条件：</p>
<ol>
<li><p>该类必须实现 java.io.Serializable 接口。</p>
</li>
<li><p>该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是**短暂的(transient)**。</p>
</li>
</ol>
<p>ObjectOutputStream 类用来序列化一个对象，如下的 SerializeDemo 例子实例化了一个 Employee 对象，并将该对象序列化到一个文件中。</p>
<p><strong>注意：</strong> 当序列化一个对象到文件时， 按照 Java 的标准约定是给文件一个 .ser 扩展名。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">      e.name = <span class="string">&quot;Reyan Ali&quot;</span>;</span><br><span class="line">      e.address = <span class="string">&quot;Phokka Kuan, Ambehta Peer&quot;</span>;</span><br><span class="line">      e.SSN = <span class="number">11122333</span>;</span><br><span class="line">      e.number = <span class="number">101</span>;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">         FileOutputStream fileOut =</span><br><span class="line">         <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;/tmp/employee.ser&quot;</span>);</span><br><span class="line">         ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(fileOut);</span><br><span class="line">         out.writeObject(e);</span><br><span class="line">         out.close();</span><br><span class="line">         fileOut.close();</span><br><span class="line">         System.out.printf(<span class="string">&quot;Serialized data is saved in /tmp/employee.ser&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(IOException i)</span><br><span class="line">      &#123;</span><br><span class="line">          i.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeserializeDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      Employee e = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">         FileInputStream fileIn = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;/tmp/employee.ser&quot;</span>);</span><br><span class="line">         ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(fileIn);</span><br><span class="line">         e = (Employee) in.readObject();</span><br><span class="line">         in.close();</span><br><span class="line">         fileIn.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(IOException i)</span><br><span class="line">      &#123;</span><br><span class="line">         i.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;<span class="keyword">catch</span>(ClassNotFoundException c)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Employee class not found&quot;</span>);</span><br><span class="line">         c.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Deserialized Employee...&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Name: &quot;</span> + e.name);</span><br><span class="line">      System.out.println(<span class="string">&quot;Address: &quot;</span> + e.address);</span><br><span class="line">      System.out.println(<span class="string">&quot;SSN: &quot;</span> + e.SSN);</span><br><span class="line">      System.out.println(<span class="string">&quot;Number: &quot;</span> + e.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>结果：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Deserialized Employee...</span><br><span class="line">Name: Reyan Ali</span><br><span class="line">Address:Phokka Kuan, Ambehta Peer</span><br><span class="line">SSN: 0</span><br><span class="line">Number:101</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ol>
<li><p>readObject() 方法中的 try/catch代码块尝试捕获 ClassNotFoundException 异常。对于 JVM 可以反序列化对象，它必须是能够找到字节码的类。如果JVM在反序列化对象的过程中找不到该类，则抛出一个 ClassNotFoundException 异常。</p>
</li>
<li><p>readObject() 方法的返回值被转化成 Employee 引用。</p>
</li>
<li><p>当对象被序列化时，属性 SSN 的值为 111222333，但是因为该属性是短暂的，该值没有被发送到输出流。所以反序列化后 Employee 对象的 SSN 属性为 0。</p>
</li>
<li><p><code>readObject()</code>可能抛出的异常有：</p>
</li>
</ol>
<ul>
<li><code>ClassNotFoundException</code>：没有找到对应的Class；</li>
<li><code>InvalidClassException</code>：Class不匹配。</li>
</ul>
<p>对于<code>ClassNotFoundException</code>，这种情况常见于一台电脑上的Java程序把一个Java对象，例如，<code>Person</code>对象序列化以后，通过网络传给另一台电脑上的另一个Java程序，但是这台电脑的Java程序并没有定义<code>Person</code>类，所以无法反序列化。</p>
<p>对于<code>InvalidClassException</code>，这种情况常见于序列化的<code>Person</code>对象定义了一个<code>int</code>类型的<code>age</code>字段，但是反序列化时，<code>Person</code>类定义的<code>age</code>字段被改成了<code>long</code>类型，所以导致class不兼容。</p>
<p>为了避免这种class定义变动导致的不兼容，Java的序列化允许class定义一个特殊的<code>serialVersionUID</code>静态变量，用于标识Java类的序列化“版本”，通常可以由IDE自动生成。如果增加或修改了字段，可以改变<code>serialVersionUID</code>的值，这样就能自动阻止不匹配的class版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2709425275741743919L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要特别注意反序列化的几个重要特点：</p>
<p><strong>反序列化时，由JVM直接构造出Java对象，不调用构造方法，构造方法内部的代码，在反序列化时根本不可能执行。</strong></p>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>因为Java的序列化机制可以导致一个实例能直接从<code>byte[]</code>数组创建，而不经过构造方法，因此，它存在一定的安全隐患。一个精心构造的<code>byte[]</code>数组被反序列化后可以执行特定的Java代码，从而导致严重的安全漏洞。</p>
<p>实际上，Java本身提供的基于对象的序列化和反序列化机制既存在安全性问题，也存在兼容性问题。更好的序列化方法是通过JSON这样的通用数据结构来实现，只输出基本类型（包括String）的内容，而不存储任何与代码相关的信息。</p>
<h2 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h2><p>实例见<a href="https://www.cnblogs.com/lanxuezaipiao/p/3369962.html">https://www.cnblogs.com/lanxuezaipiao/p/3369962.html</a></p>
<p>transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。</p>
<h3 id="概要："><a href="#概要：" class="headerlink" title="概要："></a>概要：</h3><p>1）一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。</p>
<p>2）transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。</p>
<p>3）被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。（反序列化后类中static型变量username的值为当前JVM中对应static变量的值）</p>
<h3 id="transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？"><a href="#transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？" class="headerlink" title="transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？"></a>transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？</h3><p>我们知道在Java中，对象的序列化可以通过实现两种接口来实现，若实现的是Serializable接口，则所有的序列化将会自动进行，若实现的是Externalizable接口，则没有任何东西可以自动序列化，需要在writeExternal方法中进行手工指定所要序列化的变量，这与是否被transient修饰无关。因此第二个例子输出的是变量content初始化的内容，而不是null。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>String类的compareTo()方法</title>
    <url>/2021/11/03/String%E7%B1%BB%E7%9A%84compareTo()%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>参考：</p>
<p><a href="https://blog.csdn.net/qq_25827845/article/details/53870329">https://blog.csdn.net/qq_25827845/article/details/53870329</a></p>
<h2 id="JDK帮助文档"><a href="#JDK帮助文档" class="headerlink" title="JDK帮助文档:"></a>JDK帮助文档:</h2><p>首先查阅JDK.18文档：</p>
<blockquote>
<p>compareTo:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span></span></span><br></pre></td></tr></table></figure>

<p>Compares two strings lexicographically.(字典序) The comparison is based  on the Unicode value of each character in the strings. The character sequence represented by this <code>String</code> object is compared lexicographically to the  character sequence represented by the argument string. The result is a  negative integer if this <code>String</code> object lexicographically precedes  the  argument string.  The result is a positive integer if this <code>String</code> object  lexicographically follows the argument string. The result is zero if the strings are equal;  <code>compareTo</code> returns <code>0</code> exactly when the <code>equals(Object)</code>method would return <code>true</code>. </p>
<p>This is the definition of lexicographic ordering. If two strings are  different, then either they have different characters at some index that is a  valid index for both strings, or their lengths are different, or both. If they  have different characters at one or more index positions, let <em>k</em> be the  smallest such index; then the string whose character at position <em>k</em> has the smaller  value, as determined by using the &lt; operator, lexicographically precedes the  other string. In  this case, <code>compareTo</code> returns the difference of the two character  values at position <code>k</code> in the two string – that is, the  value: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.charAt(k)-anotherString.charAt(k)</span><br></pre></td></tr></table></figure>

<p>If there is no index position at which they differ, then the  shorter string  lexicographically precedes the longer string. In this case, <code>compareTo</code> returns the  difference of the lengths of the strings – that is, the value: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">this</span>.length()-anotherString.length()</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>字典序：在英文字典中，排列单词的顺序是先按照第一个字母以升序排列（即a、b、c……z 的顺序）；如果第一个字母一样，那么比较第二个、第三个乃至后面的字母。如果比到最后两个单词不一样长（比如，sigh 和 sight），那么把短者排在前。</p>
</blockquote>
<p><em>中文：</em></p>
<blockquote>
<p> 按字典顺序比较两个字符串。该比较基于字符串中各个字符的 Unicode 值。按字典顺序将此 String 对象表示的字符序列与参数字符串所表示的字符序列进行比较。如果按字典顺序此 String 对象位于参数字符串之前，则比较结果为一个负整数。如果按字典顺序此 String 对象位于参数字符串之后，则比较结果为一个正整数。如果这两个字符串相等，则结果为 0；compareTo 只在方法 equals(Object) 返回 true 时才返回 0。</p>
<p> 这是字典排序的定义。如果这两个字符串不同，那么它们要么在某个索引处的字符不同（该索引对二者均为有效索引），要么长度不同，或者同时具备这两种情况。如果它们在一个或多个索引位置上的字符不同，假设 k 是这类索引的最小值；则在位置 k 上具有较小值的那个字符串（使用 &lt; 运算符确定），其字典顺序在其他字符串之前。在这种情况下，compareTo 返回这两个字符串在位置 k 处两个char 值的差，即值：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.charAt(k)-anotherString.charAt(k)</span><br></pre></td></tr></table></figure>

<p> 如果没有字符不同的索引位置，则较短字符串的字典顺序在较长字符串之前。在这种情况下，compareTo 返回这两个字符串长度的差，即值：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.length()-anotherString.length()</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/* @param   anotherString   the &lt;code&gt;String&lt;/code&gt; to be compared.</span></span><br><span class="line"><span class="comment">     * @return  the value &lt;code&gt;0&lt;/code&gt; if the argument string is equal to</span></span><br><span class="line"><span class="comment">     *          this string; a value less than &lt;code&gt;0&lt;/code&gt; if this string</span></span><br><span class="line"><span class="comment">     *          is lexicographically less than the string argument; and a</span></span><br><span class="line"><span class="comment">     *          value greater than &lt;code&gt;0&lt;/code&gt; if this string is</span></span><br><span class="line"><span class="comment">     *          lexicographically greater than the string argument.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = value.length;</span><br><span class="line">        <span class="keyword">int</span> len2 = anotherString.value.length;</span><br><span class="line">        <span class="keyword">int</span> lim = Math.min(len1, len2);</span><br><span class="line">        <span class="keyword">char</span> v1[] = value;</span><br><span class="line">        <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">            <span class="keyword">char</span> c1 = v1[k];</span><br><span class="line">            <span class="keyword">char</span> c2 = v2[k];</span><br><span class="line">            <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                <span class="keyword">return</span> c1 - c2;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len1 - len2;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>首先取出两个字符串的长度，比较较小的长度内，两者是否相等。</li>
<li>若不相等，则直接返回该位置字符的ASCII码相减后的值。</li>
<li>若各位置都相等，则将两个字符串长度的差值返回。</li>
</ul>
<h2 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h2><p><code>public interface Comparable&lt;T&gt;</code><br>此接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的<strong>自然排序</strong>，类的 compareTo 方法被称为它的自然比较方法。</p>
<p>实现此接口的对象列表（和数组）可以通过 Collections.sort（和 Arrays.sort）进行自动排序。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p>
<p>对于类 C 的每一个 e1 和 e2 来说，当且仅当 e1.compareTo(e2) == 0 与 e1.equals(e2) 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals 一致。注意，null 不是任何类的实例，即使 e.equals(null) 返回 false，e.compareTo(null) 也将抛出 NullPointerException。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java运算符</title>
    <url>/2021/11/01/java%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p>参考：</p>
<p><a href="https://www.jianshu.com/p/8cf5af30f245">https://www.jianshu.com/p/8cf5af30f245</a></p>
<p>Java运算符大致分为逻辑运算符(&amp;&amp;,||,！)、算数运算符（+, -, *, / ,+=）、位运算符（^,|,&amp;）、其他运算符（三元运算符）</p>
<h2 id="位运算符："><a href="#位运算符：" class="headerlink" title="位运算符："></a>位运算符：</h2><h3 id="amp-（按位与）"><a href="#amp-（按位与）" class="headerlink" title="&amp;（按位与）"></a>&amp;（按位与）</h3><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211101115503563.png" alt="image-20211101115503563"></p>
<p><em>解释：</em></p>
<blockquote>
<p>&amp;按位与的运算规则是将两边的数转换为二进制位，然后运算最终值，运算规则即(两个为真才为真)1&amp;1=1 , 1&amp;0=0 , 0&amp;1=0 , 0&amp;0=0</p>
</blockquote>
<blockquote>
<p>3的二进制位是0000 0011 ， 5的二进制位是0000 0101 ， 那么就是011 &amp; 101，由按位与运算规则得知，001 &amp; 101等于0000 0001，最终值为1</p>
</blockquote>
<blockquote>
<p>7的二进制位是0000 0111，那就是111 &amp; 101等于101，也就是0000 0101，故值为5</p>
</blockquote>
<h3 id="（按位或）"><a href="#（按位或）" class="headerlink" title="|（按位或）"></a>|（按位或）</h3><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211101115630293.png" alt="image-20211101115630293"></p>
<blockquote>
<p>|按位或和&amp;按位与计算方式都是转换二进制再计算，不同的是运算规则(一个为真即为真)1|0 = 1 , 1|1 = 1 , 0|0 = 0 , 0|1 = 1</p>
</blockquote>
<blockquote>
<p>6的二进制位0000 0110 , 2的二进制位0000 0010 , 110|010为110，最终值0000 0110，故6|2等于6</p>
</blockquote>
<h3 id="（异或运算符）"><a href="#（异或运算符）" class="headerlink" title="^（异或运算符）"></a>^（异或运算符）</h3><p> <img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211101120027311.png" alt="image-20211101120027311"></p>
<blockquote>
<p>^异或运算符顾名思义，异就是不同，其运算规则为1异或0 = 1 , 1^1 = 0 , 0^1 = 1 , 0^0 = 0</p>
</blockquote>
<blockquote>
<p>5的二进制位是0000 0101 ， 9的二进制位是0000 1001，也就是0101 ^ 1001,结果为1100 , 00001100的十进制位是12</p>
</blockquote>
<h3 id="lt-lt-（左移运算符）"><a href="#lt-lt-（左移运算符）" class="headerlink" title="&lt;&lt;（左移运算符）"></a>&lt;&lt;（左移运算符）</h3><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211101120543391.png" alt="image-20211101120543391"></p>
<blockquote>
<p>5&lt;&lt;2的意思为5的二进制位往左挪两位，右边补0，5的二进制位是0000 0101 ， 就是把有效值101往左挪两位就是0001 0100 ，正数左边第一位补0，负数补1，等于乘于2的n次方，十进制位是20</p>
</blockquote>
<h3 id="gt-gt-（右移运算符）"><a href="#gt-gt-（右移运算符）" class="headerlink" title="&gt;&gt;（右移运算符）"></a>&gt;&gt;（右移运算符）</h3><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211101120737909.png" alt="image-20211101120737909"></p>
<blockquote>
<p>凡位运算符都是把值先转换成二进制再进行后续的处理，5的二进制位是0000 0101，右移两位就是把101左移后为0000 0001，正数左边第一位补0，负数补1，等于除于2的n次方，结果为1</p>
</blockquote>
<h3 id="（取反运算符）"><a href="#（取反运算符）" class="headerlink" title="~（取反运算符）"></a>~（取反运算符）</h3><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211101120954313.png" alt="image-20211101120954313"></p>
<blockquote>
<p>取反就是1为0,0为1,5的二进制位是0000 0101，取反后为1111 1010，（转换成原码）值为-6</p>
</blockquote>
<h3 id="gt-gt-gt-（无符号右移运算符）"><a href="#gt-gt-gt-（无符号右移运算符）" class="headerlink" title="&gt;&gt;&gt;（无符号右移运算符）"></a>&gt;&gt;&gt;（无符号右移运算符）</h3><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211101121128060.png" alt="image-20211101121128060"></p>
<blockquote>
<p>无符号右移运算符和右移运算符的主要区别在于负数的计算，因为无符号右移是高位补0，移多少位补多少个0。</p>
</blockquote>
<blockquote>
<p>15的二进制位是0000 1111 ， 右移2位0000 0011，结果为3</p>
</blockquote>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211101121718231.png" alt="image-20211101121718231"></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211101121938516.png" alt="image-20211101121938516"></p>
<blockquote>
<p>-6的二进制是6的二进制取反再加1,6的二进制也就是0000 0000 0000 0000 0000 0000 0000 0110，取反后加1为1111 1111 1111 1111 1111 1111 1111 1010，右移三位0001 1111 1111 1111 1111 1111 1111 1111</p>
</blockquote>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>+= 可以类型转换！</p>
<p><img src="java%E8%BF%90%E7%AE%97%E7%AC%A6.assets/image-20211101122129888.png" alt="image-20211101122129888"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>C Pointer</title>
    <url>/2021/10/30/C%20Pointer/</url>
    <content><![CDATA[<h1 id="C-Pointer"><a href="#C-Pointer" class="headerlink" title="C Pointer"></a>C Pointer</h1><p>参考：</p>
<p><a href="https://blog.csdn.net/soonfly/article/details/51131141">https://blog.csdn.net/soonfly/article/details/51131141</a></p>
<h2 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h2><ol>
<li>int p; <em>//这是一个普通的整型变量</em></li>
<li>int *p; <em>//首先从P 处开始,先与*结合,所以说明P 是一个指针,然后再与int 结合,说明指针所指向的内容的类型为int 型.所以P是一个返回整型数据的指针</em></li>
<li>int p[3]; <em>//首先从P 处开始,先与[]结合,说明P 是一个数组,然后与int 结合,说明数组里的元素是整型的,所以P 是一个由整型数据组成的数组</em></li>
<li>int *p[3]; <em>//首先从P 处开始,先与[]结合,因为其优先级比*高,所以P 是一个数组,然后再与*结合,说明数组里的元素是指针类型,然后再与int 结合,说明指针所指向的内容的类型是整型的,所以P 是一个由返回整型数据的指针所组成的数组</em></li>
<li>int (*p)[3]; <em>//首先从P 处开始,先与*结合,说明P 是一个指针然后再与[]结合(与”()”这步可以忽略,只是为了改变优先级),说明指针所指向的内容是一个数组,然后再与int 结合,说明数组里的元素是整型的.所以P 是一个指向由整型数据组成的数组的指针</em></li>
<li>int **p; <em>//首先从P 开始,先与*结合,说是P 是一个指针,然后再与*结合,说明指针所指向的元素是指针,然后再与int 结合,说明该指针所指向的元素是整型数据.由于二级指针以及更高级的指针极少用在复杂的类型中,所以后面更复杂的类型我们就不考虑多级指针了,最多只考虑一级指针.</em></li>
<li>int p(int); <em>//从P 处起,先与()结合,说明P 是一个函数,然后进入()里分析,说明该函数有一个整型变量的参数,然后再与外面的int 结合,说明函数的返回值是一个整型数据</em></li>
<li>Int (*p)(int); <em>//从P 处开始,先与指针结合,说明P 是一个指针,然后与()结合,说明指针指向的是一个函数,然后再与()里的int 结合,说明函数有一个int 型的参数,再与最外层的int 结合,说明函数的返回类型是整型,所以P 是一个指向有一个整型参数且返回类型为整型的函数的指针</em></li>
<li>int *(*p(int))[3]; <em>//可以先跳过,不看这个类型,过于复杂从P 开始,先与()结合,说明P 是一个函数,然后进入()里面,与int 结合,说明函数有一个整型变量参数,然后再与外面的*结合,说明函数返回的是一个指针,然后到最外面一层,先与[]结合,说明返回的指针指向的是一个数组,然后再与*结合,说明数组里的元素是指针,然后再与int 结合,说明指针指向的内容是整型数据.所以P 是一个参数为一个整数据且返回一个指向由整型指针变量组成的数组的指针变量的函数</em></li>
</ol>
<p>（PS.格式控制符“%p”中的p是pointer（指针）的缩写。指针的值是语言实现（编译程序）相关的，但几乎所有实现中，指针的值都是一个表示地址空间中某个存储器单元的整数。</p>
<p>printf函数族中对于%p一般以十六进制整数方式输出指针的值，附加前缀0x（自测的输出没有加前缀0）。）</p>
<h2 id="概念和例子："><a href="#概念和例子：" class="headerlink" title="概念和例子："></a>概念和例子：</h2><p>指针是一个特殊的变量，存储的数值是内存的地址。</p>
<p>要搞清一个指针需要搞清指针的四方面的内容：</p>
<ul>
<li>指针的类型</li>
<li>指针所指向的类型</li>
<li>指针的值（指针所指向的内存区）</li>
<li>指针本身所占据的内存区</li>
</ul>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>例一：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)<span class="keyword">int</span>*ptr;</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)<span class="keyword">char</span>*ptr;</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)<span class="keyword">int</span>**ptr;</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)<span class="keyword">int</span>(*ptr)[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>)<span class="keyword">int</span>*(*ptr)[<span class="number">4</span>];</span><br></pre></td></tr></table></figure>

<ol>
<li>指针的类型：</li>
</ol>
<p>把指针声明语句里的指针名字去掉，剩下的部分就是这个<strong>指针的类型。</strong></p>
<p>(1)int*</p>
<p>(2)char*</p>
<p>(3)int**</p>
<p>(4)int(*)[3]</p>
<p>(5)int*(*)[4]</p>
<ol start="2">
<li>指针所指向的类型：</li>
</ol>
<p>只须把指针声明语句中的指针名字和名字左边的指针声明符*去掉，剩下的就是指针所指向的类型。</p>
<p>当你通过指针来访问指针所指向的内存区时，指针所指向的类型决定了编译器将把那片内存区里的内容当做什么来看待。</p>
<p>(1)int</p>
<p>(2)char</p>
<p>(3)int*</p>
<p>(4)int()[3]</p>
<p>(5)int*()[4]</p>
<p>在指针的算术运算中，指针所指向的类型有很大的作用。</p>
<ol start="3">
<li>指针的值(指针所指向的内存区)</li>
</ol>
<p>指针的值是<strong>指针本身存储的数值</strong>，这个值将被编译器当作一个地址，而不是一个一般的数值。在32 位程序里，所有类型的指针的值都是一个32 位整数，因为32 位程序里内存地址全都是32 位长。指针所指向的内存区就是从指针的值所代表的那个内存地址开始，长度为si zeof(指针所指向的类型)的一片内存区。</p>
<p>我们说一个指针的值是XX，就相当于说该指针指向了以XX 为首地址的一片内存区域；</p>
<p>我们说一个指针指向了某块内存区域，就相当于说该指针的值是这块内存区域的首地址。</p>
<p>指针所指向的内存区和指针所指向的类型是两个完全不同的概念。</p>
<ol start="4">
<li>指针本身所占据的内存区</li>
</ol>
<p>使用sizeof().</p>
<p>在32 位平台里，指针本身占据了4 个字节的长度。指针本身占据的内存这个概念在判断一个指针表达式（后面会解释）是否是左值时很有用。</p>
<h3 id="指针的算术运算"><a href="#指针的算术运算" class="headerlink" title="指针的算术运算"></a>指针的算术运算</h3>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>java注解和反射</title>
    <url>/2021/10/29/java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="注解-Annotation"><a href="#注解-Annotation" class="headerlink" title="注解(Annotation)"></a>注解(Annotation)</h2><h3 id="注解入门"><a href="#注解入门" class="headerlink" title="注解入门"></a>注解入门</h3><p>Annotation是JDK5.0开始引入的技术</p>
<h4 id="Annotation的作用："><a href="#Annotation的作用：" class="headerlink" title="Annotation的作用："></a>Annotation的作用：</h4><p>不是程序本身，可以对程序作出解释， <strong>可以被其它程序（比如编译器）读取。</strong></p>
<h4 id="Annotation的格式"><a href="#Annotation的格式" class="headerlink" title="Annotation的格式:"></a>Annotation的格式:</h4><p>注解是以”@注释名”在代码中存在，还可以添加一些参数值，例如：@SuppressWarnings(value=”unchecked”).</p>
<h4 id="Annotation在哪里使用？"><a href="#Annotation在哪里使用？" class="headerlink" title="Annotation在哪里使用？"></a>Annotation在哪里使用？</h4><p>可以附加在package,class,method,field等上面，相当于给他们添加了额外的辅助信息，我们还可以通过反射机制编程实现对这些元数据的访问</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596694049798-9de9a8c2-0453-4160-a9cf-9974786f3873.png" alt="image.png"></p>
<h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><p>@Override                 重写，只用于修饰方法，表示一个方法声明打算重写超类中的另一个方法声明</p>
<p>@Deprecated            可以用于修饰方法，属性，类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或者存在更好的选择</p>
<p>@SuppressWarnings(“all”)    用来抑制编译时的警告信息</p>
<p>​                                                  与前面两个不同，需要添加参数才能正常使用</p>
<p>​                                                  @SuppressWarnings(“all”)</p>
<p>​                                                  @SuppressWarnings(“unchecked”)</p>
<p>​                                                  @SuppressWarnings(value={“unchecked”,”deprecation”})</p>
<p>​                                                    ……</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 注解与反射;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Deprecated&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test01();</span><br><span class="line">        test02();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>元注解的作用是负责注解其它注解，java定义了4个标准的meta-annotation类型，他们被用来提供对其他annotation类型作说明。</p>
<p>这些类型和他们所支持的类在java.lang.annotation包中可以找到。</p>
<p>●@Target()        用于描述注解的使用范围</p>
<p>●@Retention()  表示需要什么级别保存该注释信息，用于描述注解的生命周期</p>
<p>​           <strong>SOURCE &lt; CLASS  &lt; RUNTIME</strong></p>
<p>●@Documented   说明该注解将被包含在javadoc中</p>
<p>●@Inherited      说明子类可以继承父类中的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 注解与反射;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试元注解</span></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inherited</span>                                                 <span class="comment">//表示子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@Documented</span>                                               <span class="comment">//表示是否将我们的注解生成在Javadoc中</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span>               <span class="comment">//表示我们的注解在什么阶段有效</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span>    <span class="comment">//表示注解可以用在什么地方</span></span><br><span class="line"> <span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>@interface自定义注解，自动继承了Java.lang.annotation.Annotation接口</p>
<p>使用了@interface确定是自定义注解后，需要使用@Target和@Retention确定自定义注解的使用范围和生命周期</p>
<p>注解内设置参数的格式：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    <span class="comment">//注解的参数: 参数类型 参数名() 可以设置默认值</span></span><br><span class="line">    <span class="comment">//不是方法</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;    <span class="comment">//默认为空，不设默认值，一定要给注解赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;         </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;         <span class="comment">//默认值为-1表示不存在</span></span><br><span class="line">    String[] schools() <span class="keyword">default</span> &#123;<span class="string">&quot;清华大学&quot;</span>,<span class="string">&quot;北京大学&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 注解与反射;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation2(age=18)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//@MyAnnotation3(value = &quot;Java&quot;)</span></span><br><span class="line">    <span class="meta">@MyAnnotation3( &quot;Java&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    <span class="comment">//注解的参数 参数类型 参数名() 不是方法</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;    <span class="comment">//默认为空，不设默认值，一定要给注解赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;         </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;         <span class="comment">//默认值为-1表示不存在</span></span><br><span class="line">    String[] schools() <span class="keyword">default</span> &#123;<span class="string">&quot;清华大学&quot;</span>,<span class="string">&quot;北京大学&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="反射-Reflection"><a href="#反射-Reflection" class="headerlink" title="反射(Reflection)"></a>反射(Reflection)</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><p><a href="https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html">好文，大白话说Java反射，很底层</a></p>
</li>
<li><p><a href="!%5Bimg%5D(file:///Chttps://www.cnblogs.com/chanshuyi/p/the_java_class_load_mechamism.html">类加载过程</a></p>
</li>
<li><p>双亲委派机制</p>
</li>
</ol>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java的反射机制是指在程序运行时可以判断任意一个对象的所属类、可以构造任意一个类的对象、可以判断任意一个类所具有的成员变量以及方法、可以调用任意一个类的成员变量和方法。<strong>反射机制被视为动态语言的关键。</strong></p>
<p>==<strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong>==</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211029143102361.png" alt="image-20211029143102361"></p>
<blockquote>
<p>动态语言 vs 静态语言<br>1、动态语言<br>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。主要动态语言： Object-C、 C#、 JavaScript、 PHP、 Python、 Erlang。2、静态语言与动态语言相对应的， 运行时结构不可变的语言就是静态语言。如Java、 C、C++。//Java不是动态语言， 但Java可以称之为“准动态语言” 。 即Java有一定的动态性， 我们可以利用反射机制、 字节码操作获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！</p>
</blockquote>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596698326001-102b75bc-456d-4430-966d-b87988400dda.png" alt="image.png"></p>
<p>反射方式：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596698392127-cda63049-90e7-4b8f-8dca-4f6b31c21e2a.png" alt="image.png"></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596698470496-528f361f-b34c-477d-977e-9e90cc6e71ad.png" alt="image.png"></p>
<p>功能：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596698506408-0a03ba76-5eb8-446b-9bc2-82e58f56294e.png" alt="image.png"></p>
<p>API:</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596699527238-98d47d79-f11a-43fb-9f78-8807c3d54028.png" alt="image.png"></p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AnnotationReflection.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试什么是反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//通过反射获取类的Class对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;AnnotationReflection.Reflection.User&quot;</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;AnnotationReflection.Reflection.User&quot;</span>);</span><br><span class="line">        Class c3 = Class.forName(<span class="string">&quot;AnnotationReflection.Reflection.User&quot;</span>);</span><br><span class="line">        Class c4 = Class.forName(<span class="string">&quot;AnnotationReflection.Reflection.User&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        System.out.println(c4.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> id, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//getter&amp;setter&amp;toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="理解Class类并获取Class实例"><a href="#理解Class类并获取Class实例" class="headerlink" title="理解Class类并获取Class实例"></a>理解Class类并获取Class实例</h3><h4 id="Class类-："><a href="#Class类-：" class="headerlink" title="Class类 ："></a>Class类 ：</h4><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596699164002-a2d7c83c-d666-494a-968f-cc6fb743fbca.png" alt="image.png"></p>
<h4 id="Class类的常用方法-："><a href="#Class类的常用方法-：" class="headerlink" title="Class类的常用方法 ："></a>Class类的常用方法 ：</h4><p>  <img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596699488681-b8a997b8-1f8c-40d6-ba6d-d409b7037864.png" alt="image.png"></p>
<h4 id="获取Class类的实例-："><a href="#获取Class类的实例-：" class="headerlink" title="获取Class类的实例 ："></a>获取Class类的实例 ：</h4><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596699680012-1e441bd2-0855-4555-95ed-67894ed8e5b2.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AnnotationReflection.Reflection;</span><br><span class="line"><span class="comment">// 测试Class类的创建方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Teacher();</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：通过对象获得</span></span><br><span class="line">        Class c1 = person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        <span class="comment">//方式二：通过forName</span></span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;AnnotationReflection.Reflection.Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        <span class="comment">//方式三： 通过类名.class</span></span><br><span class="line">        Class c3 = Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 方式四：基本内置类型的包装类都有一个Type属性(作为了解)</span></span><br><span class="line">        <span class="comment">// 这里的对象就和上面的不一样了，这里是 Integer，上面是 Student</span></span><br><span class="line">        <span class="comment">// public static final Class&lt;Integer&gt;  TYPE = (Class&lt;Integer&gt;) Class.getPrimitiveClass(&quot;int&quot;);</span></span><br><span class="line">        Class c4 = Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得父类类型</span></span><br><span class="line">        <span class="comment">// Student 的一个父类类型(通过获得这个类,在通过这个类的Class对象去获得其它属性(例如：父类))</span></span><br><span class="line">        Class c5 = c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person [name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;老师&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="哪些类型可以有Class对象"><a href="#哪些类型可以有Class对象" class="headerlink" title="哪些类型可以有Class对象 :"></a>哪些类型可以有Class对象 :</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596700350433-39523592-c6f1-4d71-a36d-956ff064c870.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AnnotationReflection.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class c1 = Object.class;      <span class="comment">// 类</span></span><br><span class="line">        Class c2 = Comparable.class;  <span class="comment">// 接口</span></span><br><span class="line">        Class c3 = String[].class;      <span class="comment">// 一维数组</span></span><br><span class="line">        Class c4 = <span class="keyword">int</span>[][].class;     <span class="comment">// 二维数组</span></span><br><span class="line">        Class c5 = Override.class;      <span class="comment">// 注解</span></span><br><span class="line">        Class c6 = ElementType.class; <span class="comment">// 枚举</span></span><br><span class="line">        Class c7 = Integer.class;     <span class="comment">// 基本数据类型</span></span><br><span class="line">        Class c8 = <span class="keyword">void</span>.class;          <span class="comment">// 空类型</span></span><br><span class="line">        Class c9 = Class.class;         <span class="comment">// Class本身</span></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只要元素类型与维度一样，就是同一个Class</span></span><br><span class="line">        <span class="comment">// 同一个元素同一个类只有一个Class对象</span></span><br><span class="line">        <span class="comment">// 一个类只有一个Class对象</span></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.println(a.getClass().hashCode());</span><br><span class="line">        System.out.println(b.getClass().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="title">interface</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Comparable</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> [<span class="title">Ljava</span>.<span class="title">lang</span>.<span class="title">String</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> [[<span class="title">I</span></span></span><br><span class="line"><span class="class"><span class="title">interface</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Override</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">ElementType</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Integer</span></span></span><br><span class="line"><span class="class"><span class="title">void</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Class</span></span></span><br><span class="line"><span class="class">381259350</span></span><br><span class="line"><span class="class">381259350</span></span><br></pre></td></tr></table></figure>

<h3 id="类的加载与ClassLoader"><a href="#类的加载与ClassLoader" class="headerlink" title="类的加载与ClassLoader"></a>类的加载与ClassLoader</h3><h4 id="Java内存分析"><a href="#Java内存分析" class="headerlink" title="Java内存分析"></a>Java内存分析</h4><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596700646580-dfc700e8-9dd3-4f96-a1f2-221b90161375.png" alt="image.png"></p>
<h4 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h4><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596700708152-d6f415ee-b593-4bac-9cbe-a61f75d18adb.png" alt="image.png"></p>
<h4 id="类的加载与ClassLoader的理解"><a href="#类的加载与ClassLoader的理解" class="headerlink" title="类的加载与ClassLoader的理解"></a>类的加载与ClassLoader的理解</h4><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596700763111-27716c4e-1571-4bd3-9cbe-7b35c74ef09e.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AnnotationReflection.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    System.out.println(A.m);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 1、加载到内存，会产生一个类对应的 Class对象</span></span><br><span class="line"><span class="comment">     * 2、链接 ，链接结束后 m = 0（刚开始赋值默认值为0）</span></span><br><span class="line"><span class="comment">     * 3、初始化(调用 clinit 方法，并进行合并)</span></span><br><span class="line"><span class="comment">     *    通过&lt;clinit&gt;()&#123;</span></span><br><span class="line"><span class="comment">     *        System.out.println(&quot;A类静态代码块初始化&quot;);</span></span><br><span class="line"><span class="comment">            m = 300;</span></span><br><span class="line"><span class="comment">            m = 100;</span></span><br><span class="line"><span class="comment">     *      &#125;方法初始化(拿代码进来(上面的三行代码拿进来))</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *    此时 m = 100</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类静态代码块初始化&quot;</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类的无参构造初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//A类静态代码块初始化</span></span><br><span class="line"><span class="comment">//A类无参构造初始化</span></span><br><span class="line"><span class="comment">//m=100</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596702208148-815cb7bc-7e3c-4d24-b2bb-3e54df09d11e.png" alt="image.png"></p>
<p>1、刚开始加载类时（==类的数据、静态变量、静态方法、常量池、代码==）</p>
<p>2、类加载完成立马产生一个Class对象（生成一个Java.lang.Class对象 代表 Test05这个类、生成一个Java.lang.Class对象 代表 A这个类），在加载的时候就形成了这两个对象，这两个Class对象就包含了这个类所有的东西</p>
<p>3、下面开始准备执行main（）方法了，<strong>此时首先 m 默认为0（m = 0）（这里匹配链接阶段的准备阶段：正式为类变量(static)分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配）</strong></p>
<p>链接阶段的 m为0（m = 0）</p>
<p>4、new A（）在堆内存中，这个动作会产生一个A类新的对象（<strong>这个对象会去找它自己(A类)的那个Class类，无论创建多少个A类的对象，它的Class类只有一个</strong>），</p>
<p>它会指向A类的Class，这时就能拿到A类的所有东西</p>
<p>（它会去找A类的Class（在堆内存指向），因为 Class 拥有A类的所有数据，然后通过这些数据，就可以给A类显示赋值了，然后初始化，此时初始化时会执行一个**<clinit>()方法**，它会把静态代码块的初始值合并了）</p>
<p>5、合并静态代码块（合并 m = 300 和 m = 100），这两句话相当于重新赋值给 m（第一次给m赋值为300第二次赋值为100，并把前面的值被覆盖了，于是上面的 A.m打印出来的为100，它是在初始化的时候执行的（把静态代码块合并起来），通过A类的具体对象给它赋值，赋值完通过初始化，这次就有一个初始值，就可以打印出来了）</p>
<h4 id="什么时候类会初始化"><a href="#什么时候类会初始化" class="headerlink" title="什么时候类会初始化"></a>什么时候类会初始化</h4><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596705080253-72a23ded-dba1-4666-b569-c9dc87904065.png" alt="image.png"></p>
<h5 id="类的主动引用"><a href="#类的主动引用" class="headerlink" title="类的主动引用"></a>类的主动引用</h5><p>如果在main（）方法中去new一个子类的对象（子类继承了父类），那么JVM会自动初始化父类</p>
<p>由于这里是new子类(Son类)，父类没有被初始化，所以JVM会先自动初始化父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AnnotationReflection.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类什么时候会初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Main类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">//        Son son = new Son();</span></span><br><span class="line">    <span class="comment">//        //反射也会产生主动引用</span></span><br><span class="line">    <span class="comment">//        Class.forName(&quot;AnnotationReflection.Reflection.Son&quot;);</span></span><br><span class="line">        <span class="comment">//不会产生类的引用方法</span></span><br><span class="line">        System.out.println(Son.b);</span><br><span class="line">        Son[] sons = <span class="keyword">new</span> Son[<span class="number">10</span>];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">Main类被加载</span><br><span class="line">父类被加载</span><br><span class="line">子类被加载</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h5 id="类主动引用（反射形式）"><a href="#类主动引用（反射形式）" class="headerlink" title="类主动引用（反射形式）"></a>类主动引用（反射形式）</h5><p>通过反射也是会产生类的主动引用，它会把所有东西加载进来(Main类被加载、父类被加载、子类被加载)，这样会极大的消耗资源</p>
<p>代码及输出结果同上</p>
<h5 id="类的被动引用"><a href="#类的被动引用" class="headerlink" title="类的被动引用"></a>类的被动引用</h5><p>通过子类去调用父类的静态方法或者静态变量，不会对子类产生任何影响，子类不会被加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> System.out.println(Son.b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">Main类被加载</span><br><span class="line">父类被加载</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<h5 id="被动引用（通过数组形式）"><a href="#被动引用（通过数组形式）" class="headerlink" title="被动引用（通过数组形式）"></a>被动引用（通过数组形式）</h5><p>数组占了一个空间，开辟了5个空间（如果没被加载说明什么都没干（此时只有main类被加载））</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 通过一个数组</span></span><br><span class="line"><span class="comment">// 数组占了一个空间，开辟了5个空间（如果没被加载说明什么都没干（此时只有main类被加载））</span></span><br><span class="line">Son[] array = <span class="keyword">new</span> Son[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">//main类被加载</span></span><br></pre></td></tr></table></figure>

<p>所有的常量和类的静态变量都是在链接阶段就被赋了一个值，在链接阶段就做了，初始化的时候就已经存在了</p>
<h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><ol>
<li>引导类加载器</li>
<li>扩展类加载器</li>
<li>系统类加载器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AnnotationReflection.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line"></span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line"></span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试当前类是哪个加载器加载的</span></span><br><span class="line">        ClassLoader classLoader = Class.forName(<span class="string">&quot;AnnotationReflection.Reflection.Test06&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试JDK内置的类是谁加载的</span></span><br><span class="line">        ClassLoader classLoader1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何获取系统类加载器可以加载的路径</span></span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;java.class.path&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//双亲委派机制：跟加载器和扩展加载器中的jar包有类，不会使用自己定义的</span></span><br><span class="line">        <span class="comment">// java.lang.String--&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建运行时类对象"><a href="#创建运行时类对象" class="headerlink" title="创建运行时类对象"></a>创建运行时类对象</h3><p>获取类的各种结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AnnotationReflection.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;AnnotationReflection.Reflection.User&quot;</span>);</span><br><span class="line">        System.out.println(c1.getName());               <span class="comment">//包名+类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());         <span class="comment">//仅类名</span></span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        c1 = user.getClass();</span><br><span class="line">        System.out.println(c1.getName());               <span class="comment">//包名+类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());         <span class="comment">//仅类名</span></span><br><span class="line">        Field[] fields = c1.getFields();        <span class="comment">//获得public属性</span></span><br><span class="line">        fields = c1.getDeclaredFields();        <span class="comment">//获得全部属性</span></span><br><span class="line">        <span class="keyword">for</span>(Field field: fields)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">       </span><br><span class="line">        Method[] methods = c1.getMethods(); <span class="comment">// 全部方法</span></span><br><span class="line">        <span class="keyword">for</span>(Method method: methods)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        Method[] declaredMethods = c1.getDeclaredMethods(); <span class="comment">//本类的所有方法：包括私有的方法</span></span><br><span class="line">        <span class="keyword">for</span>(Method declaredMethod: declaredMethods)&#123;</span><br><span class="line">            System.out.println(declaredMethod);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        Method getName = c1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        Method setName = c1.getMethod(<span class="string">&quot;setName&quot;</span>,String.class);</span><br><span class="line">        System.out.println(getName);</span><br><span class="line">        System.out.println(setName);</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        Constructor constructor = c1.getConstructor();</span><br><span class="line">        Constructor declaredConstructor = c1.getDeclaredConstructor(String.class,<span class="keyword">int</span>.class,<span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">        System.out.println(declaredConstructor);</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 动态创建对象执行方法 （ 调用运行时类的指定结构 ）：</p>
<ul>
<li>创建对象：</li>
</ul>
<ol>
<li>c1.newInstance()                                 //通过类创建对象</li>
<li>(User)constructor.newInstance()     //通过构造器创建对象</li>
</ol>
<ul>
<li>反射调用方法：</li>
</ul>
<p>method.invoke(object,parameter);</p>
<ul>
<li>操作属性：</li>
</ul>
<p>先field.setAccessible(true);       //不能直接操作私有属性，需要关闭程序的安全检测</p>
<p>然后field.set(object,parameter);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AnnotationReflection.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获得class对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;AnnotationReflection.Reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        User user= (User)c1.newInstance();  //默认调用无参构造器</span></span><br><span class="line"><span class="comment">//        System.out.println(user);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射方式通过构造器创建对象</span></span><br><span class="line">        Constructor constructor = c1.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">        User user1 = (User)constructor.newInstance(<span class="string">&quot;青梅&quot;</span>,<span class="number">18</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射调用方法</span></span><br><span class="line">        User user3 = (User)c1.newInstance();</span><br><span class="line">        Method setName = c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        setName.invoke(user3,<span class="string">&quot;青梅&quot;</span>);     <span class="comment">//对象+方法参数值</span></span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射操作属性</span></span><br><span class="line">        User user4 = (User)c1.newInstance();</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);       <span class="comment">//不能直接操作私有属性，需要关闭程序的安全检测</span></span><br><span class="line">        name.set(user4,<span class="string">&quot;青梅2&quot;</span>);</span><br><span class="line">        System.out.println(user4.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AnnotationReflection.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分析性能问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">        test();</span><br><span class="line">        test2();</span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//普通方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方式10亿次:&quot;</span> + (end-start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反射方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Class c1 = user.getClass();</span><br><span class="line">        Method getName = c1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式10亿次:&quot;</span> + (end-start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反射方式调用   关闭检测</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Class c1 = user.getClass();</span><br><span class="line">        Method getName = c1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        getName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭检测后反射方式10亿次:&quot;</span> + (end-start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596803093544-373965e3-a760-43d4-8c7f-8bc46ce6dfef.png" alt="img"></p>
<h3 id="获取泛型信息"><a href="#获取泛型信息" class="headerlink" title="获取泛型信息"></a>获取泛型信息</h3><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211002124931678.png" alt="image-20211002124931678"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AnnotationReflection.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test11</span> </span>&#123;</span><br><span class="line">    <span class="comment">//泛型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">(Map&lt;String,User&gt; map, List&lt;User&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,User&gt;  <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        Method method = Test11.class.getMethod(<span class="string">&quot;test01&quot;</span>, Map.class, List.class);</span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes();<span class="comment">//拿到泛型参数化类型</span></span><br><span class="line">        <span class="keyword">for</span>(Type genericParameterType:genericParameterTypes)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;#&quot;</span>+ genericParameterType);</span><br><span class="line">            <span class="keyword">if</span>(genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123;<span class="comment">//判断是不是参数化类型</span></span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();<span class="comment">//如果是，返回真实类型</span></span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument:actualTypeArguments)&#123;</span><br><span class="line">                    System.out.println(actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        Method method2 = Test11.class.getMethod(<span class="string">&quot;test02&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        Type genericReturnType = method2.getGenericReturnType();<span class="comment">//拿到返回值类型</span></span><br><span class="line">        <span class="keyword">if</span>(genericReturnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType)genericReturnType  ).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument:actualTypeArguments)&#123;</span><br><span class="line">                System.out.println(actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596804549571-9a471e62-c374-4e3a-b977-251079e665a5.png" alt="image.png"></p>
<p>解释：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211002124848596.png" alt="image-20211002124848596"></p>
<p>先获得test01的方法，之后获得该方法的泛型参数类型，即输出带#的两行</p>
<p>判断是不是参数化类型，如果是就强制类型转化，获得真实的参数信息，打印出来</p>
<h3 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AnnotationReflection.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="comment">//模拟类和表结构的映射关系</span></span><br><span class="line"><span class="comment">//练习反射操作注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;AnnotationReflection.Reflection.Student2&quot;</span>);</span><br><span class="line">        <span class="comment">//通过反射获得注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();<span class="comment">//全部注解</span></span><br><span class="line">        <span class="keyword">for</span>(Annotation annotation:annotations)&#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得注解的value的值</span></span><br><span class="line">        TableStudent tableStudent = (TableStudent) c1.getAnnotation(TableStudent.class);</span><br><span class="line">        String value = tableStudent.value();</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类指定的注解</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        Field f1 = c1.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        FieldStudent annotation1 = f1.getAnnotation(FieldStudent.class);</span><br><span class="line">        System.out.println(annotation1.columnName());</span><br><span class="line">        System.out.println(annotation1.type());</span><br><span class="line">        System.out.println(annotation1.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        Field f2 = c1.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        FieldStudent annotation2 = f2.getAnnotation(FieldStudent.class);</span><br><span class="line">        System.out.println(annotation2.columnName());</span><br><span class="line">        System.out.println(annotation2.type());</span><br><span class="line">        System.out.println(annotation2.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        Field f3 = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        FieldStudent annotation3 = f3.getAnnotation(FieldStudent.class);</span><br><span class="line">        System.out.println(annotation3.columnName());</span><br><span class="line">        System.out.println(annotation3.type());</span><br><span class="line">        System.out.println(annotation3.length());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableStudent(&quot;db_student&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span></span>&#123;</span><br><span class="line">    <span class="meta">@FieldStudent(columnName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@FieldStudent(columnName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@FieldStudent(columnName = &quot;db_name&quot;,type = &quot;varchar&quot;,length = 3)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参无参构造器</span></span><br><span class="line">    <span class="comment">//getter&amp;setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类名的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span><span class="comment">//作用域是类</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//生命周期</span></span><br><span class="line"><span class="meta">@interface</span> TableStudent&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span><span class="comment">//作用域是字段</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//生命周期</span></span><br><span class="line"><span class="comment">//属性的注解</span></span><br><span class="line"><span class="meta">@interface</span> FieldStudent&#123;</span><br><span class="line">    <span class="function">String <span class="title">columnName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596806422225-0806af70-384d-4bcd-8bbb-b6a8e92e72b0.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java自动装箱和拆箱</title>
    <url>/2021/10/28/Java%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1/</url>
    <content><![CDATA[<p>参考：</p>
<p><a href="http://www.cnblogs.com/dolphin0520/p/3780005.html">博客园</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260473794166400">廖雪峰的官方网站</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/78590948">知乎专栏</a></p>
<h2 id="前置："><a href="#前置：" class="headerlink" title="前置："></a>前置：</h2><p>Java为每种基本数据类型都提供了包装器类型。</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211028125119235.png" alt="image-20211028125119235"></p>
<ul>
<li><p>为什么要有包装器类型？</p>
<ol>
<li><p>包装类多了一个Null值，增加了表达性；</p>
</li>
<li><p>让基本类型也具有对象的特征，（以致于能够）兼容集合，泛型的使用（PS.容器装的都是Object）；</p>
</li>
<li><p>包装类可以数据缓存；</p>
</li>
<li><p>包装类里面有一些很有用的方法和属性，如HashCode,ParseInt。</p>
</li>
</ol>
</li>
<li><p>什么时候用包装类，什么时候用基本类型？</p>
<ol>
<li><p>在pojo类中定义的属性用包装类</p>
</li>
<li><p>在rpc方法中定义参数和返回值的类型用包装类</p>
</li>
<li><p>定义局部变量用基本类型</p>
</li>
</ol>
</li>
</ul>
<h2 id="包装类的特点"><a href="#包装类的特点" class="headerlink" title="包装类的特点"></a>包装类的特点</h2><ol>
<li>不变类</li>
</ol>
<p>所有的包装类型都是不变类。我们查看<code>Integer</code>的源码可知，它的核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，一旦创建了<code>Integer</code>对象，该对象就是不变的。</p>
<p>对两个<code>Integer</code>实例进行比较要特别注意：绝对不能用<code>==</code>比较，因为<code>Integer</code>是引用类型，必须使用<code>equals()</code>比较。（<em>绝不能</em>因为Java标准库的<code>Integer</code>内部有缓存优化就用<code>==</code>比较，必须用<code>equals()</code>方法比较两个<code>Integer</code>。）</p>
<ol start="2">
<li>数据缓存</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Integer i1 = <span class="number">100</span>;</span><br><span class="line">        Integer i2 = <span class="number">100</span>;</span><br><span class="line">        Integer i3 = <span class="number">200</span>;</span><br><span class="line">        Integer i4 = <span class="number">200</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>输出：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p><em>原因：</em></p>
<p>Integer的valueOf方法的具体实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">		<span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在通过valueOf方法创建Integer对象的时候，如果数值在[-128,127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象。</p>
<p>各包装类缓存的取值范围：</p>
<p>· Boolean：使用静态 final 定义；</p>
<p>· Byte：缓存区 -128~127；</p>
<p>· Short：缓存区 -128~127；</p>
<p>· Character：缓存区 0~127；</p>
<p>· Long：缓存区 -128~127；</p>
<p>· Integer：缓存区 -128~127；</p>
<p>· Float 和 Double 不会有缓存。</p>
<p>PS：</p>
<p>为什么Double类,Float类的valueOf方法会采用与Integer类的valueOf方法不同的实现？</p>
<p><em>在某个范围内的整型数值的个数是有限的，而浮点数却不是。</em></p>
<ol start="3">
<li>创建实例的方法</li>
</ol>
<p>因为<code>Integer.valueOf()</code>可能始终返回同一个<code>Integer</code>实例，因此，在我们自己创建<code>Integer</code>的时候，以下两种方法：</p>
<ul>
<li>方法1：<code>Integer n = new Integer(100);</code></li>
<li>方法2：<code>Integer n = Integer.valueOf(100);</code></li>
</ul>
<p>方法2更好，因为方法1总是创建新的<code>Integer</code>实例，方法2把内部优化留给<code>Integer</code>的实现者去做，即使在当前版本没有优化，也有可能在下一个版本进行优化。</p>
<p>我们把能创建“新”对象的静态方法称为静态工厂方法。<code>Integer.valueOf()</code>就是静态工厂方法，它尽可能地返回缓存的实例以节省内存。</p>
<p> 创建新对象时，优先选用==静态工厂方法==而不是new操作符。</p>
<p>如果我们考察<code>Byte.valueOf()</code>方法的源码，可以看到，标准库返回的<code>Byte</code>实例全部是缓存实例，但调用者并不关心静态工厂方法以何种方式创建新实例还是直接返回缓存的实例。</p>
<ol start="4">
<li>提供的方法</li>
</ol>
<ul>
<li>进制转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Integer.toString(<span class="number">100</span>)); <span class="comment">// &quot;100&quot;,表示为10进制</span></span><br><span class="line">        System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">36</span>)); <span class="comment">// &quot;2s&quot;,表示为36进制</span></span><br><span class="line">        System.out.println(Integer.toHexString(<span class="number">100</span>)); <span class="comment">// &quot;64&quot;,表示为16进制</span></span><br><span class="line">        System.out.println(Integer.toOctalString(<span class="number">100</span>)); <span class="comment">// &quot;144&quot;,表示为8进制</span></span><br><span class="line">        System.out.println(Integer.toBinaryString(<span class="number">100</span>)); <span class="comment">// &quot;1100100&quot;,表示为2进制</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>解析</li>
</ul>
<p><code>parseInt()</code>把字符串解析成一个整数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x1 = Integer.parseInt(<span class="string">&quot;100&quot;</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="keyword">int</span> x2 = Integer.parseInt(<span class="string">&quot;100&quot;</span>, <span class="number">16</span>); <span class="comment">// 256,因为按16进制解析</span></span><br></pre></td></tr></table></figure>

<ul>
<li>获得基本类型</li>
</ul>
<p>所有的整数和浮点数的包装类型都继承自<code>Number</code>，因此，可以非常方便地直接通过包装类型获取各种基本类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向上转型为Number:</span></span><br><span class="line">Number num = <span class="keyword">new</span> Integer(<span class="number">999</span>);</span><br><span class="line"><span class="comment">// 获取byte, int, long, float, double:</span></span><br><span class="line"><span class="keyword">byte</span> b = num.byteValue();</span><br><span class="line"><span class="keyword">int</span> n = num.intValue();</span><br><span class="line"><span class="keyword">long</span> ln = num.longValue();</span><br><span class="line"><span class="keyword">float</span> f = num.floatValue();</span><br><span class="line"><span class="keyword">double</span> d = num.doubleValue();</span><br></pre></td></tr></table></figure>

<ul>
<li>处理无符号整型</li>
</ul>
<p>在Java中，并没有无符号整型（Unsigned）的基本数据类型。<code>byte</code>、<code>short</code>、<code>int</code>和<code>long</code>都是带符号整型，最高位是符号位。而C语言则提供了CPU支持的全部数据类型，包括无符号整型。无符号整型和有符号整型的转换在Java中就需要借助包装类型的静态方法完成。</p>
<p>例如，byte是有符号整型，范围是<code>-128</code><del><code>+127</code>，但如果把<code>byte</code>看作无符号整型，它的范围就是<code>0</code></del><code>255</code>。我们把一个负的<code>byte</code>按无符号整型转换为<code>int</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> x = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span> y = <span class="number">127</span>;</span><br><span class="line">        System.out.println(Byte.toUnsignedInt(x)); <span class="comment">// 255</span></span><br><span class="line">        System.out.println(Byte.toUnsignedInt(y)); <span class="comment">// 127</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因为<code>byte</code>的<code>-1</code>的二进制表示是<code>11111111</code>，以无符号整型转换后的<code>int</code>就是<code>255</code>。</p>
<p>类似的，可以把一个<code>short</code>按unsigned转换为<code>int</code>，把一个<code>int</code>按unsigned转换为<code>long</code>。</p>
<h2 id="自动装箱和拆箱（Auto-Boxing）"><a href="#自动装箱和拆箱（Auto-Boxing）" class="headerlink" title="自动装箱和拆箱（Auto Boxing）"></a>自动装箱和拆箱（Auto Boxing）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = <span class="number">10</span>;  <span class="comment">//装箱</span></span><br><span class="line"><span class="keyword">int</span> n = i;   <span class="comment">//拆箱</span></span><br></pre></td></tr></table></figure>

<p><em>自动将基本数据类型转换为包装器类型–&gt;自动装箱</em></p>
<p><em>自动将包装器类型转换为基本数据类型–&gt;自动拆箱</em></p>
<p><strong>装箱过程是通过调用包装器的valueOf方法实现的，而拆箱过程是通过调用包装器的 xxxValue方法实现的。</strong></p>
<p>底层实现:<a href="https://www.cnblogs.com/dolphin0520/p/3780005.html">https://www.cnblogs.com/dolphin0520/p/3780005.html</a></p>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><strong>题1：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Integer i1 = <span class="number">100</span>;</span><br><span class="line">        Integer i2 = <span class="number">100</span>;</span><br><span class="line">        Integer i3 = <span class="number">200</span>;</span><br><span class="line">        Integer i4 = <span class="number">200</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>输出：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p><em>解释：</em></p>
<p>包装类数据缓存，Integer类[-128,127],IntegerCache.cache中缓存的是同一个对象，超过该范围创建新对象。</p>
<p><strong>题2：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Double i1 = <span class="number">100.0</span>;</span><br><span class="line">    Double i2 = <span class="number">100.0</span>;</span><br><span class="line">    Double i3 = <span class="number">200.0</span>;</span><br><span class="line">    Double i4 = <span class="number">200.0</span>;</span><br><span class="line">    </span><br><span class="line">    System.out.println(i1==i2);</span><br><span class="line">    System.out.println(i3==i4);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>输出：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p><em>解释：</em></p>
<p>Double,Float无缓存</p>
<p><strong>题3：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Boolean i1 = <span class="keyword">false</span>;</span><br><span class="line">        Boolean i2 = <span class="keyword">false</span>;</span><br><span class="line">        Boolean i3 = <span class="keyword">true</span>;</span><br><span class="line">        Boolean i4 = <span class="keyword">true</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>输出：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p><em>解释：</em></p>
<p>面是Boolean的valueOf方法的具体实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>　　而其中的 TRUE 和FALSE又是什么呢？在Boolean中定义了2个静态成员属性： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean TRUE = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * The &lt;code&gt;Boolean&lt;/code&gt; object corresponding to the primitive </span></span><br><span class="line"><span class="comment">    * value &lt;code&gt;false&lt;/code&gt;. </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean FALSE = <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<p><strong>题4：</strong></p>
<p>谈谈Integer i = new Integer(xxx)和Integer i =xxx;这两种方式的区别。</p>
<p>　　当然，这个题目属于比较宽泛类型的。但是要点一定要答上，我总结一下主要有以下这两点区别：</p>
<p>　　1）第一种方式不会触发自动装箱的过程；而第二种方式会触发；</p>
<p>　　2）在执行效率和资源占用上的区别。第二种方式的执行效率和资源占用在一般性情况下要优于第一种情况（注意这并不是绝对的）。</p>
<p><strong>题5：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        Integer a = <span class="number">1</span>;</span><br><span class="line">        Integer b = <span class="number">2</span>;</span><br><span class="line">        Integer c = <span class="number">3</span>;</span><br><span class="line">        Integer d = <span class="number">3</span>;</span><br><span class="line">        Integer e = <span class="number">321</span>;</span><br><span class="line">        Integer f = <span class="number">321</span>;</span><br><span class="line">        Long g = <span class="number">3L</span>;</span><br><span class="line">        Long h = <span class="number">2L</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(c==d);</span><br><span class="line">        System.out.println(e==f);</span><br><span class="line">        System.out.println(c==(a+b));</span><br><span class="line">        System.out.println(c.equals(a+b));</span><br><span class="line">        System.out.println(g==(a+b));</span><br><span class="line">        System.out.println(g.equals(a+b));</span><br><span class="line">        System.out.println(g.equals(a+h));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>输出：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p><em>解释：</em></p>
<p><strong>当 “==”运算符的两个操作数都是 包装器类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式（即包含算术运算）则比较的是数值（即会触发自动拆箱的过程）。</strong></p>
<p><strong>对于包装器类型，equals方法并不会进行类型转换。</strong></p>
<p>3.第三句由于 a+b包含了算术运算，因此会触发自动拆箱过程（会调用intValue方法），因此它们比较的是数值是否相等。</p>
<p>4.而对于c.equals(a+b)会先触发自动拆箱过程，再触发自动装箱过程，也就是说a+b，会先各自调用intValue方法，得到了加法运算后的数值之后，便调用Integer.valueOf方法，再进行equals比较。</p>
<p>6.Long.equals(obj)是先判断obj是否是Long或者Long的子类，否则直接返回false；而g.equals(a+b)，a+b是先经过拆箱相加然后将结果再装箱，<br>最终是Long.equals(Integer)–&gt;Long instanceof Intger返回false</p>
<p>7.对于a+h，先自动触发拆箱，就变成了int类型和long类型相加，这个会触发类型晋升，结果是long类型的，然后会触发装箱过程，就变成Long了。因此比较结果是true。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet学习笔记</title>
    <url>/2021/10/21/Servlet/</url>
    <content><![CDATA[<p><strong>待更新</strong></p>
<h2 id="servlet生命周期"><a href="#servlet生命周期" class="headerlink" title="servlet生命周期"></a>servlet生命周期</h2><p>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p>
<ul>
<li>Servlet 初始化后调用 <strong>init ()</strong> 方法。</li>
<li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li>
<li>Servlet 销毁前调用 <strong>destroy()</strong> 方法。</li>
<li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li>
</ul>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211021123349004.png" alt="image-20211021123349004"></p>
<ul>
<li>第一个到达服务器的 HTTP 请求被委派到 Servlet 容器。</li>
<li>Servlet 容器在调用 service() 方法之前加载 Servlet。</li>
<li>然后 Servlet 容器处理由多个线程产生的多个请求，每个线程执行一个单一的 Servlet 实例的 service() 方法。</li>
</ul>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>java常用类</title>
    <url>/2021/10/16/java%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    <content><![CDATA[<p><strong>待更新</strong></p>
<h2 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h2><p>参考：<a href="https://blog.csdn.net/mad1989/article/details/26389541">https://blog.csdn.net/mad1989/article/details/26389541</a></p>
<h3 id="String、StringBuffer、StringBuilder区别"><a href="#String、StringBuffer、StringBuilder区别" class="headerlink" title="String、StringBuffer、StringBuilder区别:"></a>String、StringBuffer、StringBuilder区别:</h3><p>StringBuffer、StringBuilder和String一样，也用来代表字符串。</p>
<p>String类是不可变类，任何对String的改变都 会引发新的String对象的生成；</p>
<p>StringBuffer则是可变类，任何对它所指代的字符串的改变都不会产生新的对象。</p>
<p>既然可变和不可变都有了，为何还有一个StringBuilder呢？相信初期的你，在进行append时，一般都会选择StringBuffer吧！</p>
<p>先说一下集合的故事，HashTable是线程安全的，很多方法都是synchronized方法，而HashMap不是线程安全的，但其在单线程程序中的性能比HashTable要高。StringBuffer和StringBuilder类的区别也是如此，他们的原理和操作基本相同，区别在于StringBuffer支持并发操作，线性安全的，适 合多线程中使用。StringBuilder不支持并发操作，线性不安全的，不适合多线程中使用。新引入的StringBuilder类不是线程安全的，但其在单线程中的性能比StringBuffer高。</p>
<h3 id="StringBuffer常用方法"><a href="#StringBuffer常用方法" class="headerlink" title="StringBuffer常用方法"></a>StringBuffer常用方法</h3><p>（由于StringBuffer和StringBuilder在使用上几乎一样，所以只写一个，以下部分内容网络各处收集，不再标注出处）</p>
<p>StringBuffer s = new StringBuffer();<br>这样初始化出的StringBuffer对象是一个空的对象，</p>
<p>StringBuffer sb1=new StringBuffer(512);<br>分配了长度512字节的字符缓冲区。 </p>
<p>StringBuffer sb2=new StringBuffer(“how are you?”)</p>
<p>创建带有内容的StringBuffer对象，在字符缓冲区中存放字符串“how are you?”</p>
<h4 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h4><p>public StringBuffer append(boolean b)<br>该方法的作用是追加内容到当前StringBuffer对象的末尾，类似于字符串的连接，调用该方法以后，StringBuffer对象的内容也发生改 变，例如：<br>StringBuffer sb = new StringBuffer(“abc”);<br>sb.append(true);<br>则对象sb的值将变成”abctrue”</p>
<p>使用该方法进行字符串的连接，将比String更加节约内容，经常应用于数据库SQL语句的连接。</p>
<h4 id="deleteCharAt方法"><a href="#deleteCharAt方法" class="headerlink" title="deleteCharAt方法"></a>deleteCharAt方法</h4><p>public StringBuffer deleteCharAt(int index)<br>该方法的作用是删除指定位置的字符，然后将剩余的内容形成新的字符串。例如：<br>StringBuffer sb = new StringBuffer(“KMing”);<br>sb. deleteCharAt(1);<br>该代码的作用删除字符串对象sb中索引值为1的字符，也就是删除第二个字符，剩余的内容组成一个新的字符串。所以对象sb的值变 为”King”。<br>还存在一个功能类似的delete方法：<br>public StringBuffer delete(int start,int end)<br>该方法的作用是删除指定区间以内的所有字符，包含start，不包含end索引值的区间。例如：<br>StringBuffer sb = new StringBuffer(“TestString”);<br>sb. delete (1,4);<br>该代码的作用是删除索引值1(包括)到索引值4(不包括)之间的所有字符，剩余的字符形成新的字符串。则对象sb的值是”TString”。 </p>
<h4 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a>insert方法</h4><p>public StringBuffer insert(int offset, boolean b),<br>该方法的作用是在StringBuffer对象中插入内容，然后形成新的字符串。例如：<br>StringBuffer sb = new StringBuffer(“TestString”);<br>sb.insert(4,false);<br>该示例代码的作用是在对象sb的索引值4的位置插入false值，形成新的字符串，则执行以后对象sb的值是”TestfalseString”。 </p>
<h4 id="reverse方法"><a href="#reverse方法" class="headerlink" title="reverse方法"></a>reverse方法</h4><p>public StringBuffer reverse()<br>该方法的作用是将StringBuffer对象中的内容反转，然后形成新的字符串。例如：<br>StringBuffer sb = new StringBuffer(“abc”);<br>sb.reverse();<br>经过反转以后，对象sb中的内容将变为”cba”。 </p>
<h4 id="setCharAt方法"><a href="#setCharAt方法" class="headerlink" title="setCharAt方法"></a>setCharAt方法</h4><p>public void setCharAt(int index, char ch)该方法的作用是修改对象中索引值为index位置的字符为新的字符ch。例如：<br>StringBuffer sb = new StringBuffer(“abc”);<br>sb.setCharAt(1,’D’);<br>则对象sb的值将变成”aDc”。 </p>
<h4 id="trimToSize方法"><a href="#trimToSize方法" class="headerlink" title="trimToSize方法"></a>trimToSize方法</h4><p>public void trimToSize()<br>该方法的作用是将StringBuffer对象的中存储空间缩小到和字符串长度一样的长度，减少空间的浪费，和String的trim()是一样的作用，不在举例。</p>
<h4 id="length方法"><a href="#length方法" class="headerlink" title="length方法"></a>length方法</h4><p>该方法的作用是获取字符串长度 ，不用再说了吧。</p>
<h4 id="setlength方法"><a href="#setlength方法" class="headerlink" title="setlength方法"></a>setlength方法</h4><p>该方法的作用是设置字符串缓冲区大小。<br>StringBuffer sb=new StringBuffer();<br>sb.setlength(100);<br>如果用小于当前字符串长度的值调用setlength()方法，则新长度后面的字符将丢失。 </p>
<h4 id="sb-capacity方法"><a href="#sb-capacity方法" class="headerlink" title="sb.capacity方法"></a>sb.capacity方法</h4><p>该方法的作用是获取字符串的容量。<br>StringBuffer sb=new StringBuffer(“string”);<br>int i=sb.capacity(); </p>
<h4 id="ensureCapacity方法"><a href="#ensureCapacity方法" class="headerlink" title="ensureCapacity方法"></a>ensureCapacity方法</h4><p>该方法的作用是重新设置字符串容量的大小。<br>StringBuffer sb=new StringBuffer();<br>sb.ensureCapacity(32); //预先设置sb的容量为32 </p>
<h4 id="getChars方法"><a href="#getChars方法" class="headerlink" title="getChars方法"></a>getChars方法</h4><p>该方法的作用是将字符串的子字符串复制给数组。<br>getChars(int start,int end,char chars[],int charStart); </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;I love You&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//注意ch字符数组的长度一定要大于等于begin到end之间字符的长度</span></span><br><span class="line"><span class="comment">//小于的话会报ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">//如果大于的话，大于的字符会以空格补齐</span></span><br><span class="line"><span class="keyword">char</span>[] ch  = <span class="keyword">new</span> <span class="keyword">char</span>[end-begin];</span><br><span class="line">sb.getChars(begin, end, ch, <span class="number">0</span>);</span><br><span class="line">System.out.println(ch);</span><br></pre></td></tr></table></figure>

<p><code>结果：I lov</code></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习笔记(Learn Git  Branch)</title>
    <url>/2021/10/13/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(Learn%20Git%20%20Branch)/</url>
    <content><![CDATA[<p><strong>待更新</strong></p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><a href="https://learngitbranching.js.org/">官网</a></p>
<p>参考：<a href="http://www.jnnr.cn/news_show_806.html">http://www.jnnr.cn/news_show_806.html</a></p>
<p>通过该游戏来体验学习Git的各种命令，不仅可以很好的学习git的思想（可视化非常形象，和git bash那个黑框的感觉完全不一样）。</p>
<p>而且英文官网还可以进一步锻炼专业相关英文阅读能力，词汇也很简单。</p>
<p>十分推荐。</p>
<h2 id="一、基础篇（git主要命令）"><a href="#一、基础篇（git主要命令）" class="headerlink" title="一、基础篇（git主要命令）"></a>一、基础篇（git主要命令）</h2><h3 id="1-git-commit"><a href="#1-git-commit" class="headerlink" title="1. git commit"></a>1. git commit</h3><blockquote>
<p><strong>功能</strong>：将增量修改的内容进行提交<br><strong>示例</strong>：（解释：C0、C1是分开的两次提交记录，其中C0 是C1 父分支，即C1是基于C0增量修改提交的，MAIN意思是箭头指向的之处的分支线叫MAIN分支，其标指向的就是该分支最新的提交处，其中*号意思是你目前正在操作的分支，是一个标记。）<br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210430141208400.png" alt="在这里插入图片描述"><br><code>GIT COMMIT</code> 之后<br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210430141323569.png" alt="在这里插入图片描述"><br>此时增加C2提交记录，且是基于C1的，仍然是MAIN分支线上的延申。</p>
</blockquote>
<blockquote>
<p>游戏答案：<br><code>GIT COMMIT</code><br><code>GIT COMMIT</code></p>
</blockquote>
<h3 id="2-git-branch-分支名-git-checkout-分支名"><a href="#2-git-branch-分支名-git-checkout-分支名" class="headerlink" title="2. git branch 分支名 | git checkout 分支名"></a>2. git branch 分支名 | git checkout 分支名</h3><blockquote>
<p><strong>- GIT BRANCH 分支名 -</strong><br><strong>功能</strong> ：即在现在的分支线上开辟另一个分支（有点像开一个分叉树枝的芽），在该节点之前的内容都是相同的，之后提交的内容就只能在一个分支上延申。<br><strong>示例</strong>：<br><img src="https://img-blog.csdnimg.cn/20210430164519324.png" alt="在这里插入图片描述"><br><code>GIT BRANCH NEWIMAGE</code><br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210430164716276.png" alt="在这里插入图片描述"><br>（解释：我们可以看到现在多了一个NEWIMAGE分支，但是因为我们只是新建分支，也就是多了一个芽而没有树干，所以两个分支都在C1处。<br>此时如果我们输入<br><code>GIT COMMIT</code><br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210430165038889.png" alt="在这里插入图片描述"><br>MAIN分支往前一步，当前分支还是MAIN，NEWIMAGE还是在C1处</p>
</blockquote>
<blockquote>
<p><strong>- GIT CHECKOUT 分支名 -</strong><br><strong>功能</strong> ：切换当前操作的分支到特定分支名。<br><strong>示例</strong>：（当前是MAIN分支）<br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210430170339533.png" alt="在这里插入图片描述"><br><code>GIT CHECKOUT NEWIMAGE</code><br><code>GIT COMMIT</code><br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/2021043017045152.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>最后其实还有个快捷键：<strong>GIT CHECKOUT -B 分支名</strong> 实现创建分支的同时切换该分支为当前操作分支</p>
</blockquote>
<blockquote>
<p>游戏答案：<br><code>GIT CHECKOUT -B BUGFIX</code></p>
</blockquote>
<h3 id="3-git-merge-分支名-git-rebasse-分支名"><a href="#3-git-merge-分支名-git-rebasse-分支名" class="headerlink" title="3. git merge 分支名 | git rebasse 分支名"></a>3. git merge 分支名 | git rebasse 分支名</h3><blockquote>
<p><strong>- GIT MERGE 分支名 -</strong><br><strong>功能</strong>：将当前分支和另一个指定分支合并,可能会产生新的结点，也可能不会，看下面示例。<br><strong>示例</strong>：<br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502002301797.png" alt="在这里插入图片描述"><br><code>GIT MERGE BUGFIX</code><br><img src="https://img-blog.csdnimg.cn/20210502002417659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNTM4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>GIT CHECKOUT BUGFIX</code><br><code>GIT MERGE MAIN</code><br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502002821276.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>GIT MERGE游戏答案：<br><code>GIT CHECKOUT -B BUGFIX</code><br><code>GIT COMMIT</code><br><code>GIT CHECKOUT MAIN</code><br><code>GIT COMMIT</code><br><code>GIT MERGE BUGFIX</code></p>
</blockquote>
<blockquote>
<p><strong>GIT REBASE 分支名</strong><br><strong>作用</strong>：即将当前的分支合并到另一分支，但是合并的方式不是多一个结点，而是将当前分支的所有多出来的修改全部加到另一个分支，这时整体上看只有一条线性发展。而不是分开同步运行后合并的视角，而是将并行转化成前后的同步关系<br><strong>示例</strong>：<br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502003838644.png" alt="在这里插入图片描述"><br><code>GIT REBASE MAIN</code><br><img src="https://img-blog.csdnimg.cn/20210502004018158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNTM4Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>GIT CHECKOUT MAIN</code><br><code>GIT REBASE BUGFIX</code><br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502004138102.png" alt="在这里插入图片描述"></p>
</blockquote>
<h2 id="二、高级篇"><a href="#二、高级篇" class="headerlink" title="二、高级篇"></a>二、高级篇</h2><h3 id="1-分离HEAD（git-checkout-记录结点名）"><a href="#1-分离HEAD（git-checkout-记录结点名）" class="headerlink" title="1. 分离HEAD（git checkout 记录结点名）"></a>1. 分离HEAD（git checkout 记录结点名）</h3><blockquote>
<p>作用：分离HEAD，就是我们可以操作的当前位置不再是对分支而是可以对某次记录也就是结点。<br>解释：HEAD默认就是指向分支名的，即我们看到的*指向的分支，当我们分支COMMIT后，我们HEAD会往前走，分支便也会自动往前走，而如果我们指向具体历史记录COMMIT后，HEAD往前走，分支原地不动，这就是分离HEAD脱离了分支。<br>即原本 HEAD-&gt;MAIN分支-&gt;C1结点 变成 HEAD-&gt;C1 这就是分离<br>示例：<br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502021601952.png" alt="在这里插入图片描述"><br><code>GIT CHECKOUT MAIN</code><br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502021635428.png" alt="在这里插入图片描述"><br>没有变化，因为HEAD-&gt;BUGFIX-&gt;C4，即使GIT COMMIT两者同步向前<br><code>GIT CHECKOUT C4</code><br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502021821396.png" alt="在这里插入图片描述"><br>HEAD-&gt;C4 分离开来<br><code>GIT COMMIT</code><br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502021901308.png" alt="在这里插入图片描述"><br>HEAD会往前走，但分支不会动</p>
</blockquote>
<h3 id="2-相对引用（git-checkout-分支名-git-checkout-分支名-num）"><a href="#2-相对引用（git-checkout-分支名-git-checkout-分支名-num）" class="headerlink" title="2. 相对引用（git checkout 分支名^ | git checkout 分支名~num）"></a>2. 相对引用（git checkout 分支名^ | git checkout 分支名~num）</h3><blockquote>
<p><strong>作用</strong>：分离HEAD的时候可以通过当前分支相对的移动，这样我们可以不用记住某结点哈希值（可以通过GIT LOG查看）。这里说一说结点哈希值是什么，我们会发现我们之前分支名都是C1之类的，其实C1只是这个结点哈希值的头两个值，但因为具有区分唯一性，所以我们可以只打开头两个字符，全名可能是：C4D2DA64C0EFC5293610BDD892F82A58E8CBC5D8。所以相对引用就是HEAD的设置不根据哈希值来确定，可以通过相对位置确定。因为分支名字相对于结点名字更加的容易记住和使用。<br><strong>示例：</strong><br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502170848565.png" alt="在这里插入图片描述"><br><code>GIT CHECKOUT MAIN^</code><br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502170931538.png" alt="在这里插入图片描述"><br>第二个例子：<br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502171007451.png" alt="在这里插入图片描述"><br><code>GIT CHECKOUT C3</code><br><code>GIT CHECKOUT HEAD^</code><br><code>GIT CHECKOUT HEAD^</code><br><code>GIT CHECKOUT HEAD^</code><br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/2021050217113472.png" alt="在这里插入图片描述"><br>第三个示例：<br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502171906390.png" alt="在这里插入图片描述"><br><code>GIT CHECKOUT HEAD~4</code><br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502171943381.png" alt="在这里插入图片描述"><br>第四个示例：<br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502172218585.png" alt="在这里插入图片描述"><br><code>GIT BRANCH -F MAIN HEAD~3</code><br>相对引用为我们提供了一种简洁的引用提交记录 C1 的方式， 而 -F 则容许我们将分支强制移动到那个位置。<br><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/20210502172512903.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>第一个游戏答案：<br><code>GTI CHECKOUT BUGFIX^</code><br>第二个游戏答案：<br><code>GIT CHECKOUT HEAD^</code><br><code>GIT BRANCH -F MAIN C6</code><br><code>GIT BRANCH -F BUGFIX HEAD^</code></p>
</blockquote>
<p>第二个游戏：</p>
<p>题目：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211009223958622.png" alt="image-20211009223958622"></p>
<p>Goal：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211009224016584.png" alt="image-20211009224016584"></p>
<ul>
<li>首先移动HEAD </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout HEAD^</span><br></pre></td></tr></table></figure>

<ul>
<li>然后转移分支main</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -f main C6</span><br></pre></td></tr></table></figure>

<ul>
<li>最后移动分支bugFix</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -f bugFix HEAD^</span><br><span class="line">或者</span><br><span class="line">git branch -f bugFix HEAD~1</span><br><span class="line">或者</span><br><span class="line">git branch -f bugFix C0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2021/10/10/MySQL/</url>
    <content><![CDATA[<h2 id="0-公众号笔记"><a href="#0-公众号笔记" class="headerlink" title="0.公众号笔记"></a>0.公众号笔记</h2><p><a href="https://www.bilibili.com/video/BV1NJ411J79W">B站视频地址</a></p>
<p><a href="https://mp.weixin.qq.com/s/E1PM4EHwU6Joot4OG0gDjw">1初识MySQL</a><br><a href="https://mp.weixin.qq.com/s/a4jA3B2j4KXBH7rci4C46w">2数据库操作</a><br><a href="https://mp.weixin.qq.com/s/F3fPma7y8tp-fF-jh-70Yw">3DML语言</a><br><a href="https://mp.weixin.qq.com/s/0UnSJDRpdcMbPrSpfl6fSA">4使用DQL查询数据</a><br><a href="https://mp.weixin.qq.com/s/NYSJSrJtmEEXS_n94X9QZQ">5MySQL函数</a><br><a href="https://mp.weixin.qq.com/s/-_-fRKNOi5rI6tb8RINZ0Q">6事务和索引</a><br><a href="https://mp.weixin.qq.com/s/dCt_v5KQCTpgBdlY__0BSA">7权限及如何设计数据库</a></p>
<h2 id="1-初始知识"><a href="#1-初始知识" class="headerlink" title="1.初始知识"></a>1.初始知识</h2><p><strong>数据库总览 :</strong></p>
<ul>
<li><p>关系型数据库 ( SQL )</p>
</li>
<li><ul>
<li>MySQL , Oracle , SQL Server , SQLite , DB2 , …</li>
<li>关系型数据库通过<strong>外键关联</strong>来建立表与表之间的关系</li>
</ul>
</li>
<li><p>非关系型数据库 ( NOSQL )</p>
</li>
<li><ul>
<li>Redis , MongoDB , …</li>
<li>非关系型数据库通常指数据<strong>以对象的形式存储</strong>在数据库中，而对象之间的关系通过每个对象自身的属性来决定</li>
</ul>
</li>
</ul>
<p><strong>MySQL应该算是一个数据库管理系统.</strong></p>
<ol>
<li></li>
</ol>
<p>连接数据库语句 : <strong>mysql -h 服务器主机地址 -u 用户名 -p 用户密码</strong></p>
<p>注意 : -p后面不能加空格,否则会被当做密码的内容,导致登录失败 !</p>
<ol start="2">
<li></li>
</ol>
<p><strong>几个基本的数据库操作命令 :</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> password<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>)<span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>; 修改密码</span><br><span class="line">flush privileges; 刷新数据库</span><br><span class="line"><span class="keyword">show</span> databases; 显示所有数据库</span><br><span class="line">use dbname；打开某个数据库</span><br><span class="line"><span class="keyword">show</span> tables; 显示数据库mysql中所有的表</span><br><span class="line"><span class="keyword">describe</span> <span class="keyword">user</span>; 显示表mysql数据库中<span class="keyword">user</span>表的列信息</span><br><span class="line"><span class="keyword">create</span> database name; 创建数据库</span><br><span class="line">use databasename; 选择数据库</span><br><span class="line"></span><br><span class="line">exit; 退出Mysql</span><br><span class="line">? 命令关键词 : 寻求帮助</span><br><span class="line"><span class="comment">-- 表示注释</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>结构化查询语句分类：</li>
</ol>
<table>
<thead>
<tr>
<th>名称</th>
<th>解释</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>DDL（数据定义语言）</td>
<td>定义和管理数据对象，如数据库，数据表</td>
<td>CREATE、DROP、ALTER</td>
</tr>
<tr>
<td>DML  (数据操作语言)</td>
<td>用于操作数据库对象中所包含的数据</td>
<td>INSERT、UPDATE、DELETE</td>
</tr>
<tr>
<td>DQL（数据查询语言）</td>
<td>用于查询数据库数据</td>
<td>SELECT</td>
</tr>
<tr>
<td>DCL（数据控制语言）</td>
<td>用于管理数据库的语言，包括管理权限及数据更改</td>
<td><strong>GRANT、commit、rollback</strong></td>
</tr>
</tbody></table>
<h2 id="2-数据库操作"><a href="#2-数据库操作" class="headerlink" title="2.数据库操作"></a>2.数据库操作</h2><blockquote>
<p>命令行操作数据库</p>
</blockquote>
<p>创建数据库 :  create database [if not exists] 数据库名;</p>
<p>删除数据库 : drop database [if exists] 数据库名;</p>
<p>查看数据库 : show databases;</p>
<p>使用数据库 : use 数据库名;</p>
<h3 id="2-1-创建数据表"><a href="#2-1-创建数据表" class="headerlink" title="2.1 创建数据表"></a>2.1 创建数据表</h3><p>属于DDL的一种，语法 :</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [if <span class="keyword">not</span> <span class="keyword">exists</span>] `表名`(</span><br><span class="line">   <span class="string">&#x27;字段名1&#x27;</span> 列类型 [属性][索引][注释],</span><br><span class="line">   <span class="string">&#x27;字段名2&#x27;</span> 列类型 [属性][索引][注释],</span><br><span class="line">  #...</span><br><span class="line">   <span class="string">&#x27;字段名n&#x27;</span> 列类型 [属性][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure>

<p><strong>说明 :</strong> 反引号用于区别MySQL保留字与普通字符而引入的 <strong>(键盘esc下面的键).</strong></p>
<h3 id="2-2-数据值和列类型"><a href="#2-2-数据值和列类型" class="headerlink" title="2.2 数据值和列类型"></a>2.2 数据值和列类型</h3><p>列类型 : 规定数据库中该列存放的数据类型</p>
<blockquote>
<p>数值类型</p>
</blockquote>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109155407451.png" alt="image-20211109155407451"></p>
<blockquote>
<p>字符串类型</p>
</blockquote>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109155433578.png" alt="image-20211109155433578"></p>
<blockquote>
<p>日期和时间型数值类型</p>
</blockquote>
<p> <img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109155449199.png" alt="image-20211109155449199"></p>
<blockquote>
<p>NULL值</p>
</blockquote>
<ul>
<li>理解为 “没有值” 或 “未知值”</li>
<li>不要用NULL进行算术运算 , 结果仍为NULL</li>
</ul>
<h3 id="2-3-数据库字段属性（重点）"><a href="#2-3-数据库字段属性（重点）" class="headerlink" title="2.3 数据库字段属性（重点）"></a>2.3 数据库字段属性（重点）</h3><p><strong>UnSigned</strong></p>
<ul>
<li>无符号的</li>
<li>声明该数据列不允许负数 </li>
</ul>
<p><strong>ZEROFILL</strong></p>
<ul>
<li>0填充的</li>
<li>不足位数的用0来填充 , 如int(3),5则为005</li>
</ul>
<p><strong>Auto_InCrement</strong></p>
<ul>
<li><p>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</p>
</li>
<li><p>通常用于设置<strong>主键</strong> , 且为整数类型</p>
</li>
<li><p>可定义起始值和步长</p>
</li>
<li><ul>
<li>当前表设置步长(AUTO_INCREMENT=100) : 只影响当前表</li>
<li>SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</li>
</ul>
</li>
</ul>
<p><strong>NULL 和 NOT NULL</strong></p>
<ul>
<li>默认为NULL , 即没有插入该列的数值</li>
<li>如果设置为NOT NULL , 则该列必须有值</li>
</ul>
<p><strong>DEFAULT</strong></p>
<ul>
<li>默认的</li>
<li>用于设置默认值</li>
<li>例如,性别字段,默认为”男” , 否则为 “女” ; 若无指定该列的值 , 则默认值为”男”的值</li>
</ul>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 目标 : 创建一个school数据库</span></span><br><span class="line"><span class="comment">-- 创建学生表(列,字段)</span></span><br><span class="line"><span class="comment">-- 学号int 登录密码varchar(20) 姓名,性别varchar(2),出生日期(datatime),家庭住址,email</span></span><br><span class="line"><span class="comment">-- 创建表之前 , 一定要先选择数据库</span></span><br><span class="line"><span class="comment">-- 格式  &#x27;字段名&#x27; 列类型 [属性][索引][注释],</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">varchar</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">`address` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">`email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据库的定义</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE school;</span><br><span class="line"><span class="comment">-- 查看数据表的定义</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student;</span><br><span class="line"><span class="comment">-- 显示表结构</span></span><br><span class="line"><span class="keyword">DESC</span> student;  <span class="comment">-- 设置严格检查模式(不能容错了)</span></span><br><span class="line"><span class="keyword">SET</span> sql_mode<span class="operator">=</span><span class="string">&#x27;STRICT_TRANS_TABLES&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-数据表的类型"><a href="#2-4-数据表的类型" class="headerlink" title="2.4 数据表的类型"></a>2.4 数据表的类型</h3><blockquote>
<p>设置数据表的类型</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">   <span class="comment">-- 省略一些代码</span></span><br><span class="line">   <span class="comment">-- Mysql注释</span></span><br><span class="line">   <span class="comment">-- 1. # 单行注释</span></span><br><span class="line">   <span class="comment">-- 2. /*...*/ 多行注释</span></span><br><span class="line">)ENGINE <span class="operator">=</span> MyISAM (<span class="keyword">or</span> InnoDB)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看mysql所支持的引擎类型 (表类型)</span></span><br><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br></pre></td></tr></table></figure>

<p>MySQL的数据表的类型 : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV等…</p>
<p>常见的 MyISAM 与 InnoDB 类型：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109155507921.png" alt="image-20211109155507921"></p>
<p>经验 ( 适用场合 )  :</p>
<ul>
<li>适用 MyISAM : 节约空间及相应速度</li>
<li><strong>适用 InnoDB : 安全性 , 事务处理及多用户操作数据表</strong></li>
</ul>
<blockquote>
<p>数据表的存储位置</p>
</blockquote>
<ul>
<li><p>MySQL数据表以文件方式存放在磁盘中</p>
</li>
<li><ul>
<li>包括表文件 , 数据文件 , 以及数据库的选项文件</li>
<li>位置 : Mysql安装目录\data\下存放数据表 . 目录名对应数据库名 , 该目录下文件名对应数据表. </li>
</ul>
</li>
<li><p>注意 :</p>
</li>
<li><ul>
<li><p>* . frm – 表结构定义文件</p>
</li>
<li><p>* . MYD – 数据文件 ( data )</p>
</li>
<li><p>* . MYI – 索引文件 ( index )</p>
</li>
<li><p>InnoDB类型数据表只有一个 *.frm文件 , 以及上一级目录的ibdata1文件</p>
</li>
<li><p>MyISAM类型数据表对应三个文件 :</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109155522253.png" alt="image-20211109155522253"></p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>设置数据表字符集</p>
</blockquote>
<p>我们可为数据库,数据表,数据列设定不同的字符集，设定方法 :</p>
<ul>
<li>创建时通过命令来设置 , 如 : CREATE TABLE 表名()CHARSET = utf8;</li>
<li>如无设定 , 则根据MySQL数据库配置文件 my.ini 中的参数设定</li>
</ul>
<h3 id="2-5-修改数据库"><a href="#2-5-修改数据库" class="headerlink" title="2.5 修改数据库"></a>2.5 修改数据库</h3><blockquote>
<p>修改表 ( ALTER TABLE )</p>
</blockquote>
<p>修改表名 :ALTER TABLE 旧表名 RENAME AS 新表名</p>
<p>添加字段 : ALTER TABLE 表名 ADD字段名 列属性[属性]</p>
<p>修改字段 :</p>
<ul>
<li>ALTER TABLE 表名 MODIFY 字段名 列类型[属性]</li>
<li>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性[属性]</li>
</ul>
<p>删除字段 :  ALTER TABLE 表名 DROP 字段名</p>
<blockquote>
<p>删除数据表</p>
</blockquote>
<p>语法：DROP TABLE [IF EXISTS] 表名</p>
<ul>
<li>IF EXISTS为可选 , 判断是否存在该数据表</li>
<li>如删除不存在的数据表会抛出错误</li>
</ul>
<blockquote>
<p>其他</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 每个库目录存在一个保存当前数据库的选项文件db.opt。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 注释：</span><br><span class="line">  单行注释 # 注释内容</span><br><span class="line">  多行注释 <span class="comment">/* 注释内容 */</span></span><br><span class="line">  单行注释 <span class="comment">-- 注释内容       (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span></span><br><span class="line">   </span><br><span class="line"><span class="number">4.</span> 模式通配符：</span><br><span class="line">  _   任意单个字符</span><br><span class="line">  <span class="operator">%</span>   任意多个字符，甚至包括零字符</span><br><span class="line">  单引号需要进行转义 \<span class="string">&#x27;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\G&quot;, &quot;\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6. SQL对大小写不敏感 （关键字）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7. 清除已有语句：\c</span></span><br></pre></td></tr></table></figure>

<h2 id="3-MySQL数据管理"><a href="#3-MySQL数据管理" class="headerlink" title="3.MySQL数据管理"></a>3.MySQL数据管理</h2><h3 id="3-1外键（了解）"><a href="#3-1外键（了解）" class="headerlink" title="3.1外键（了解）"></a>3.1外键（了解）</h3><blockquote>
<p>外键概念</p>
</blockquote>
<p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为<strong>主表</strong>，具有此外键的表被称为主表的<strong>从表</strong>。</p>
<p>在实际操作中，将一个表的值放入第二个表来表示关联，所使用的值是第一个表的主键值(在必要时可包括复合主键值)。此时，第二个表中保存这些值的属性称为外键(<strong>foreign key</strong>)。</p>
<p><strong>外键作用</strong></p>
<p>保持数据<strong>一致性</strong>，<strong>完整性</strong>，主要目的是控制存储在外键表中的数据,<strong>约束</strong>。使两张表形成关联，外键只能引用外表中的列的值或使用空值。</p>
<blockquote>
<p>创建外键</p>
</blockquote>
<p>建表时指定外键约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建外键的方式一 : 创建子表同时创建外键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 年级表 (id\年级名称)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade` (</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级ID&#x27;</span>,</span><br><span class="line">`gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`gradeid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生信息表 (学号,姓名,性别,年级,手机,地址,出生日期,邮箱,身份证号)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">`studentno` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`studentname` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`sex` TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级&#x27;</span>,</span><br><span class="line">`phoneNum` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">`borndate` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">`idCard` <span class="type">VARCHAR</span>(<span class="number">18</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`studentno`),</span><br><span class="line">KEY `FK_gradeid` (`gradeid`),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) <span class="keyword">REFERENCES</span> `grade` (`gradeid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>

<p>建表后修改:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建外键方式二 : 创建子表完毕后,修改子表添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) <span class="keyword">REFERENCES</span> `grade` (`gradeid`);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>删除外键</p>
</blockquote>
<p>操作：删除 grade 表，发现报错</p>
<p><strong>注意</strong> : 删除具有主外键关系的表时 , 要先删子表 , 后删主表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY FK_gradeid;</span><br><span class="line"><span class="comment">-- 发现执行完上面的,索引还在,所以还要删除索引</span></span><br><span class="line"><span class="comment">-- 注:这个索引是建立外键的时候默认生成的</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> INDEX FK_gradeid;</span><br></pre></td></tr></table></figure>

<p>实际上并不会使用如上所述的物理外键（即数据库层面的操作），数据库之间建立关联既复杂又低效，应该只有行和列，行为数据，列为字段</p>
<p>所以实际开发中外键关联使用程序实现！</p>
<h3 id="3-2DML语言（全部记住）"><a href="#3-2DML语言（全部记住）" class="headerlink" title="3.2DML语言（全部记住）"></a>3.2DML语言（全部记住）</h3><p><strong>数据库意义</strong> ： 数据存储、数据管理</p>
<p><strong>管理数据库数据方法：</strong></p>
<ul>
<li>通过SQLyog等管理工具管理数据库数据</li>
<li>通过<strong>DML语句</strong>管理数据库数据</li>
</ul>
<p><strong>DML语言</strong>  ：数据操作语言</p>
<ul>
<li><p>用于操作数据库对象中所包含的数据</p>
</li>
<li><p>包括 :</p>
</li>
<li><ul>
<li>INSERT (添加数据语句)</li>
<li>UPDATE (更新数据语句)</li>
<li>DELETE (删除数据语句)</li>
</ul>
</li>
</ul>
<h4 id="3-2-1添加数据"><a href="#3-2-1添加数据" class="headerlink" title="3.2.1添加数据"></a>3.2.1添加数据</h4><blockquote>
<p>INSERT命令</p>
</blockquote>
<p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名[(字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>,...)] <span class="keyword">VALUES</span>(<span class="string">&#x27;值1&#x27;</span>),(<span class="string">&#x27;值2&#x27;</span>),(<span class="string">&#x27;值3&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意 :</strong> </p>
<ul>
<li>字段或值之间用英文逗号隔开 .</li>
<li>‘ 字段1,字段2…’ 该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致 .</li>
<li>可同时插入多条数据 , values 后用英文逗号隔开 .</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用语句如何增加语句?</span></span><br><span class="line"><span class="comment">-- 语法 : INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES(&#x27;值1&#x27;),(&#x27;值2&#x27;),(&#x27;值3&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade(gradename) <span class="keyword">VALUES</span> (<span class="string">&#x27;大一&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键自增,那能否省略呢?</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade <span class="keyword">VALUES</span> (<span class="string">&#x27;大二&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询:INSERT INTO grade VALUE (&#x27;大二&#x27;)错误代码：1136</span></span><br><span class="line"><span class="keyword">Column</span> count doesn`t <span class="keyword">match</span> <span class="keyword">value</span> count <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 结论:&#x27;字段1,字段2...&#x27;该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一次插入多条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade(gradename) <span class="keyword">VALUES</span> (<span class="string">&#x27;大三&#x27;</span>),(<span class="string">&#x27;大四&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="3-2-2修改数据"><a href="#3-2-2修改数据" class="headerlink" title="3.2.2修改数据"></a>3.2.2修改数据</h4><blockquote>
<p>update命令</p>
</blockquote>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE 表名 <span class="keyword">SET</span> column_name<span class="operator">=</span><span class="keyword">value</span> [,column_name2<span class="operator">=</span>value2,...] [<span class="keyword">WHERE</span> <span class="keyword">condition</span>];</span><br></pre></td></tr></table></figure>

<p><strong>注意 :</strong> </p>
<ul>
<li>column_name 为要更改的<strong>数据列</strong></li>
<li>value 为修改后的数据 , 可以为变量 , 具体值 , 表达式或者嵌套的SELECT结果</li>
<li>condition 为筛选条件 , 如不指定则修改该表的所有列数据</li>
</ul>
<blockquote>
<p>where条件子句</p>
</blockquote>
<p>可以简单的理解为 : 有条件地从表中筛选数据</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109155603797.png" alt="image-20211109155603797">测试：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改年级信息</span></span><br><span class="line">UPDATE grade <span class="keyword">SET</span> gradename <span class="operator">=</span> <span class="string">&#x27;高中&#x27;</span> <span class="keyword">WHERE</span> gradeid <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-3删除数据"><a href="#3-2-3删除数据" class="headerlink" title="3.2.3删除数据"></a>3.2.3删除数据</h4><blockquote>
<p>DELETE命令</p>
</blockquote>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> <span class="keyword">condition</span>];</span><br></pre></td></tr></table></figure>

<p>注意：condition为筛选条件 , 如不指定则删除该表的所有列数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除最后一个数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> grade <span class="keyword">WHERE</span> gradeid <span class="operator">=</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>TRUNCATE命令</p>
</blockquote>
<p>作用：用于完全清空表数据 , 但表结构 , 索引 , 约束等不变 ;</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 清空年级表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> grade</span><br></pre></td></tr></table></figure>

<p><strong>注意：区别于DELETE命令</strong></p>
<ul>
<li><p>相同 : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p>
</li>
<li><p>不同 :</p>
</li>
<li><ul>
<li>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器</li>
<li>使用TRUNCATE TABLE不会对事务有影响 （事务后面会说）</li>
</ul>
</li>
</ul>
<p>测试：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`coll` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入几个测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test(coll) <span class="keyword">VALUES</span>(<span class="string">&#x27;row1&#x27;</span>),(<span class="string">&#x27;row2&#x27;</span>),(<span class="string">&#x27;row3&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表数据(不带where条件的delete)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> test;</span><br><span class="line"><span class="comment">-- 结论:如不指定Where则删除该表的所有列数据,自增当前值依然从原来基础上进行,会记录日志.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表数据(truncate)</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> test;</span><br><span class="line"><span class="comment">-- 结论:truncate删除数据,自增当前值会恢复到初始值重新开始;不会记录日志.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 同样使用DELETE清空不同引擎的数据库表数据.重启数据库服务后</span></span><br><span class="line"><span class="comment">-- InnoDB : 自增列从初始值重新开始 (因为是存储在内存中,断电即失)</span></span><br><span class="line"><span class="comment">-- MyISAM : 自增列依然从上一个自增数据基础上开始 (存在文件中,不会丢失)</span></span><br></pre></td></tr></table></figure>



<h2 id="4-DQL查询数据（最重点）"><a href="#4-DQL查询数据（最重点）" class="headerlink" title="4.DQL查询数据（最重点）"></a>4.DQL查询数据（最重点）</h2><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p>
<ul>
<li>查询数据库数据 , 如<strong>SELECT</strong>语句</li>
<li>简单的单表查询或多表的复杂查询和嵌套查询</li>
<li>是数据库语言中最核心,最重要的语句</li>
<li>使用频率最高的语句</li>
</ul>
<h3 id="4-1SELECT语法"><a href="#4-1SELECT语法" class="headerlink" title="4.1SELECT语法"></a>4.1SELECT语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line">&#123;<span class="operator">*</span> <span class="operator">|</span> table.<span class="operator">*</span> <span class="operator">|</span> [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">  [<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2]  <span class="comment">-- 联合查询</span></span><br><span class="line">  [<span class="keyword">WHERE</span> ...]  <span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">  [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定结果按照哪几个字段来分组</span></span><br><span class="line">  [<span class="keyword">HAVING</span>]  <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">  [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">  [LIMIT &#123;[<span class="keyword">offset</span>,]row_count <span class="operator">|</span> row_countOFFSET <span class="keyword">offset</span>&#125;];</span><br><span class="line">   <span class="comment">-- 指定查询的记录从哪条至哪条</span></span><br></pre></td></tr></table></figure>

<p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p>
<h3 id="4-2指定查询字段"><a href="#4-2指定查询字段" class="headerlink" title="4.2指定查询字段"></a>4.2指定查询字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询表中所有的数据列结果 , 采用 **&quot; \* &quot;** 符号; 但是效率低，不推荐 .</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定列(学号 , 姓名)</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>AS 子句作为别名</p>
</blockquote>
<p>作用：</p>
<ul>
<li>可给数据列取一个新别名</li>
<li>可给表取一个新别名</li>
<li>可把经计算或总结的结果用另一个新名称来代替</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 这里是为列取别名(当然as关键词可以省略)</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno <span class="keyword">AS</span> 学号,studentname <span class="keyword">AS</span> 姓名 <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用as也可以为表取别名</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno <span class="keyword">AS</span> 学号,studentname <span class="keyword">AS</span> 姓名 <span class="keyword">FROM</span> student <span class="keyword">AS</span> s;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用as,为查询结果取一个新名字</span></span><br><span class="line"><span class="comment">-- CONCAT()函数拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名:&#x27;</span>,studentname) <span class="keyword">AS</span> 新姓名 <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>



<p><strong>去重：</strong></p>
<blockquote>
<p>DISTINCT关键字的使用</p>
</blockquote>
<p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- # 查看哪些同学参加了考试(学号) 去除重复项</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">result</span>; <span class="comment">-- 查看考试成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno <span class="keyword">FROM</span> <span class="keyword">result</span>; <span class="comment">-- 查看哪些同学参加了考试</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> studentno <span class="keyword">FROM</span> <span class="keyword">result</span>; <span class="comment">-- 了解:DISTINCT 去除重复项 , (默认是ALL)</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>使用表达式的列</p>
</blockquote>
<p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p>
<p>应用场景 :</p>
<ul>
<li><p>SELECT语句返回结果列中使用</p>
</li>
<li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p>
</li>
<li><p>DML语句中的 where 条件语句中使用表达式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- selcet查询中可以使用表达式</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@auto</span>_increment_increment; <span class="comment">-- 查询自增步长</span></span><br><span class="line"><span class="keyword">SELECT</span> VERSION(); <span class="comment">-- 查询版本号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">3</span><span class="number">-1</span> <span class="keyword">AS</span> 计算结果; <span class="comment">-- 表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学员考试成绩集体提分一分查看</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,StudentResult<span class="operator">+</span><span class="number">1</span> <span class="keyword">AS</span> <span class="string">&#x27;提分后&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p>
</li>
</ul>
<h3 id="4-3where条件语句"><a href="#4-3where条件语句" class="headerlink" title="4.3where条件语句"></a>4.3where条件语句</h3><p>作用：用于检索数据表中 <strong>符合条件</strong> 的记录</p>
<p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p>
<blockquote>
<p>逻辑操作符</p>
</blockquote>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109155625930.png" alt="image-20211109155625930"></p>
<p>测试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 满足条件的查询(where)</span></span><br><span class="line"><span class="keyword">SELECT</span> Studentno,StudentResult <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询考试成绩在95-100之间的</span></span><br><span class="line"><span class="keyword">SELECT</span> Studentno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentResult<span class="operator">&gt;=</span><span class="number">95</span> <span class="keyword">AND</span> StudentResult<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- AND也可以写成 &amp;&amp;</span></span><br><span class="line"><span class="keyword">SELECT</span> Studentno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentResult<span class="operator">&gt;=</span><span class="number">95</span> <span class="operator">&amp;&amp;</span> StudentResult<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询(对应的词:精确查询)</span></span><br><span class="line"><span class="keyword">SELECT</span> Studentno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentResult <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了1000号同学,要其他同学的成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentno<span class="operator">!=</span><span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用NOT</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> studentno<span class="operator">=</span><span class="number">1000</span>;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>模糊查询 ：比较操作符</p>
</blockquote>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109155639499.png" alt="image-20211109155639499"></p>
<p>注意：</p>
<ul>
<li>数值数据类型的记录之间才能进行算术运算 ;</li>
<li>相同数据类型的数据之间才能进行比较 ;</li>
</ul>
<p>测试：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 模糊查询 between and \ like \ in \ null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- LIKE</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- 查询姓刘的同学的学号及姓名</span></span><br><span class="line"><span class="comment">-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学,后面只有一个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;刘_&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学,后面只有两个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;刘__&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名中含有 嘉 字的</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;%嘉%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名中含有特殊字符的需要使用转义符号 &#x27;\&#x27;</span></span><br><span class="line"><span class="comment">-- 自定义转义符关键字: ESCAPE &#x27;:&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- IN</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- 查询学号为1000,1001,1002的学生姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentno <span class="keyword">IN</span> (<span class="number">1000</span>,<span class="number">1001</span>,<span class="number">1002</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询地址在北京,南京,河南洛阳的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname,address <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> address <span class="keyword">IN</span> (<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;南京&#x27;</span>,<span class="string">&#x27;河南洛阳&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- NULL 空</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- 查询出生日期没有填写的同学</span></span><br><span class="line"><span class="comment">-- 不能直接写=NULL , 这是代表错误的 , 用 is null</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> BornDate <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询出生日期填写的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> BornDate <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询没有写家庭住址的同学(空字符串不等于null)</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> Address<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> Address <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>



<h3 id="4-4连接查询-重点"><a href="#4-4连接查询-重点" class="headerlink" title="4.4连接查询(重点)"></a>4.4连接查询(重点)</h3><blockquote>
<p>JOIN 对比</p>
</blockquote>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109155652975.png" alt="image-20211109155652975"></p>
<p>七种Join：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/640" alt="Image"></p>
<p>测试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">连接查询</span></span><br><span class="line"><span class="comment">   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询</span></span><br><span class="line"><span class="comment">内连接 inner join</span></span><br><span class="line"><span class="comment">   查询两个表中的结果集中的交集</span></span><br><span class="line"><span class="comment">外连接 outer join</span></span><br><span class="line"><span class="comment">   左外连接 left join</span></span><br><span class="line"><span class="comment">       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)</span></span><br><span class="line"><span class="comment">   右外连接 right join</span></span><br><span class="line"><span class="comment">       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)</span></span><br><span class="line"><span class="comment">       </span></span><br><span class="line"><span class="comment">等值连接和非等值连接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">自连接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*思路:</span></span><br><span class="line"><span class="comment">(1):分析需求,确定查询的列来源于两个类,student result,连接查询</span></span><br><span class="line"><span class="comment">(2):确定使用哪种连接查询?(内连接)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 右连接(也可实现)</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等值连接</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s , <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">WHERE</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 左连接 (查询了所有同学,不考试的也会查出来)</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查一下缺考的同学(左连接应用场景)</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"><span class="keyword">WHERE</span> StudentResult <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> sub.subjectno <span class="operator">=</span> r.subjectno</span><br></pre></td></tr></table></figure>



<blockquote>
<p>自连接</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">自连接</span></span><br><span class="line"><span class="comment">   数据表与自身进行连接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中</span></span><br><span class="line"><span class="comment">    查询父栏目名称和其他子栏目名称</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `category` (</span><br><span class="line">`categoryid` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主题id&#x27;</span>,</span><br><span class="line">`pid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父id&#x27;</span>,</span><br><span class="line">`categoryName` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主题名字&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`categoryid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">9</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `category` (`categoryid`, `pid`, `categoryName`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;信息技术&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;软件开发&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;数据库&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;美术设计&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;web开发&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;ps技术&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;办公信息&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)</span></span><br><span class="line"><span class="comment">-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)</span></span><br><span class="line"><span class="keyword">SELECT</span> a.categoryName <span class="keyword">AS</span> <span class="string">&#x27;父栏目&#x27;</span>,b.categoryName <span class="keyword">AS</span> <span class="string">&#x27;子栏目&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> category <span class="keyword">AS</span> a,category <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.`categoryid`<span class="operator">=</span>b.`pid`</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>分析如下：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210924001036738.png" alt="image-20210924001036738"></p>
<p>查询结果应为：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210924001105342.png" alt="image-20210924001105342"></p>
<h3 id="4-5排序和分页"><a href="#4-5排序和分页" class="headerlink" title="4.5排序和分页"></a>4.5排序和分页</h3><p>测试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*============== 排序 ================</span></span><br><span class="line"><span class="comment">语法 : ORDER BY</span></span><br><span class="line"><span class="comment">   ORDER BY 语句用于根据指定的列对结果集进行排序。</span></span><br><span class="line"><span class="comment">   ORDER BY 语句默认按照ASC升序对记录进行排序。</span></span><br><span class="line"><span class="comment">   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span></span><br><span class="line"><span class="comment">-- 按成绩降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.subjectno <span class="operator">=</span> sub.subjectno</span><br><span class="line"><span class="keyword">WHERE</span> subjectname<span class="operator">=</span><span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*============== 分页 ================</span></span><br><span class="line"><span class="comment">语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset</span></span><br><span class="line"><span class="comment">好处 : (用户体验,网络传输,查询压力)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">推导:</span></span><br><span class="line"><span class="comment">   第一页 : limit 0,5</span></span><br><span class="line"><span class="comment">   第二页 : limit 5,5</span></span><br><span class="line"><span class="comment">   第三页 : limit 10,5</span></span><br><span class="line"><span class="comment">   ......</span></span><br><span class="line"><span class="comment">   第N页 : limit (pageNo-1)*pageSzie,pageSzie</span></span><br><span class="line"><span class="comment">   [pageNo:页码,pageSize:单页面显示条数]</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 每页显示5条数据</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.subjectno <span class="operator">=</span> sub.subjectno</span><br><span class="line"><span class="keyword">WHERE</span> subjectname<span class="operator">=</span><span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span> , studentno</span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname,subjectname,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.subjectno <span class="operator">=</span> sub.subjectno</span><br><span class="line"><span class="keyword">WHERE</span> subjectname<span class="operator">=</span><span class="string">&#x27;JAVA第一学年&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210923235739010.png" alt="image-20210923235739010"></p>
<h3 id="4-6子查询"><a href="#4-6子查询" class="headerlink" title="4.6子查询"></a>4.6子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*============== 子查询 ================</span></span><br><span class="line"><span class="comment">什么是子查询?</span></span><br><span class="line"><span class="comment">   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句</span></span><br><span class="line"><span class="comment">   嵌套查询可由多个子查询组成,求解的方式是由里及外;</span></span><br><span class="line"><span class="comment">   子查询返回的结果一般都是集合,故而建议使用IN关键字;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列</span></span><br><span class="line"><span class="comment">-- 方法一:使用连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,r.subjectno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`SubjectNo`<span class="operator">=</span>sub.`SubjectNo`</span><br><span class="line"><span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二:使用子查询(执行顺序:由里及外)</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,subjectno,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> subjectno<span class="operator">=</span>(</span><br><span class="line">   <span class="keyword">SELECT</span> subjectno <span class="keyword">FROM</span> `subject`</span><br><span class="line">   <span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名</span></span><br><span class="line"><span class="comment">-- 方法一:使用连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno,studentname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> sub.`SubjectNo` <span class="operator">=</span> r.`SubjectNo`</span><br><span class="line"><span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">&#x27;高等数学-2&#x27;</span> <span class="keyword">AND</span> StudentResult<span class="operator">&gt;=</span><span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二:使用连接查询+子查询</span></span><br><span class="line"><span class="comment">-- 分数不小于80分的学生的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> r.studentno,studentname <span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r <span class="keyword">ON</span> s.`StudentNo`<span class="operator">=</span>r.`StudentNo`</span><br><span class="line"><span class="keyword">WHERE</span> StudentResult<span class="operator">&gt;=</span><span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在上面SQL基础上,添加需求:课程为 高等数学-2</span></span><br><span class="line"><span class="keyword">SELECT</span> r.studentno,studentname <span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r <span class="keyword">ON</span> s.`StudentNo`<span class="operator">=</span>r.`StudentNo`</span><br><span class="line"><span class="keyword">WHERE</span> StudentResult<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">AND</span> subjectno<span class="operator">=</span>(</span><br><span class="line">   <span class="keyword">SELECT</span> subjectno <span class="keyword">FROM</span> `subject`</span><br><span class="line">   <span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法三:使用子查询</span></span><br><span class="line"><span class="comment">-- 分步写简单sql语句,然后将其嵌套起来</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentno <span class="keyword">IN</span>(</span><br><span class="line">   <span class="keyword">SELECT</span> studentno <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">WHERE</span> StudentResult<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">AND</span> subjectno<span class="operator">=</span>(</span><br><span class="line">       <span class="keyword">SELECT</span> subjectno <span class="keyword">FROM</span> `subject` <span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210924001520300.png" alt="image-20210924001520300"></p>
<h2 id="5-MySQL函数"><a href="#5-MySQL函数" class="headerlink" title="5.MySQL函数"></a>5.MySQL函数</h2><h3 id="5-1常用函数"><a href="#5-1常用函数" class="headerlink" title="5.1常用函数"></a>5.1常用函数</h3><h4 id="5-1-1数据函数"><a href="#5-1-1数据函数" class="headerlink" title="5.1.1数据函数"></a>5.1.1<strong>数据函数</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>);  <span class="comment">/*绝对值*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.4</span>); <span class="comment">/*向上取整*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.4</span>);   <span class="comment">/*向下取整*/</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND();  <span class="comment">/*随机数,返回一个0-1之间的随机数*/</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">0</span>); <span class="comment">/*符号函数: 负数返回-1,正数返回1,0返回0*/</span></span><br></pre></td></tr></table></figure>

<h4 id="5-1-2字符串函数"><a href="#5-1-2字符串函数" class="headerlink" title="5.1.2字符串函数"></a>5.1.2<strong>字符串函数</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;狂神说坚持就能成功&#x27;</span>); <span class="comment">/*返回字符串包含的字符数*/</span></span><br><span class="line"> <span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;爱&#x27;</span>,<span class="string">&#x27;程序&#x27;</span>);  <span class="comment">/*合并字符串,参数可以有多个*/</span></span><br><span class="line"> <span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;我爱编程helloworld&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;超级热爱&#x27;</span>);  <span class="comment">/*替换字符串,从某个位置开始替换某个长度*/</span></span><br><span class="line"> <span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;KuangShen&#x27;</span>); <span class="comment">/*小写*/</span></span><br><span class="line"> <span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;KuangShen&#x27;</span>); <span class="comment">/*大写*/</span></span><br><span class="line"> <span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;hello,world&#x27;</span>,<span class="number">5</span>);   <span class="comment">/*从左边截取*/</span></span><br><span class="line"> <span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">&#x27;hello,world&#x27;</span>,<span class="number">5</span>);  <span class="comment">/*从右边截取*/</span></span><br><span class="line"> <span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;狂神说坚持就能成功&#x27;</span>,<span class="string">&#x27;坚持&#x27;</span>,<span class="string">&#x27;努力&#x27;</span>);  <span class="comment">/*替换字符串*/</span></span><br><span class="line"> <span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;狂神说坚持就能成功&#x27;</span>,<span class="number">4</span>,<span class="number">6</span>); <span class="comment">/*截取字符串,开始和长度*/</span></span><br><span class="line"> <span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;狂神说坚持就能成功&#x27;</span>); <span class="comment">/*反转*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询姓周的同学,改成邹</span></span><br><span class="line"> <span class="keyword">SELECT</span> REPLACE(studentname,<span class="string">&#x27;周&#x27;</span>,<span class="string">&#x27;邹&#x27;</span>) <span class="keyword">AS</span> 新名字</span><br><span class="line"> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;周%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="5-1-3日期和时间函数"><a href="#5-1-3日期和时间函数" class="headerlink" title="5.1.3日期和时间函数"></a>5.1.3<strong>日期和时间函数</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>();   <span class="comment">/*获取当前日期*/</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE();   <span class="comment">/*获取当前日期*/</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW();   <span class="comment">/*获取当前日期和时间*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>();   <span class="comment">/*获取当前日期和时间*/</span></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE();   <span class="comment">/*获取当前日期和时间*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取年月日,时分秒</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW());</span><br></pre></td></tr></table></figure>

<h4 id="5-1-4系统信息函数"><a href="#5-1-4系统信息函数" class="headerlink" title="5.1.4系统信息函数"></a>5.1.4<strong>系统信息函数</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> VERSION();  <span class="comment">/*版本*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();     <span class="comment">/*用户*/</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2聚合函数"><a href="#5-2聚合函数" class="headerlink" title="5.2聚合函数"></a>5.2聚合函数</h3><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>COUNT()</td>
<td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td>
</tr>
<tr>
<td>SUM()</td>
<td>返回数字字段或表达式列作统计，返回一列的总和。</td>
</tr>
<tr>
<td>AVG()</td>
<td>通常为数值字段或表达列作统计，返回一列的平均值</td>
</tr>
<tr>
<td>MAX()</td>
<td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td>
</tr>
<tr>
<td>MIN()</td>
<td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="comment">/*COUNT:非空的*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(studentname) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student;  <span class="comment">/*推荐*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。</span></span><br><span class="line"><span class="comment">-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。</span></span><br><span class="line"><span class="comment">-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；</span></span><br><span class="line"><span class="comment">-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">下面它们之间的一些对比：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1）在表没有主键时，count(1)比count(*)快</span></span><br><span class="line"><span class="comment">2）有主键时，主键作为计算条件，count(主键)效率最高；</span></span><br><span class="line"><span class="comment">3）若表格只有一个字段，则count(*)效率较高。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(StudentResult) <span class="keyword">AS</span> 总和 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(StudentResult) <span class="keyword">AS</span> 平均分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(StudentResult) <span class="keyword">AS</span> 最高分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(StudentResult) <span class="keyword">AS</span> 最低分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-1题目："><a href="#5-2-1题目：" class="headerlink" title="5.2.1题目："></a>5.2.1<strong>题目：</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询不同课程的平均分,最高分,最低分</span></span><br><span class="line"><span class="comment">-- 前提:根据不同的课程进行分组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> subjectname,<span class="built_in">AVG</span>(studentresult) <span class="keyword">AS</span> 平均分,<span class="built_in">MAX</span>(StudentResult) <span class="keyword">AS</span> 最高分,<span class="built_in">MIN</span>(StudentResult) <span class="keyword">AS</span> 最低分</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">ON</span> r.subjectno <span class="operator">=</span> s.subjectno</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.subjectno</span><br><span class="line"><span class="keyword">HAVING</span> 平均分<span class="operator">&gt;</span><span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">where写在group by前面.</span></span><br><span class="line"><span class="comment">要是放在分组后面的筛选</span></span><br><span class="line"><span class="comment">要使用HAVING..</span></span><br><span class="line"><span class="comment">因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3MD5-加密"><a href="#5-3MD5-加密" class="headerlink" title="5.3MD5 加密"></a>5.3MD5 加密</h3><h4 id="5-3-1MD5简介"><a href="#5-3-1MD5简介" class="headerlink" title="5.3.1MD5简介"></a><strong>5.3.1MD5简介</strong></h4><blockquote>
<p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p>
</blockquote>
<h4 id="5-3-2实现数据加密"><a href="#5-3-2实现数据加密" class="headerlink" title="5.3.2实现数据加密"></a><strong>5.3.2实现数据加密</strong></h4><p>新建一个表 testmd5</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testmd5` (</span><br><span class="line"> `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> `pwd` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>

<p>插入一些数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testmd5 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;kuangshen&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;qinjiang&#x27;</span>,<span class="string">&#x27;456789&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果我们要对pwd这一列数据进行加密，语法是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update testmd5 <span class="keyword">set</span> pwd <span class="operator">=</span> md5(pwd);</span><br></pre></td></tr></table></figure>

<p>如果单独对某个用户(如kuangshen)的密码加密：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testmd5 <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;kuangshen2&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">update testmd5 <span class="keyword">set</span> pwd <span class="operator">=</span> md5(pwd) <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;kuangshen2&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>插入新的数据自动加密</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testmd5 <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;kuangshen3&#x27;</span>,md5(<span class="string">&#x27;123456&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> testmd5 <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;kuangshen&#x27;</span> <span class="keyword">AND</span> pwd<span class="operator">=</span>MD5(<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="5-4小结"><a href="#5-4小结" class="headerlink" title="5.4小结"></a>5.4小结</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ================ 内置函数 ================</span></span><br><span class="line"><span class="comment">-- 数值函数</span></span><br><span class="line"><span class="built_in">abs</span>(x)            <span class="comment">-- 绝对值 abs(-10.9) = 10</span></span><br><span class="line">format(x, d)    <span class="comment">-- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span></span><br><span class="line"><span class="built_in">ceil</span>(x)            <span class="comment">-- 向上取整 ceil(10.1) = 11</span></span><br><span class="line"><span class="built_in">floor</span>(x)        <span class="comment">-- 向下取整 floor (10.1) = 10</span></span><br><span class="line">round(x)        <span class="comment">-- 四舍五入去整</span></span><br><span class="line"><span class="built_in">mod</span>(m, n)        <span class="comment">-- m%n m mod n 求余 10%3=1</span></span><br><span class="line">pi()            <span class="comment">-- 获得圆周率</span></span><br><span class="line">pow(m, n)        <span class="comment">-- m^n</span></span><br><span class="line"><span class="built_in">sqrt</span>(x)            <span class="comment">-- 算术平方根</span></span><br><span class="line">rand()            <span class="comment">-- 随机数</span></span><br><span class="line"><span class="keyword">truncate</span>(x, d)    <span class="comment">-- 截取d位小数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间日期函数</span></span><br><span class="line">now(), <span class="built_in">current_timestamp</span>();     <span class="comment">-- 当前日期时间</span></span><br><span class="line"><span class="built_in">current_date</span>();                    <span class="comment">-- 当前日期</span></span><br><span class="line"><span class="built_in">current_time</span>();                    <span class="comment">-- 当前时间</span></span><br><span class="line"><span class="type">date</span>(<span class="string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>);    <span class="comment">-- 获取日期部分</span></span><br><span class="line"><span class="type">time</span>(<span class="string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>);    <span class="comment">-- 获取时间部分</span></span><br><span class="line">date_format(<span class="string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>, <span class="string">&#x27;%d %y %a %d %m %b %j&#x27;</span>);    <span class="comment">-- 格式化时间</span></span><br><span class="line">unix_timestamp();                <span class="comment">-- 获得unix时间戳</span></span><br><span class="line">from_unixtime();                <span class="comment">-- 从时间戳获得时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line">length(string)            <span class="comment">-- string长度，字节</span></span><br><span class="line"><span class="keyword">char_length</span>(string)        <span class="comment">-- string的字符个数</span></span><br><span class="line"><span class="built_in">substring</span>(str, position [,length])        <span class="comment">-- 从str的position开始,取length个字符</span></span><br><span class="line">replace(str ,search_str ,replace_str)    <span class="comment">-- 在str中用replace_str替换search_str</span></span><br><span class="line">instr(string ,substring)    <span class="comment">-- 返回substring首次在string中出现的位置</span></span><br><span class="line">concat(string [,...])    <span class="comment">-- 连接字串</span></span><br><span class="line">charset(str)            <span class="comment">-- 返回字串字符集</span></span><br><span class="line">lcase(string)            <span class="comment">-- 转换成小写</span></span><br><span class="line"><span class="keyword">left</span>(string, length)    <span class="comment">-- 从string2中的左边起取length个字符</span></span><br><span class="line">load_file(file_name)    <span class="comment">-- 从文件读取内容</span></span><br><span class="line">locate(substring, string [,start_position])    <span class="comment">-- 同instr,但可指定开始位置</span></span><br><span class="line">lpad(string, length, pad)    <span class="comment">-- 重复用pad加在string开头,直到字串长度为length</span></span><br><span class="line">ltrim(string)            <span class="comment">-- 去除前端空格</span></span><br><span class="line">repeat(string, count)    <span class="comment">-- 重复count次</span></span><br><span class="line">rpad(string, length, pad)    <span class="comment">--在str后用pad补充,直到长度为length</span></span><br><span class="line">rtrim(string)            <span class="comment">-- 去除后端空格</span></span><br><span class="line">strcmp(string1 ,string2)    <span class="comment">-- 逐字符比较两字串大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="built_in">count</span>()</span><br><span class="line"><span class="built_in">sum</span>();</span><br><span class="line"><span class="built_in">max</span>();</span><br><span class="line"><span class="built_in">min</span>();</span><br><span class="line"><span class="built_in">avg</span>();</span><br><span class="line">group_concat()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 其他常用函数</span></span><br><span class="line">md5();</span><br><span class="line"><span class="keyword">default</span>();</span><br></pre></td></tr></table></figure>



<h2 id="6-事务和索引"><a href="#6-事务和索引" class="headerlink" title="6.事务和索引"></a>6.事务和索引</h2><h3 id="6-1事务"><a href="#6-1事务" class="headerlink" title="6.1事务"></a>6.1事务</h3><h4 id="6-1-1什么是事务"><a href="#6-1-1什么是事务" class="headerlink" title="6.1.1什么是事务"></a>6.1.1什么是事务</h4><ul>
<li>事务就是将一组SQL语句放在同一批次内去执行</li>
<li>如果一个SQL语句出错,则该批次内的所有SQL都将被取消执行</li>
<li>MySQL事务处理只支持InnoDB和BDB数据表类型</li>
</ul>
<h4 id="6-1-2事务的ACID原则"><a href="#6-1-2事务的ACID原则" class="headerlink" title="6.1.2事务的ACID原则"></a>6.1.2事务的ACID原则</h4><h5 id="原子性-Atomic"><a href="#原子性-Atomic" class="headerlink" title="原子性(Atomic)"></a><strong>原子性(Atomic)</strong></h5><ul>
<li>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
</ul>
<h5 id="一致性-Consist"><a href="#一致性-Consist" class="headerlink" title="一致性(Consist)"></a><strong>一致性(Consist)</strong></h5><ul>
<li>一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。</li>
</ul>
<h5 id="隔离性-Isolated"><a href="#隔离性-Isolated" class="headerlink" title="隔离性(Isolated)"></a><strong>隔离性(Isolated)</strong></h5><ul>
<li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li>
</ul>
<h5 id="持久性-Durable"><a href="#持久性-Durable" class="headerlink" title="持久性(Durable)"></a><strong>持久性(Durable)</strong></h5><ul>
<li>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</li>
</ul>
<blockquote>
<p><strong>基本语法</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用set语句来改变自动提交模式</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;   <span class="comment">/*关闭*/</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;   <span class="comment">/*开启*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意:</span></span><br><span class="line"><span class="comment">--- 1.MySQL中默认是自动提交</span></span><br><span class="line"><span class="comment">--- 2.使用事务时应先关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开始一个事务,标记事务的起始点</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交一个事务给数据库</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将事务回滚,数据回到本次事务的初始状态</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 还原MySQL数据库的自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 保存点</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 设置一个事务保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 删除保存点</span></span><br></pre></td></tr></table></figure>



<h4 id="6-1-3测试"><a href="#6-1-3测试" class="headerlink" title="6.1.3测试"></a>6.1.3测试</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">课堂测试题目</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A在线买一款价格为500元商品,网上银行转账.</span></span><br><span class="line"><span class="comment">A的银行卡余额为2000,然后给商家B支付500.</span></span><br><span class="line"><span class="comment">商家B一开始的银行卡余额为10000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">创建数据库shop和创建表account并插入2条数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE `shop`<span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line">USE `shop`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`cash` <span class="type">DECIMAL</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account (`name`,`cash`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>,<span class="number">2000.00</span>),(<span class="string">&#x27;B&#x27;</span>,<span class="number">10000.00</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转账实现</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;  <span class="comment">-- 开始一个事务,标记事务的起始点</span></span><br><span class="line">UPDATE account <span class="keyword">SET</span> cash<span class="operator">=</span>cash<span class="number">-500</span> <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">UPDATE account <span class="keyword">SET</span> cash<span class="operator">=</span>cash<span class="operator">+</span><span class="number">500</span> <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>; <span class="comment">-- 提交事务</span></span><br><span class="line"># <span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 恢复自动提交</span></span><br></pre></td></tr></table></figure>



<h3 id="6-2索引"><a href="#6-2索引" class="headerlink" title="6.2索引"></a>6.2索引</h3><h4 id="6-2-1索引的作用"><a href="#6-2-1索引的作用" class="headerlink" title="6.2.1索引的作用"></a>6.2.1索引的作用</h4><ul>
<li>提高查询速度</li>
<li>确保数据的唯一性</li>
<li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li>
<li>使用分组和排序子句进行数据检索时 , 可以显著减少分组和排序的时间</li>
<li>全文检索字段进行搜索优化.</li>
</ul>
<h4 id="6-2-2分类"><a href="#6-2-2分类" class="headerlink" title="6.2.2分类"></a>6.2.2分类</h4><ul>
<li>主键索引 (Primary Key)</li>
<li>唯一索引 (Unique)</li>
<li>常规索引 (Index)</li>
<li>全文索引 (FullText)</li>
</ul>
<h5 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h5><p>主键 : 某一个属性组能唯一标识一条记录</p>
<p>特点 :</p>
<ul>
<li>最常见的索引类型</li>
<li>确保数据记录的唯一性</li>
<li>确定特定数据记录在数据库中的位置</li>
</ul>
<h5 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h5><p>作用 : <strong>避免同一个表中某数据列中的值重复</strong></p>
<p>与主键索引的区别</p>
<ul>
<li>主键索引只能有一个</li>
<li>唯一索引可能有多个</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Grade`(</span><br><span class="line">  `GradeID` <span class="type">INT</span>(<span class="number">11</span>) AUTO_INCREMENT PRIMARYKEY,</span><br><span class="line">  `GradeName` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span></span><br><span class="line">   <span class="comment">-- 或 UNIQUE KEY `GradeID` (`GradeID`)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="常规索引"><a href="#常规索引" class="headerlink" title="常规索引"></a>常规索引</h5><p>作用 : 快速定位特定数据</p>
<p>注意 :</p>
<ul>
<li>index 和 key 关键字都可以设置常规索引</li>
<li>应加在查询找条件的字段</li>
<li>不宜添加太多常规索引,影响数据的插入,删除和修改操作</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">result</span>`(</span><br><span class="line">   <span class="comment">-- 省略一些代码</span></span><br><span class="line">  INDEX<span class="operator">/</span>KEY `ind` (`studentNo`,`subjectNo`) <span class="comment">-- 创建表时添加</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 创建后添加</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">result</span>` <span class="keyword">ADD</span> INDEX `ind`(`studentNo`,`subjectNo`);</span><br></pre></td></tr></table></figure>

<h5 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h5><p>作用 : 快速定位特定数据</p>
<p>注意 :</p>
<ul>
<li>只能用于MyISAM类型的数据表</li>
<li>只能用于CHAR , VARCHAR , TEXT数据列类型</li>
<li>适合大型数据集</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#方法一：创建表时</span></span><br><span class="line"><span class="comment">  　　CREATE TABLE 表名 (</span></span><br><span class="line"><span class="comment">               字段名1 数据类型 [完整性约束条件…],</span></span><br><span class="line"><span class="comment">               字段名2 数据类型 [完整性约束条件…],</span></span><br><span class="line"><span class="comment">               [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY</span></span><br><span class="line"><span class="comment">               [索引名] (字段名[(长度)] [ASC |DESC])</span></span><br><span class="line"><span class="comment">               );</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#方法二：CREATE在已存在的表上创建索引</span></span><br><span class="line"><span class="comment">       CREATE [UNIQUE | FULLTEXT | SPATIAL ] INDEX 索引名</span></span><br><span class="line"><span class="comment">                    ON 表名 (字段名[(长度)] [ASC |DESC]) ;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#方法三：ALTER TABLE在已存在的表上创建索引</span></span><br><span class="line"><span class="comment">       ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL ] INDEX</span></span><br><span class="line"><span class="comment">                            索引名 (字段名[(长度)] [ASC |DESC]) ;</span></span><br><span class="line"><span class="comment">                           </span></span><br><span class="line"><span class="comment">                           </span></span><br><span class="line"><span class="comment">#删除索引：DROP INDEX 索引名 ON 表名字;</span></span><br><span class="line"><span class="comment">#删除主键索引: ALTER TABLE 表名 DROP PRIMARY KEY;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#显示索引信息: SHOW INDEX FROM student;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*增加全文索引*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `school`.`student` <span class="keyword">ADD</span> FULLTEXT INDEX `studentname` (`StudentName`);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*EXPLAIN : 分析SQL语句执行性能*/</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentno<span class="operator">=</span><span class="string">&#x27;1000&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用全文索引*/</span></span><br><span class="line"><span class="comment">-- 全文搜索通过 MATCH() 函数完成。</span></span><br><span class="line"><span class="comment">-- 搜索字符串作为 against() 的参数被给定。搜索以忽略字母大小写的方式执行。对于表中的每个记录行，MATCH() 返回一个相关性值。即，在搜索字符串与记录行在 MATCH() 列表中指定的列的文本之间的相似性尺度。</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(studentname) AGAINST(<span class="string">&#x27;love&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">开始之前，先说一下全文索引的版本、存储引擎、数据类型的支持情况</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引；</span></span><br><span class="line"><span class="comment">MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引;</span></span><br><span class="line"><span class="comment">只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。</span></span><br><span class="line"><span class="comment">测试或使用全文索引时，要先看一下自己的 MySQL 版本、存储引擎和数据类型是否支持全文索引。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="6-2-3测试索引"><a href="#6-2-3测试索引" class="headerlink" title="6.2.3测试索引"></a>6.2.3测试索引</h4><p><strong>建表app_user：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `app_user` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">`email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户邮箱&#x27;</span>,</span><br><span class="line">`phone` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">`gender` tinyint(<span class="number">4</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;性别（0:男；1：女）&#x27;</span>,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`age` tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">`create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">`update_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;app用户表&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>批量插入数据：100w</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> mock_data;</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;</span> num DO</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> app_user(`name`, `email`, `phone`, `gender`, `password`, `age`)</span><br><span class="line">   <span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;用户&#x27;</span>, i), <span class="string">&#x27;24736743@qq.com&#x27;</span>, CONCAT(<span class="string">&#x27;18&#x27;</span>, <span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span>(<span class="number">999999999</span><span class="number">-100000000</span>)<span class="operator">+</span><span class="number">100000000</span>)),<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">2</span>),UUID(), <span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">100</span>));</span><br><span class="line">  <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">SELECT</span> mock_data();</span><br></pre></td></tr></table></figure>

<p><strong>索引效率测试</strong></p>
<p>无索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>; <span class="comment">-- 查看耗时</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">          id: <span class="number">1</span></span><br><span class="line">select_type: SIMPLE</span><br><span class="line">       <span class="keyword">table</span>: app_user</span><br><span class="line">  partitions: <span class="keyword">NULL</span></span><br><span class="line">        type: <span class="keyword">ALL</span></span><br><span class="line">possible_keys: <span class="keyword">NULL</span></span><br><span class="line">        key: <span class="keyword">NULL</span></span><br><span class="line">    key_len: <span class="keyword">NULL</span></span><br><span class="line">        <span class="keyword">ref</span>: <span class="keyword">NULL</span></span><br><span class="line">        <span class="keyword">rows</span>: <span class="number">992759</span></span><br><span class="line">    filtered: <span class="number">10.00</span></span><br><span class="line">      Extra: <span class="keyword">Using</span> <span class="keyword">where</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>创建索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_app_user_name <span class="keyword">ON</span> app_user(name);</span><br></pre></td></tr></table></figure>

<p>测试普通索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">          id: <span class="number">1</span></span><br><span class="line">select_type: SIMPLE</span><br><span class="line">       <span class="keyword">table</span>: app_user</span><br><span class="line">  partitions: <span class="keyword">NULL</span></span><br><span class="line">        type: <span class="keyword">ref</span></span><br><span class="line">possible_keys: idx_app_user_name</span><br><span class="line">        key: idx_app_user_name</span><br><span class="line">    key_len: <span class="number">203</span></span><br><span class="line">        <span class="keyword">ref</span>: const</span><br><span class="line">        <span class="keyword">rows</span>: <span class="number">1</span></span><br><span class="line">    filtered: <span class="number">100.00</span></span><br><span class="line">      Extra: <span class="keyword">NULL</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;用户9999&#x27;</span>;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h4 id="6-2-4索引准则"><a href="#6-2-4索引准则" class="headerlink" title="6.2.4索引准则"></a>6.2.4索引准则</h4><ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表建议不要加索引</li>
<li>索引一般应加在查找条件的字段</li>
</ul>
<h4 id="6-2-5索引的数据结构"><a href="#6-2-5索引的数据结构" class="headerlink" title="6.2.5索引的数据结构"></a>6.2.5索引的数据结构</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 我们可以在创建上述索引的时候，为其指定索引类型，分两类</span></span><br><span class="line">hash类型的索引：查询单条快，范围查询慢</span><br><span class="line">btree类型的索引：b<span class="operator">+</span>树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不同的存储引擎支持的索引类型也不一样</span></span><br><span class="line">InnoDB 支持事务，支持行级别锁定，支持 B<span class="operator">-</span>tree、<span class="keyword">Full</span><span class="operator">-</span>text 等索引，不支持 Hash 索引；</span><br><span class="line">MyISAM 不支持事务，支持表级别锁定，支持 B<span class="operator">-</span>tree、<span class="keyword">Full</span><span class="operator">-</span>text 等索引，不支持 Hash 索引；</span><br><span class="line">Memory 不支持事务，支持表级别锁定，支持 B<span class="operator">-</span>tree、Hash 等索引，不支持 <span class="keyword">Full</span><span class="operator">-</span>text 索引；</span><br><span class="line">NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B<span class="operator">-</span>tree、<span class="keyword">Full</span><span class="operator">-</span>text 等索引；</span><br><span class="line">Archive 不支持事务，支持表级别锁定，不支持 B<span class="operator">-</span>tree、Hash、<span class="keyword">Full</span><span class="operator">-</span>text 等索引；</span><br></pre></td></tr></table></figure>

<h2 id="7-权限及如何设计数据库"><a href="#7-权限及如何设计数据库" class="headerlink" title="7.权限及如何设计数据库"></a>7.权限及如何设计数据库</h2><h3 id="7-1用户管理"><a href="#7-1用户管理" class="headerlink" title="7.1用户管理"></a>7.1用户管理</h3><h4 id="7-1-1使用SQLyog-创建用户，并授予权限演示"><a href="#7-1-1使用SQLyog-创建用户，并授予权限演示" class="headerlink" title="7.1.1使用SQLyog 创建用户，并授予权限演示"></a>7.1.1使用SQLyog 创建用户，并授予权限演示</h4><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109155949390.png" alt="image-20211109155949390"></p>
<h4 id="7-1-2基本命令"><a href="#7-1-2基本命令" class="headerlink" title="7.1.2基本命令"></a>7.1.2基本命令</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 用户和权限管理 */</span> <span class="comment">------------------</span></span><br><span class="line">用户信息表：mysql.user</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加用户 CREATE USER kuangshen IDENTIFIED BY &#x27;123456&#x27;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名 IDENTIFIED <span class="keyword">BY</span> [PASSWORD] 密码(字符串)</span><br><span class="line">  <span class="operator">-</span> 必须拥有mysql数据库的全局<span class="keyword">CREATE</span> <span class="keyword">USER</span>权限，或拥有<span class="keyword">INSERT</span>权限。</span><br><span class="line">  <span class="operator">-</span> 只能创建用户，不能赋予权限。</span><br><span class="line">  <span class="operator">-</span> 用户名，注意引号：如 <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;192.168.1.1&#x27;</span></span><br><span class="line">  <span class="operator">-</span> 密码也需引号，纯数字密码也要加引号</span><br><span class="line">  <span class="operator">-</span> 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名用户 RENAME USER kuangshen TO kuangshen2</span></span><br><span class="line">RENAME <span class="keyword">USER</span> old_user <span class="keyword">TO</span> new_user</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;密码&#x27;</span>)    <span class="comment">-- 为当前用户设置密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> 用户名 <span class="operator">=</span> PASSWORD(<span class="string">&#x27;密码&#x27;</span>)    <span class="comment">-- 为指定用户设置密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户 DROP USER kuangshen2</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分配权限/添加用户</span></span><br><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">TO</span> 用户名 [IDENTIFIED <span class="keyword">BY</span> [PASSWORD] <span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">  <span class="operator">-</span> <span class="keyword">all</span> privileges 表示所有权限</span><br><span class="line">  <span class="operator">-</span> <span class="operator">*</span>.<span class="operator">*</span> 表示所有库的所有表</span><br><span class="line">  <span class="operator">-</span> 库名.表名 表示某库下面的某表</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看权限   SHOW GRANTS FOR root@localhost;</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> 用户名</span><br><span class="line">   <span class="comment">-- 查看当前用户权限</span></span><br><span class="line">  <span class="keyword">SHOW</span> GRANTS; 或 <span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="built_in">CURRENT_USER</span>; 或 <span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="built_in">CURRENT_USER</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤消权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">FROM</span> 用户名</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES, <span class="keyword">GRANT</span> OPTION <span class="keyword">FROM</span> 用户名    <span class="comment">-- 撤销所有权限</span></span><br></pre></td></tr></table></figure>

<h4 id="7-1-3权限解释"><a href="#7-1-3权限解释" class="headerlink" title="7.1.3权限解释"></a>7.1.3权限解释</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 权限列表</span></span><br><span class="line"><span class="keyword">ALL</span> [PRIVILEGES]    <span class="comment">-- 设置除GRANT OPTION之外的所有简单权限</span></span><br><span class="line"><span class="keyword">ALTER</span>    <span class="comment">-- 允许使用ALTER TABLE</span></span><br><span class="line"><span class="keyword">ALTER</span> ROUTINE    <span class="comment">-- 更改或取消已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span>    <span class="comment">-- 允许使用CREATE TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> ROUTINE    <span class="comment">-- 创建已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY TABLES        <span class="comment">-- 允许使用CREATE TEMPORARY TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span>        <span class="comment">-- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span>        <span class="comment">-- 允许使用CREATE VIEW</span></span><br><span class="line"><span class="keyword">DELETE</span>    <span class="comment">-- 允许使用DELETE</span></span><br><span class="line"><span class="keyword">DROP</span>    <span class="comment">-- 允许使用DROP TABLE</span></span><br><span class="line"><span class="keyword">EXECUTE</span>        <span class="comment">-- 允许用户运行已存储的子程序</span></span><br><span class="line">FILE    <span class="comment">-- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span></span><br><span class="line">INDEX     <span class="comment">-- 允许使用CREATE INDEX和DROP INDEX</span></span><br><span class="line"><span class="keyword">INSERT</span>    <span class="comment">-- 允许使用INSERT</span></span><br><span class="line">LOCK TABLES        <span class="comment">-- 允许对您拥有SELECT权限的表使用LOCK TABLES</span></span><br><span class="line">PROCESS     <span class="comment">-- 允许使用SHOW FULL PROCESSLIST</span></span><br><span class="line"><span class="keyword">REFERENCES</span>    <span class="comment">-- 未被实施</span></span><br><span class="line">RELOAD    <span class="comment">-- 允许使用FLUSH</span></span><br><span class="line">REPLICATION CLIENT    <span class="comment">-- 允许用户询问从属服务器或主服务器的地址</span></span><br><span class="line">REPLICATION SLAVE    <span class="comment">-- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span></span><br><span class="line"><span class="keyword">SELECT</span>    <span class="comment">-- 允许使用SELECT</span></span><br><span class="line"><span class="keyword">SHOW</span> DATABASES    <span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VIEW</span>    <span class="comment">-- 允许使用SHOW CREATE VIEW</span></span><br><span class="line">SHUTDOWN    <span class="comment">-- 允许使用mysqladmin shutdown</span></span><br><span class="line">SUPER    <span class="comment">-- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span></span><br><span class="line">UPDATE    <span class="comment">-- 允许使用UPDATE</span></span><br><span class="line">USAGE    <span class="comment">-- “无权限”的同义词</span></span><br><span class="line"><span class="keyword">GRANT</span> OPTION    <span class="comment">-- 允许授予权限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 表维护 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析和存储表的关键字分布</span></span><br><span class="line">ANALYZE [<span class="keyword">LOCAL</span> <span class="operator">|</span> NO_WRITE_TO_BINLOG] <span class="keyword">TABLE</span> 表名 ...</span><br><span class="line"><span class="comment">-- 检查一个或多个表是否有错误</span></span><br><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option <span class="operator">=</span> &#123;QUICK <span class="operator">|</span> FAST <span class="operator">|</span> MEDIUM <span class="operator">|</span> EXTENDED <span class="operator">|</span> CHANGED&#125;</span><br><span class="line"><span class="comment">-- 整理数据文件的碎片</span></span><br><span class="line">OPTIMIZE [<span class="keyword">LOCAL</span> <span class="operator">|</span> NO_WRITE_TO_BINLOG] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>



<h3 id="7-2MySQL备份"><a href="#7-2MySQL备份" class="headerlink" title="7.2MySQL备份"></a>7.2MySQL备份</h3><p>数据库备份必要性</p>
<ul>
<li>保证重要数据不丢失</li>
<li>数据转移</li>
</ul>
<p>MySQL数据库备份方法</p>
<ul>
<li>mysqldump备份工具</li>
<li>数据库管理工具,如SQLyog</li>
<li>直接拷贝数据库文件和相关配置文件</li>
</ul>
<h4 id="7-2-1mysqldump客户端"><a href="#7-2-1mysqldump客户端" class="headerlink" title="7.2.1mysqldump客户端"></a>7.2.1<strong>mysqldump客户端</strong></h4><p>作用 :</p>
<ul>
<li>转储数据库</li>
<li>搜集数据库进行备份</li>
<li>将数据转移到另一个SQL服务器,不一定是MySQL服务器</li>
</ul>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109160008623.png" alt="image-20211109160008623"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 导出</span></span><br><span class="line"><span class="number">1.</span> 导出一张表 <span class="comment">-- mysqldump -uroot -p123456 school student &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 表名 <span class="operator">&gt;</span> 文件名(D:<span class="operator">/</span>a.sql)</span><br><span class="line"><span class="number">2.</span> 导出多张表 <span class="comment">-- mysqldump -uroot -p123456 school student result &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 表<span class="number">1</span> 表<span class="number">2</span> 表<span class="number">3</span> <span class="operator">&gt;</span> 文件名(D:<span class="operator">/</span>a.sql)</span><br><span class="line"><span class="number">3.</span> 导出所有表 <span class="comment">-- mysqldump -uroot -p123456 school &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 <span class="operator">&gt;</span> 文件名(D:<span class="operator">/</span>a.sql)</span><br><span class="line"><span class="number">4.</span> 导出一个库 <span class="comment">-- mysqldump -uroot -p123456 -B school &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 <span class="operator">-</span>B 库名 <span class="operator">&gt;</span> 文件名(D:<span class="operator">/</span>a.sql)</span><br><span class="line"></span><br><span class="line">可以<span class="operator">-</span>w携带备份条件</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入</span></span><br><span class="line"><span class="number">1.</span> 在登录mysql的情况下：<span class="comment">-- source D:/a.sql</span></span><br><span class="line">　　source 备份文件</span><br><span class="line"><span class="number">2.</span> 在不登录的情况下</span><br><span class="line">　　mysql <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 <span class="operator">&lt;</span> 备份文件</span><br></pre></td></tr></table></figure>



<h3 id="7-3规范化数据库设计"><a href="#7-3规范化数据库设计" class="headerlink" title="7.3规范化数据库设计"></a>7.3规范化数据库设计</h3><h4 id="7-3-1为什么需要数据库设计"><a href="#7-3-1为什么需要数据库设计" class="headerlink" title="7.3.1为什么需要数据库设计"></a>7.3.1为什么需要数据库设计</h4><p><strong>当数据库比较复杂时我们需要设计数据库</strong></p>
<p><strong>糟糕的数据库设计 :</strong> </p>
<ul>
<li>数据冗余,存储空间浪费</li>
<li>数据更新和插入的异常</li>
<li>程序性能差</li>
</ul>
<p><strong>良好的数据库设计 :</strong> </p>
<ul>
<li>节省数据的存储空间</li>
<li>能够保证数据的完整性</li>
<li>方便进行数据库应用系统的开发</li>
</ul>
<p> <strong>软件项目开发周期中数据库设计 :</strong></p>
<ul>
<li>需求分析阶段: 分析客户的业务和数据处理需求</li>
<li>概要设计阶段:设计数据库的E-R模型图 , 确认需求信息的正确和完整.</li>
</ul>
<p><strong>设计数据库步骤</strong></p>
<ul>
<li><p>收集信息,分析需求</p>
</li>
<li><ul>
<li>与该系统有关人员进行交流 , 座谈 , 充分了解用户需求 , 理解数据库需要完成的任务.</li>
</ul>
</li>
<li><p>标识实体[Entity]（把需求落实到每个字段）</p>
<ul>
<li><p>标识数据库要管理的关键对象或实体,实体一般是名词</p>
</li>
<li><p>标识每个实体需要存储的详细信息[Attribute]</p>
</li>
</ul>
</li>
<li><p>标识实体之间的关系[Relationship]</p>
</li>
</ul>
<h4 id="7-3-2三大范式"><a href="#7-3-2三大范式" class="headerlink" title="7.3.2三大范式"></a>7.3.2三大范式</h4><p><strong>问题 : 为什么需要数据规范化?</strong></p>
<p>不合规范的表设计会导致的问题：</p>
<ul>
<li><p>信息重复</p>
</li>
<li><p>更新异常</p>
</li>
<li><p>插入异常</p>
</li>
<li><ul>
<li>无法正确表示信息</li>
</ul>
</li>
<li><p>删除异常</p>
</li>
<li><ul>
<li>丢失有效信息</li>
</ul>
</li>
</ul>
<blockquote>
<p>三大范式</p>
</blockquote>
<p><strong>第一范式 (1st NF)</strong></p>
<p>第一范式的目标是确保每列的原子性,如果每列都是不可再分的最小数据单元,则满足第一范式</p>
<p><strong>第二范式(2nd NF)</strong></p>
<p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。</p>
<p>第二范式要求每个表只描述一件事情</p>
<p><strong>第三范式(3rd NF)</strong></p>
<p>如果一个关系满足第二范式,并且除了主键以外的其他列都不传递依赖于主键列,则满足第三范式.</p>
<p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p>
<p><strong>规范化和性能的关系</strong></p>
<p>为满足某种商业目标 , 数据库性能比规范化数据库更重要</p>
<p>在数据规范化的同时 , 要综合考虑数据库的性能</p>
<p>通过在给定的表中添加额外的字段,以大量减少需要从中搜索信息所需的时间</p>
<p>通过在给定的表中插入计算列,以方便查询</p>
<h2 id="8-JDBC-重点"><a href="#8-JDBC-重点" class="headerlink" title="8.JDBC(重点)"></a>8.JDBC(重点)</h2><h3 id="8-1简介"><a href="#8-1简介" class="headerlink" title="8.1简介"></a>8.1简介</h3><p>JDBC<br>SUN 公司为了简化开发人员的（对数据库的统一）操作，提供了一个(Java操作数据库的)规范，JDBC</p>
<p>这些规范的实现由具体的厂商去做</p>
<p>对于开发人员来说，我们只需要掌握JDBC的接口操作即可</p>
<p>java.sql</p>
<p>javax.sql</p>
<p>还需要导入数据库驱动包</p>
<h3 id="8-2第一个JDBC程序"><a href="#8-2第一个JDBC程序" class="headerlink" title="8.2第一个JDBC程序"></a>8.2第一个JDBC程序</h3><p>创建测试数据库：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE jdbcStudy <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"> </span><br><span class="line">USE jdbcStudy;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users`(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">PASSWORD <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">birthday <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users`(id,NAME,PASSWORD,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;zhansan&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;zs@sina.com&#x27;</span>,<span class="string">&#x27;1980-12-04&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;lisi@sina.com&#x27;</span>,<span class="string">&#x27;1981-12-04&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;wangwu@sina.com&#x27;</span>,<span class="string">&#x27;1979-12-04&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p><strong>1.创建一个普通项目</strong></p>
<p><strong>2.导入数据库驱动</strong></p>
<p><strong>3.编写测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.geekpig.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//固定写法，加载驱动</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.用户信息和url</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&quot;</span>;   <span class="comment">//因为MySQL的问题此处为true会报错</span></span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String pwd = <span class="string">&quot;shujuku233&quot;</span>;</span><br><span class="line">        <span class="comment">//3.连接成功，数据库对象   Connection  代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, pwd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.执行SQL的对象 Statement  执行sql对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行SQL的对象 去 执行SQL ，可能存在结果，查看返回结果</span></span><br><span class="line">        String sql  = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);<span class="comment">//返回的结果集，结果集中封装了我们全部的查询结果</span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+ resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+ resultSet.getObject(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;pwd=&quot;</span>+ resultSet.getObject(<span class="string">&quot;PASSWORD&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+ resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birth=&quot;</span>+ resultSet.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>步骤总结： </p>
<p>1.加载驱动</p>
<p>2.连接数据库 DriverManager</p>
<p>3.获取执行SQL的对象 Statement</p>
<p>4.获得返回的结果集</p>
<p>5.释放连接</p>
<h3 id="8-3JDBC中的几个对象"><a href="#8-3JDBC中的几个对象" class="headerlink" title="8.3JDBC中的几个对象"></a>8.3JDBC中的几个对象</h3><h4 id="8-3-1-DriverManager"><a href="#8-3-1-DriverManager" class="headerlink" title="8.3.1  DriverManager"></a>8.3.1  DriverManager</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class="line"></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//固定写法,且此代码会自动执行注册</span></span><br><span class="line"></span><br><span class="line">Connection connection= DriverManager.getConnection(url,name,password);</span><br><span class="line"><span class="comment">//connection代表数据库</span></span><br><span class="line"><span class="comment">//数据库设置自动提交</span></span><br><span class="line"><span class="comment">//事务提交</span></span><br><span class="line"><span class="comment">//事务回滚</span></span><br><span class="line">connection.rollback();</span><br><span class="line">connection.commit();</span><br><span class="line">connection.setAutoCommit();</span><br></pre></td></tr></table></figure>



<h4 id="8-3-2-URL"><a href="#8-3-2-URL" class="headerlink" title="8.3.2  URL"></a>8.3.2  URL</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">URL</span><br><span class="line"> </span><br><span class="line">String url =<span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;&amp;useSSL=false&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//mysql 默认3306</span></span><br><span class="line"><span class="comment">//协议://主机地址:端口号/数据库名？参数1&amp;参数2&amp;参数3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//Oracle   1521</span></span><br><span class="line"><span class="comment">//jdbc:oralce:thin:@localhost:1521:sid</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<h4 id="8-3-3-Statement"><a href="#8-3-3-Statement" class="headerlink" title="8.3.3  Statement"></a>8.3.3  Statement</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">statement 执行SQL的对象 pPrepareStatement 执行SQL的对象</span><br><span class="line"> </span><br><span class="line">String sql=<span class="string">&quot;SELECT * FROM users&quot;</span>;<span class="comment">//编写Sql</span></span><br><span class="line"> </span><br><span class="line">statement.executeQuery();</span><br><span class="line">statement.execute();</span><br><span class="line">statement.executeUpdate();<span class="comment">//更新，插入，删除，返回一个受影响的行数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="8-3-4-ResultSet"><a href="#8-3-4-ResultSet" class="headerlink" title="8.3.4  ResultSet"></a>8.3.4  ResultSet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ResultSet 查询的结果集，封装了所以的查询结果</span><br><span class="line"> </span><br><span class="line">获得指定的数据类型</span><br><span class="line"> </span><br><span class="line">ResultSet resultSet = statement.executeQuery(sql);<span class="comment">//返回的结果集,结果集中封装了我们全部查询的结果</span></span><br><span class="line">        resultSet.getObject();<span class="comment">//在不知道列类型下使用</span></span><br><span class="line">        resultSet.getString();<span class="comment">//如果知道则指定使用</span></span><br><span class="line">        resultSet.getInt();</span><br><span class="line"><span class="comment">// 遍历,指针</span></span><br><span class="line">    resultSet.next(); <span class="comment">//移动到下一个</span></span><br><span class="line">    resultSet.afterLast();<span class="comment">//移动到最后</span></span><br><span class="line">    resultSet.beforeFirst();<span class="comment">//移动到最前面</span></span><br><span class="line">    resultSet.previous();<span class="comment">//移动到前一行</span></span><br><span class="line">    resultSet.absolute(row);<span class="comment">//移动到指定行</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="8-3-5-释放资源"><a href="#8-3-5-释放资源" class="headerlink" title="8.3.5  释放资源"></a>8.3.5  释放资源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();<span class="comment">//耗资源</span></span><br></pre></td></tr></table></figure>



<h3 id="8-4-Statement对象"><a href="#8-4-Statement对象" class="headerlink" title="8.4  Statement对象"></a>8.4  Statement对象</h3><p>Jdbc中的<strong>statement对象用于向数据库发送SQL语句</strong>，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。</p>
<ol>
<li><p>Statement对象的executeUpdate方法，用于向数据库发送增、删、改的sq|语句， executeUpdate执行完后， 将会返回一个整数(即增删改语句导致了数据库几行数据发生了变化)。</p>
</li>
<li><p>Statement.executeQuery方法用于向数据库发生查询语句，executeQuery方法返回代表查询结果的ResultSet对象。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CRUD操作-create</span><br><span class="line"></span><br><span class="line">使用executeUpdate(String sql)方法完成数据添加操作，示例操作：</span><br><span class="line"></span><br><span class="line"> Statement statement = connection.createStatement();</span><br><span class="line">        String sql = <span class="string">&quot;insert into user(...) values(...)&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = statement.executeUpdate(sql);</span><br><span class="line">        <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">CRUD操作-delete</span><br><span class="line"></span><br><span class="line">使用executeUpdate(String sql)方法完成数据删除操作，示例操作：</span><br><span class="line"></span><br><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">        String sql = <span class="string">&quot;delete from user where id =1&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = statement.executeUpdate(sql);</span><br><span class="line">        <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">CURD操作-update</span><br><span class="line"></span><br><span class="line">使用executeUpdate(String sql)方法完成数据修改操作，示例操作：</span><br><span class="line"></span><br><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">        String sql = <span class="string">&quot;update user set name =&#x27;&#x27; where name = &#x27;&#x27;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = statement.executeUpdate(sql);</span><br><span class="line">        <span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">CURD操作-read</span><br><span class="line"></span><br><span class="line">使用executeUpdate(String sql)方法完成数据查询操作，示例操作：</span><br><span class="line"></span><br><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">        String sql = <span class="string">&quot;select * from  user where id =1&quot;</span>;</span><br><span class="line">        ResultSet rs= statement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>提取工具类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.geekpig.lesson02.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver =<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url =<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username =<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password =<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取配置文件，反射,IO流</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line">            driver= properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            url=properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            username=properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            password=properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            <span class="comment">//1.驱动只用加载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取连接和释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection con, Statement st, ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            st.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(con!=<span class="keyword">null</span>)&#123;con.close();&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编写增删改查的方法，executeUpdate/executeQuery</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.geekpig.lesson02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.geekpig.lesson02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection conn =<span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs =<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             conn = JdbcUtils.getConnection();<span class="comment">//获取连接</span></span><br><span class="line">             st = conn.createStatement();<span class="comment">//获取SQL执行对象</span></span><br><span class="line">             String sql=<span class="string">&quot;INSERT INTO users(id,`NAME`,`PASSWORD`,`email`,`birthday`)&quot;</span> +</span><br><span class="line">                     <span class="string">&quot;VALUES(5,&#x27;sanjin&#x27;,&#x27;123456&#x27;,&#x27;233223@qq.com&#x27;,&#x27;2020-01-01&#x27;)&quot;</span>;</span><br><span class="line">            <span class="comment">//删除修改直接调整sql语句即可,查询使用executeQuery</span></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="8-5SQL注入问题"><a href="#8-5SQL注入问题" class="headerlink" title="8.5SQL注入问题"></a>8.5SQL注入问题</h3><p>sql存在漏洞，会被攻击导致数据泄露 SQL会被拼接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SQL注入</span></span><br><span class="line"><span class="keyword">package</span> jdbcdemo1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdbcdemo1.utis.jdbcutis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdbcdemo1.utis.jdbcutis.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQL</span>注入 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Connection conn =<span class="keyword">null</span>;</span><br><span class="line">    login(<span class="string">&quot;&#x27; or &#x27;1=1&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String name,String password)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs =<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = getConnection();<span class="comment">//获取连接</span></span><br><span class="line">        st = conn.createStatement();<span class="comment">//获取SQL执行对象</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from users where `NAME`=&#x27;&quot;</span>+ name +<span class="string">&quot;&#x27;  AND `PASSWORD`=&#x27;&quot;</span>+ password +<span class="string">&quot;&#x27;&quot;</span> ;</span><br><span class="line">        rs=st.executeQuery(sql);<span class="comment">//查询完毕返回结果集</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        JdbcUtils.release(conn,st,rs);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn,st,rs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-6PreparedStatement对象（防止SQL注入）"><a href="#8-6PreparedStatement对象（防止SQL注入）" class="headerlink" title="8.6PreparedStatement对象（防止SQL注入）"></a>8.6PreparedStatement对象（防止SQL注入）</h3><p>PreparedStatement 可以防止SQL注入 ，效率更高。</p>
<ol>
<li>重写工具类：</li>
</ol>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbcdemo1;</span><br><span class="line"><span class="keyword">import</span> jdbcdemo1.utis.jdbcutis;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdbcdemo1.utis.jdbcutis.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">preparestatement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn=jdbcutils.getConnection();</span><br><span class="line"> 			<span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用？ 占位符代替参数</span></span><br><span class="line">            String sql=<span class="string">&quot;INSERT INTO users(id,`NAME`,`PASSWORD`,`email`,`birthday`) values (?,?,?,?,?)&quot;</span>;             <span class="comment">//先写SQL语句</span></span><br><span class="line">            st= conn.prepareStatement(sql);<span class="comment">//预编译SQL ，先写SQL，然后不执行</span></span><br><span class="line"> 			<span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">7</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>,<span class="string">&quot;fulang&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>,<span class="string">&quot;fulang@sina.com&quot;</span>);</span><br><span class="line">            <span class="comment">//注意：sql.Date   数据库  java.sql.Date()转化</span></span><br><span class="line">            <span class="comment">//     util.Date  JAVA  new Date().getTime()获得时间戳</span></span><br><span class="line">            st.setDate(<span class="number">5</span>,<span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> Date().getTime()));</span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Insert Success&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            jdbcutis.release(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查询：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbcdemo1;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> jdbcdemo1.utis.jdbcutis;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdbcdemo1.utis.jdbcutis.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">preparestatement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            conn=jdbcutis.getConnection();</span><br><span class="line">            String sql=<span class="string">&quot;select * from users where id=?&quot;</span>;</span><br><span class="line">            st= conn.prepareStatement(sql);</span><br><span class="line"> </span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line"> </span><br><span class="line">           rs= st.executeQuery();</span><br><span class="line">           <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;id:&quot;</span>+rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">               System.out.println(<span class="string">&quot;name:&quot;</span>+rs.getObject(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">               System.out.println(<span class="string">&quot;password:&quot;</span>+rs.getObject(<span class="string">&quot;PASSWORD&quot;</span>));</span><br><span class="line">               System.out.println(<span class="string">&quot;email:&quot;</span>+rs.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">               System.out.println(<span class="string">&quot;birthday:&quot;</span>+rs.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">           &#125;</span><br><span class="line">            jdbcutis.release(conn,st,<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>防止SQL注入：</li>
</ol>
<p>防止SQL注入本质，传递字符 带有“ ”，转义字符会被转义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbcdemo1;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> jdbcdemo1.utis.jdbcutis;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdbcdemo1.utis.jdbcutis.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zhuru</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        login(<span class="string">&quot;fulang&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username,String password)</span> </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = jdbcutis.getConnection();<span class="comment">//获取连接</span></span><br><span class="line"> </span><br><span class="line">            String sql=<span class="string">&quot;select * from users where `NAME`=?  AND `PASSWORD`=?&quot;</span> ;</span><br><span class="line"> </span><br><span class="line">            st= conn.prepareStatement(sql);</span><br><span class="line"> </span><br><span class="line">            st.setString(<span class="number">1</span>,username);</span><br><span class="line">            st.setString(<span class="number">2</span>,password);</span><br><span class="line"> </span><br><span class="line">            rs = st.executeQuery();</span><br><span class="line">           <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">               System.out.println(rs.getString(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">               System.out.println(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">           &#125;</span><br><span class="line">            jdbcutis.release(conn,st,rs);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-7使用IDEA连接数据库"><a href="#8-7使用IDEA连接数据库" class="headerlink" title="8.7使用IDEA连接数据库"></a>8.7使用IDEA连接数据库</h3><p>连接成功后，可以选择数据库</p>
<p>双击数据库</p>
<p>更新数据</p>
<p>编写sql代码的地方</p>
<h3 id="8-8-JDBC事务"><a href="#8-8-JDBC事务" class="headerlink" title="8.8 JDBC事务"></a>8.8 JDBC事务</h3><h4 id="8-8-1ACID原则"><a href="#8-8-1ACID原则" class="headerlink" title="8.8.1ACID原则"></a>8.8.1ACID原则</h4><p>原子性：要么全部完成，要么都不完成</p>
<p>一致性：结果总数不变</p>
<p>隔离性：多个进程互不干扰</p>
<p>持久性：一旦提交不可逆，持久化到数据库了</p>
<h4 id="8-8-2隔离性的问题："><a href="#8-8-2隔离性的问题：" class="headerlink" title="8.8.2隔离性的问题："></a>8.8.2隔离性的问题：</h4><p><strong>脏读： 一个事务读取了另一个没有提交的事务</strong></p>
<p><strong>不可重复读：在同一个事务内，重复读取表中的数据，表发生了改变</strong></p>
<p><strong>虚读（幻读）：在一个事务内，读取到了别人插入的数据，导致前后读出来的结果不一致</strong></p>
<h4 id="8-8-3代码实现："><a href="#8-8-3代码实现：" class="headerlink" title="8.8.3代码实现："></a>8.8.3代码实现：</h4><p>开启事务conn.setAutoCommit(false);</p>
<p>一组业务执行完毕，提交事务</p>
<p>可以在catch语句中显示的定义回滚，但是默认失败会回滚</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdbcdemo1.utis.jdbcutis1;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdbcdemo1.utis.jdbcutis.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">action</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn =<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = jdbcutis1.getConnection();</span><br><span class="line">            <span class="comment">//关闭数据库的自动提交功能，自动开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">           </span><br><span class="line">            String sql = <span class="string">&quot;update acount set money = money-500 where id = 1&quot;</span>;</span><br><span class="line">            ps =conn.prepareStatement(sql);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            String sql2 = <span class="string">&quot;update acount set money = money+500 where id = 2&quot;</span>;</span><br><span class="line">            ps=conn.prepareStatement(sql2);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//业务完毕，提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//如果失败，则默认回滚</span></span><br><span class="line">                conn.rollback();<span class="comment">//如果失败，回滚</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                jdbcutils.release(conn,ps,rs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-9数据库连接池（重要）"><a href="#8-9数据库连接池（重要）" class="headerlink" title="8.9数据库连接池（重要）"></a>8.9数据库连接池（重要）</h3><p>数据库连接–执行完毕–释放</p>
<p>连接–释放 十分浪费资源</p>
<p>池化技术： 准备一些预先的资源，过来就连接预先准备好的</p>
<p>常用连接数 100</p>
<p>最少连接数：100</p>
<p>最大连接数 ： 120 业务最高承载上限</p>
<p>排队等待，</p>
<p>等待超时：100ms</p>
<p><strong>编写连接池，只需要实现一个接口 DateSource</strong></p>
<p>开源数据源实现(拿来即用)：</p>
<ol>
<li><p>DBCP</p>
</li>
<li><p>C3P0</p>
</li>
<li><p>Druid: 阿里巴巴</p>
</li>
<li><p>HikariCP</p>
</li>
</ol>
<p>使用了这些数据库连接池之后，我们在项目开发中就不需要编写连接数据库的代码了</p>
<h4 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a>DBCP</h4> <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">配置文件</span></span><br><span class="line"><span class="comment">#DBCP数据源中定义好的名字</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/jdbcstudy?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSl=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#初始化连接数</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">50</span></span><br><span class="line"><span class="comment">#最大空闲连接</span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="string">20</span></span><br><span class="line"><span class="comment">#最小空闲连接</span></span><br><span class="line"><span class="attr">minIdle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment">#最长等待超时时间 以毫秒为单位</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">60000</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">connectionProperties</span>=<span class="string">useUnicode=true;characterEncoding=UTF8</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">defaultAutoCommit</span>=<span class="string">true</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">defaultReadOnly</span>=<span class="string"></span></span><br><span class="line"> </span><br><span class="line"><span class="attr">defaultTransactionIsolation</span>=<span class="string">READ_UNCOMMITTED</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>实现：</p>
<p>配置文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//工具类</span></span><br><span class="line"><span class="keyword">package</span> jdbcdemo1.utis;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp.BasicDataSourceFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcutisDbcp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource datasource=<span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                InputStream in = jdbcutils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcpconfig.properties&quot;</span>);</span><br><span class="line">                Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">                properties.load(in);</span><br><span class="line">                <span class="comment">//创建数据源   工厂模式</span></span><br><span class="line">                datasource=BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line"> </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> datasource.getConnection();<span class="comment">//数据源中获取连接</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (st!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//TestDBCP</span></span><br><span class="line"><span class="keyword">package</span> jdbcdemo1;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> jdbcdemo1.utis.jdbcutisDbcp;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDBCP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            conn=jdbcutisDbcp.getConnection();</span><br><span class="line">            String sql=<span class="string">&quot;select * from users where id=?&quot;</span>;</span><br><span class="line">            st= conn.prepareStatement(sql);</span><br><span class="line"> </span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line"> </span><br><span class="line">            rs= st.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id:&quot;</span>+rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name:&quot;</span>+rs.getObject(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;password:&quot;</span>+rs.getObject(<span class="string">&quot;PASSWORD&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;email:&quot;</span>+rs.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;birthday:&quot;</span>+rs.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            jdbcutisDbcp.release(conn,st,rs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p><strong>无论使用什么数据源，本质(使用DataSource接口)是不变的，DateSource接口不会变，方法就不会变</strong></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>狂神说java</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM符号引用和直接引用</title>
    <url>/2021/10/09/JVM%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8%E5%92%8C%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<p><a href="https://www.zhihu.com/question/30300585/answer/51335493">参考</a></p>
<p><strong>我太菜了看不懂，等我填坑</strong></p>
<p>理解1：</p>
<p>符号引用就是字符串，这个字符串包含足够的信息，以供实际使用时可以找到相应的位置。你比如说某个方法的符号引用，如：“java/io/PrintStream.println:(Ljava/lang/String;)V”。里面有类的信息，方法名，方法参数等信息。</p>
<p>当第一次运行时，要根据字符串的内容，到该类的方法表中搜索这个方法。运行一次之后，符号引用会被替换为直接引用，下次就不用搜索了。直接引用就是偏移量，通过偏移量虚拟机可以直接在该类的内存区域中找到方法字节码的起始位置。</p>
<p>理解2：</p>
<p>第一次运行的时候，发现指令没有被解析，根据指令去把常量池中有关系的所有项找出来，得到以“UTF-8”编码描述的此方法所属的“类，方法名，描述符”的常量池项，这就是“符号引用”。之后根据这些信息去对应类的方法表里寻找对应的方法，得到方法表的偏移量（指针），这个偏移量（指针）就是“直接引用”，再将偏移量赋给常量池项#2（根据指令，在常量池里找到的第一个项）。 最后再将指令修改为：invokevirtual_quick，并把操作数修改成指向方法表的偏移量（指针）， 并加上参数个数。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>java中 == 和 equals 的区别</title>
    <url>/2021/10/09/java%E4%B8%AD%20==%20%E5%92%8C%20equals%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title="=="></a>==</h2><p>== 是一个比较运算符：既可以判断基本类型，又可以判断引用类型</p>
<ol>
<li>如果判断基本类型，判断的是值是否相等</li>
<li>如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象</li>
</ol>
<h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><p>equals是Object类中的方法，只能判断引用类型！</p>
<p>默认判断的是地址是否相等，子类往往重写该方法，用于判断内容（比如，Integer 和String）</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>1.</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211009173729630.png" alt="image-20211009173729630"></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211009173809553.png" alt="image-20211009173809553"></p>
<p>2.</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211009174042704.png" alt="image-20211009174042704"></p>
<p>Person类只继承了Object，即为判断引用类型。</p>
<p>3.</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211009185022101.png" alt="image-20211009185022101"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm内存结构</title>
    <url>/2021/10/09/jvm%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="一、参考："><a href="#一、参考：" class="headerlink" title="一、参考："></a>一、参考：</h2><ol>
<li><p><a href="https://www.cnblogs.com/ityouknow/p/5610232.html">https://www.cnblogs.com/ityouknow/p/5610232.html</a></p>
</li>
<li><p><a href="https://juejin.cn/post/6844903663496871943">https://juejin.cn/post/6844903663496871943</a></p>
</li>
</ol>
<h2 id="二、概述："><a href="#二、概述：" class="headerlink" title="二、概述："></a>二、概述：</h2><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211009161801698.png" alt="image-20211009161801698"></p>
<p>JVM内存结构主要有三大块：<em><strong>堆内存</strong></em>、<em><strong>方法区</strong></em>和<em><strong>栈</strong></em>。</p>
<p>堆内存是JVM中最大的一块由<em><strong>年轻代</strong></em>和<em><strong>老年代</strong></em>组成，而年轻代内存又被分成三部分，<em><strong>Eden空间</strong></em>、<em><strong>From Survivor空间</strong></em>、<em><strong>To Survivor空间</strong></em>,默认情况下年轻代按照8:1:1的比例来分配；</p>
<p>方法区存储类信息、常量、静态变量等数据，是线程共享的区域，为与Java堆区分，方法区还有一个别名Non-Heap(非堆)；</p>
<p>栈又分为java虚拟机栈和本地方法栈主要用于方法的执行。</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/331425-20160623115841031-564040608.png" alt="img"></p>
<p><em><strong>控制参数</strong></em></p>
<ul>
<li><p>Xms设置堆的最小空间大小。</p>
</li>
<li><p>Xmx设置堆的最大空间大小。</p>
</li>
<li><p>XX:NewSize设置新生代最小空间大小。</p>
</li>
<li><p>XX:MaxNewSize设置新生代最大空间大小。</p>
</li>
<li><p>XX:PermSize设置永久代最小空间大小。</p>
</li>
<li><p>XX:MaxPermSize设置永久代最大空间大小。</p>
</li>
<li><p>Xss:设置每个线程的堆栈大小。</p>
</li>
</ul>
<p>没有直接设置老年代的参数，但是可以设置堆空间大小和新生代空间大小两个参数来间接控制。</p>
<p> <em><strong>老年代空间大小=堆空间大小-年轻代大空间大小</strong></em></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/331425-20160623115846235-947282498.png" alt="002hLfJYgy71J9KxlH53b"></p>
<p><strong>线程私有的：</strong></p>
<ul>
<li>程序计数器</li>
<li>虚拟机栈</li>
<li>本地方法栈</li>
</ul>
<p><strong>线程共享的：</strong></p>
<ul>
<li>堆</li>
<li>方法区</li>
<li>直接内存</li>
</ul>
<h2 id="1、Java堆（Heap）"><a href="#1、Java堆（Heap）" class="headerlink" title="1、Java堆（Heap）"></a>1、Java堆（Heap）</h2><p>对于大多数应用来说，Java堆（Java Heap）是Java虚拟机所管理的内存中<strong>最大</strong>的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，<strong>几乎所有的对象实例都在这里分配内存。</strong></p>
<p> Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“<strong>GC堆</strong>”。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java堆中还可以细分为：<em><strong>*新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。*</strong></em></p>
<p>根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。</p>
<p>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p>
<h2 id="2、-方法区（Method-Area）"><a href="#2、-方法区（Method-Area）" class="headerlink" title="2、 方法区（Method Area）"></a>2、 方法区（Method Area）</h2><p> 方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，****它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据****。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</p>
<p>对于习惯在HotSpot虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说使用永久代来实现方法区而已。</p>
<p>Java虚拟机规范对这个区域的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。</p>
<p>根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。 </p>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池信息（用于存放编译期生成的各种字面量和符号引用）</p>
<p>既然运行时常量池时方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。</p>
<h2 id="3、-程序计数器（Program-Counter-Register）"><a href="#3、-程序计数器（Program-Counter-Register）" class="headerlink" title="3、 程序计数器（Program Counter Register）"></a>3、 程序计数器（Program Counter Register）</h2><p>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。<br>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。<br>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie方法，这个计数器值则为空（Undefined）。</p>
<p><em><strong>*此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。*</strong></em></p>
<h2 id="4、JVM栈（JVM-Stacks）"><a href="#4、JVM栈（JVM-Stacks）" class="headerlink" title="4、JVM栈（JVM Stacks）"></a>4、JVM栈（JVM Stacks）</h2><p>与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，<strong>它的生命周期与线程相同</strong>。<strong>虚拟机栈描述的是Java方法执行的内存模型</strong>：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。<strong>每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程</strong>。 </p>
<p>局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。</p>
<p>其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p>
<p>在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出****StackOverflowError*<em><strong>异常；如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出</strong></em>*OutOfMemoryError****异常。</p>
<h2 id="5、-本地方法栈（Native-Method-Stacks）"><a href="#5、-本地方法栈（Native-Method-Stacks）" class="headerlink" title="5、 本地方法栈（Native Method Stacks）"></a>5、 本地方法栈（Native Method Stacks）</h2><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而<strong>本地方法栈则是为虚拟机使用到的Native方法服务</strong>。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</p>
<h2 id="6、直接内存"><a href="#6、直接内存" class="headerlink" title="6、直接内存"></a>6、直接内存</h2><p>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致OutOfMemoryError异常出现。</p>
<p>JDK1.4中新加入的 <strong>NIO(New Input/Output) 类</strong>，引入了一种基于<strong>通道（Channel）</strong> 与<strong>缓存区（Buffer）</strong> 的 I/O 方式，它可以直接使用Native函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为<strong>避免了在 Java 堆和 Native 堆之间来回复制数据</strong>。</p>
<p>本机直接内存的分配不会收到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p>
<h2 id="三、-HotSpot-虚拟机在-Java-堆中对象分配、布局和访问的全过程。"><a href="#三、-HotSpot-虚拟机在-Java-堆中对象分配、布局和访问的全过程。" class="headerlink" title="三、 HotSpot 虚拟机在 Java 堆中对象分配、布局和访问的全过程。"></a>三、 HotSpot 虚拟机在 Java 堆中对象分配、布局和访问的全过程。</h2><h2 id="1、java对象的创建"><a href="#1、java对象的创建" class="headerlink" title="1、java对象的创建"></a>1、java对象的创建</h2><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/16561e59a4135869~tplv-t2oaga2asx-watermark.awebp" alt="Java对象的创建过程"></p>
<p><strong>①类加载检查：</strong> 虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p>
<p><strong>②分配内存：</strong> 在<strong>类加载检查</strong>通过后，接下来虚拟机将为新生对象<strong>分配内存</strong>。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。<strong>分配方式</strong>有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，<strong>选择那种分配方式由 Java 堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定</strong>。</p>
<p><strong>内存分配的两种方式：（补充内容，需要掌握）</strong></p>
<p>选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是”标记-清除”，还是”标记-整理”（也称作”标记-压缩”），值得注意的是，复制算法内存也是规整的</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/16561e59a40a2c3d~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<p><strong>内存分配并发问题（补充内容，需要掌握）</strong></p>
<p>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：</p>
<ul>
<li><strong>CAS+失败重试：</strong> CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。<strong>虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</strong></li>
<li><strong>TLAB：</strong> 为每一个线程预先在Eden区分配一块儿内存，JVM在给线程中的对象分配内存时，首先在TLAB分配，当对象大于TLAB中的剩余内存或TLAB的内存已用尽时，再采用上述的CAS进行内存分配</li>
</ul>
<p><strong>③初始化零值：</strong> 内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p>
<p><strong>④设置对象头：</strong> 初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希吗、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p>
<p><strong>⑤执行 init 方法：</strong> 在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<code>&lt;init&gt;</code> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <code>&lt;init&gt;</code> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p>
<h2 id="2、对象的内存布局"><a href="#2、对象的内存布局" class="headerlink" title="2、对象的内存布局"></a>2、对象的内存布局</h2><p> 在 Hotspot 虚拟机中，对象在内存中的布局可以分为3快区域：<strong>对象头</strong>、<strong>实例数据</strong>和<strong>对齐填充</strong>。</p>
<p><strong>Hotspot虚拟机的对象头包括两部分信息</strong>，<strong>第一部分用于存储对象自身的自身运行时数据</strong>（哈希吗、GC分代年龄、锁状态标志等等），<strong>另一部分是类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是那个类的实例。</p>
<p><strong>实例数据部分是对象真正存储的有效信息</strong>，也是在程序中所定义的各种类型的字段内容。</p>
<p><strong>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。</strong> 因为Hotspot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>
<h2 id="3、对象访问定位（懵B）"><a href="#3、对象访问定位（懵B）" class="headerlink" title="3、对象访问定位（懵B）"></a>3、对象访问定位（懵B）</h2><p>建立对象就是为了使用对象，我们的Java程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式有虚拟机实现而定，目前主流的访问方式有<strong>①使用句柄</strong>和<strong>②直接指针</strong>两种：</p>
<ol>
<li><p><strong>句柄：</strong> 如果使用句柄的话，那么Java堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/16306b9573968946~tplv-t2oaga2asx-watermark.awebp" alt="使用句柄"></p>
</li>
<li><p><strong>直接指针：</strong>  如果使用直接指针访问，那么 Java 堆对像的布局中就必须考虑如何防止访问类型数据的相关信息，reference 中存储的直接就是对象的地址。</p>
</li>
</ol>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/16306ba3a41b6b65~tplv-t2oaga2asx-watermark.awebp" alt="使用直接指针"></p>
<p><strong>这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。</strong></p>
<h2 id="四、补充内容"><a href="#四、补充内容" class="headerlink" title="四、补充内容"></a>四、补充内容</h2><h2 id="1、String-类和常量池"><a href="#1、String-类和常量池" class="headerlink" title="1、String 类和常量池"></a>1、String 类和常量池</h2><p><strong>1.String 对象的两种创建方式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String str1 = &quot;abcd&quot;;</span><br><span class="line">String str2 = new String(&quot;abcd&quot;);</span><br><span class="line">System.out.println(str1==str2);//false</span><br></pre></td></tr></table></figure>

<p>这两种不同的创建方法是有差别的，第一种方式是在常量池中拿对象，第二种方式是直接在堆内存空间创建一个新的对象。</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/16561e59a59c0873~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<p>记住：只要使用new方法，便需要创建新的对象。</p>
<p><strong>2. String 类型的常量池比较特殊。它的主要使用方法有两种：</strong></p>
<ul>
<li>直接使用双引号声明出来的 String 对象会直接存储在常量池中。</li>
<li>如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方String.intern() 是一个 Native 方法，它的作用是：如果运行时常量池中已经包含一个等于此 String 对象内容的字符串，则返回常量池中该字符串的引用；如果没有，则在常量池中创建与此 String 内容相同的字符串，并返回常量池中创建的字符串的引用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;计算机&quot;</span>);</span><br><span class="line">String s2 = s1.intern();</span><br><span class="line">String s3 = <span class="string">&quot;计算机&quot;</span>;</span><br><span class="line">System.out.println(s2);<span class="comment">//计算机</span></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//false，因为一个是堆内存中的String对象一个是常量池中的String对象，</span></span><br><span class="line">System.out.println(s3 == s2);<span class="comment">//true，因为两个都是常量池中的String对</span></span><br></pre></td></tr></table></figure>

<p><strong>3. String 字符串拼接</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;str&quot;</span>;</span><br><span class="line">String str2 = <span class="string">&quot;ing&quot;</span>;</span><br><span class="line"></span><br><span class="line">String str3 = <span class="string">&quot;str&quot;</span> + <span class="string">&quot;ing&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">String str4 = str1 + str2; <span class="comment">//在堆上创建的新的对象	  </span></span><br><span class="line">String str5 = <span class="string">&quot;string&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">System.out.println(str3 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str3 == str5);<span class="comment">//true</span></span><br><span class="line">System.out.println(str4 == str5);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/16561e59a4d13f92~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<p>尽量避免多个字符串拼接，因为这样会重新创建对象。如果需要改变字符串的话，可以使用 StringBuilder 或者 StringBuffer。</p>
<p><strong>4.String s1 = new String(“abc”);这句话创建了几个对象？</strong></p>
<p><strong>创建了两个对象。</strong></p>
<p><strong>验证：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);<span class="comment">// 堆内存的地值值</span></span><br><span class="line">String s2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2);<span class="comment">// 输出false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。</span></span><br><span class="line">System.out.println(s1.equals(s2));<span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong></p>
<p>先有字符串”abc”放入常量池，然后 new 了一份字符串”abc”放入Java堆(字符串常量”abc”在编译期就已经确定放入常量池，而 Java 堆上的”abc”是在运行期初始化阶段才确定)，然后 Java 栈的 str1 指向Java堆上的”abc”。</p>
<h2 id="2、8种基本类型的包装类和常量池"><a href="#2、8种基本类型的包装类和常量池" class="headerlink" title="2、8种基本类型的包装类和常量池"></a>2、8种基本类型的包装类和常量池</h2><ul>
<li><strong>Java 基本类型的包装类的大部分都实现了常量池技术，即Byte,Short,Integer,Long,Character,Boolean；这5种包装类默认创建了数值[-128，127]的相应类型的缓存数据，但是超出此范围仍然会去创建新的对象。</strong></li>
<li><strong>两种浮点数类型的包装类 Float,Double 并没有实现常量池技术。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">33</span>;</span><br><span class="line">Integer i2 = <span class="number">33</span>;</span><br><span class="line">System.out.println(i1 == i2);<span class="comment">// 输出true</span></span><br><span class="line">Integer i11 = <span class="number">333</span>;</span><br><span class="line">Integer i22 = <span class="number">333</span>;</span><br><span class="line">System.out.println(i11 == i22);<span class="comment">// 输出false</span></span><br><span class="line">Double i3 = <span class="number">1.2</span>;</span><br><span class="line">Double i4 = <span class="number">1.2</span>;</span><br><span class="line">System.out.println(i3 == i4);<span class="comment">// 输出false</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p><strong>Integer 缓存源代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*此方法将始终缓存-128到127（包括端点）范围内的值，并可以缓存此范围之外的其他值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>应用场景：</strong></p>
<ol>
<li>Integer i1=40；Java 在编译的时候会直接将代码封装成Integer i1=Integer.valueOf(40);，从而使用常量池中的对象。</li>
<li>Integer i1 = new Integer(40);这种情况下会创建新的对象。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">40</span>;</span><br><span class="line">Integer i2 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">System.out.println(i1==i2);<span class="comment">//输出false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Integer比较更丰富的一个例子:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">40</span>;</span><br><span class="line">Integer i2 = <span class="number">40</span>;</span><br><span class="line">Integer i3 = <span class="number">0</span>;</span><br><span class="line">Integer i4 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i5 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i6 = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;i1=i2   &quot;</span> + (i1 == i2));</span><br><span class="line">System.out.println(<span class="string">&quot;i1=i2+i3   &quot;</span> + (i1 == i2 + i3));</span><br><span class="line">System.out.println(<span class="string">&quot;i1=i4   &quot;</span> + (i1 == i4));</span><br><span class="line">System.out.println(<span class="string">&quot;i4=i5   &quot;</span> + (i4 == i5));</span><br><span class="line">System.out.println(<span class="string">&quot;i4=i5+i6   &quot;</span> + (i4 == i5 + i6));   </span><br><span class="line">System.out.println(<span class="string">&quot;40=i5+i6   &quot;</span> + (<span class="number">40</span> == i5 + i6));     </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i1=i2   <span class="keyword">true</span></span><br><span class="line">i1=i2+i3   <span class="keyword">true</span></span><br><span class="line">i1=i4   <span class="keyword">false</span></span><br><span class="line">i4=i5   <span class="keyword">false</span></span><br><span class="line">i4=i5+i6   <span class="keyword">true</span></span><br><span class="line"><span class="number">40</span>=i5+i6   <span class="keyword">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>==语句i4 == i5 + i6，因为+这个操作符不适用于Integer对象，首先i5和i6进行自动拆箱操作，进行数值相加，即i4 == 40。然后Integer对象无法与数值进行直接比较，所以i4自动拆箱转为int值40，最终这条语句转为40 == 40进行数值比较。==</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>java类加载机制</title>
    <url>/2021/10/04/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>参考文章：</p>
<p><a href="https://www.cnblogs.com/chanshuyi/p/the_java_class_load_mechamism.html">类加载机制</a></p>
<p>当我们的Java代码编译（javac ）完成后，会生成对应的 class 文件。接着我们运行<code>java Demo</code>命令的时候，我们其实是启动了JVM 虚拟机执行 class 字节码文件的内容。</p>
<p>而 JVM 虚拟机执行 class 字节码的过程可以分为七个阶段：==<strong>加载、验证、准备、解析、初始化、使用、卸载</strong>==</p>
<p><strong>类加载过程：</strong></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/bVcHO1v" alt="image.png"></p>
<h2 id="概览（方法论）："><a href="#概览（方法论）：" class="headerlink" title="概览（方法论）："></a>概览（方法论）：</h2><p>一个类的执行顺序：</p>
<ol>
<li><p>==确定类变量的初始值。==在类加载的准备阶段，JVM会为类变量初始化零值，所以类变量有初始零值。但是如果是被final修饰的类变量，会直接初始化成用户想要的值。</p>
</li>
<li><p>==初始化入口方法。==当进入类加载的初始化阶段后，JVM 会寻找整个 main 方法入口，从而初始化 main 方法所在的整个类（就是写main的类要先初始化）。当需要对一个类进行初始化时，会首先初始化类构造器，之后初始化对象构造器。</p>
</li>
<li><p>==初始化类构造器。==</p>
<p>JVM 会按顺序收集类变量的赋值语句、静态代码块，最终组成类构造器由 JVM 执行。</p>
</li>
<li><p>==初始化对象构造器。==</p>
<p>JVM 会按照收集成员变量的赋值语句、普通代码块，最后收集构造方法，将它们组成对象构造器，最终由 JVM 执行。</p>
</li>
</ol>
<p>如果在初始化 main 方法所在类的时候遇到了其他类的初始化，那么就<strong>先加载对应的类，加载完成之后返回</strong>。如此反复循环，最终返回 main 方法所在类。</p>
<h2 id="执行阶段："><a href="#执行阶段：" class="headerlink" title="执行阶段："></a>执行阶段：</h2><h3 id="一、加载"><a href="#一、加载" class="headerlink" title="一、加载"></a>一、加载</h3><blockquote>
<p>加载阶段是类加载过程的第一个阶段。在这个阶段，JVM 的主要目的是将字节码从各个位置（网络、磁盘等）转化为二进制字节流加载到内存中，接着会为这个类在 JVM 的方法区创建一个对应的 Class 对象，这个 Class 对象就是这个类各种数据的访问入口。</p>
</blockquote>
<h3 id="二、验证"><a href="#二、验证" class="headerlink" title="二、验证"></a>二、验证</h3><p>当 JVM 加载完 Class 字节码文件并在方法区创建对应的 Class 对象之后，JVM 便会启动对该字节码流的校验，只有符合 JVM 字节码规范的文件才能被 JVM 正确执行。</p>
<p>验证分为以下几个类型：</p>
<ul>
<li><strong>JVM规范校验。</strong>JVM 会对字节流进行文件格式校验，判断其是否符合 JVM 规范，是否能被当前版本的虚拟机处理。例如：文件是否是以 <code>0x cafe bene</code>开头，主次版本号是否在当前虚拟机处理范围之内等。</li>
<li><strong>代码逻辑校验。</strong>JVM 会对代码组成的数据流和控制流进行校验，确保 JVM 运行该字节码文件后不会出现致命错误。例如一个方法要求传入 int 类型的参数，但是使用它的时候却传入了一个 String 类型的参数。 </li>
</ul>
<p>当代码数据被加载到内存中后，虚拟机就会对代码数据进行校验，看看这份代码是不是真的按照JVM规范去写的。</p>
<h3 id="三、准备（重点）"><a href="#三、准备（重点）" class="headerlink" title="三、准备（重点）"></a>三、准备（重点）</h3><p>完成校验后，jvm便会开始<strong>为类变量分配内存并初始化</strong>。需要注意内存分配的对象和初始化的类型。</p>
<ul>
<li><strong>内存分配的对象。</strong></li>
</ul>
<p>类变量：指的被static修饰的变量</p>
<p>类成员变量：除了类变量的其他变量</p>
<p>在准备阶段，JVM 只会为<strong>「类变量」</strong>分配内存，而不会为<strong>「类成员变量」</strong>分配内存。「类成员变量」的内存分配需要等到初始化阶段才开始。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> factor = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">public</span> String website = <span class="string">&quot;www.cnblogs.com/chanshuyi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备阶段只有factor属性被分配内存，website不会</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>初始化的类型</strong></li>
</ul>
<p>在准备阶段，JVM 会为类变量分配内存，并为其初始化。但是这里的初始化指的是为变量赋予 Java 语言中该数据类型的零值，而不是用户代码里初始化的值。</p>
<p>但如果一个变量是常量（被 static final 修饰）的话，那么在准备阶段，属性便会被赋予用户希望的值。例如下面的代码在准备阶段之后，number 的值将是 3，而不是 0。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> sector = <span class="number">3</span>;        <span class="comment">//准备阶段：sector = 0；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> number = <span class="number">3</span>;  <span class="comment">//准备阶段：number = 3；</span></span><br></pre></td></tr></table></figure>

<p><strong>P.S:</strong>     final 关键字在 Java 中代表不可改变的意思，意思就是说 number 的值一旦赋值就不会在改变了。既然一旦赋值就不会再改变，那么就必须一开始就给其赋予用户想要的值，因此被 final 修饰的类变量在准备阶段就会被赋予想要的值。而没有被 final 修饰的类变量，其可能在初始化阶段或者运行阶段发生变化，所以就没有必要在准备阶段对它赋予用户想要的值。</p>
<h3 id="四、解析"><a href="#四、解析" class="headerlink" title="四、解析"></a>四、解析</h3><blockquote>
<p>当通过准备阶段之后，JVM 针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符 7 类引用进行解析。这个阶段的主要任务是将其在常量池中的符号引用替换成直接其在内存中的直接引用。</p>
</blockquote>
<h3 id="五、初始化（-重点-）"><a href="#五、初始化（-重点-）" class="headerlink" title="五、初始化（==重点==）"></a>五、初始化（==重点==）</h3><p>根据语句执行顺序对类对象进行初始化。</p>
<p>触发初始化的条件：</p>
<ol>
<li>使用new实例化对象，读取或者设置一个类的静态字段（被final修饰除外），还有调用一个类的静态方法等…..(即遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。)</li>
<li>反射时未初始化则触发</li>
<li>初始化一个类时，如果它的父类没有初始化，则先触发父类初始化</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类<strong>（包含main()方法的那个类）</strong>，虚拟机会先初始化这个主类。</li>
<li>当使用 JDK1.7 动态语言支持时，如果一个 java.lang.invoke.MethodHandle实例最后的解析结果 REF_getstatic,REF_putstatic,REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行初始化，则需要先出触发其初始化。</li>
</ol>
<h3 id="六、使用"><a href="#六、使用" class="headerlink" title="六、使用"></a>六、使用</h3><blockquote>
<p>当 JVM 完成初始化阶段之后，JVM 便开始从入口方法开始执行用户的程序代码</p>
</blockquote>
<h3 id="七、卸载"><a href="#七、卸载" class="headerlink" title="七、卸载"></a>七、卸载</h3><blockquote>
<p>当用户程序代码执行完毕后，JVM 便开始销毁创建的 Class 对象，最后负责运行的 JVM 也退出内存。</p>
</blockquote>
<h2 id="实战分析"><a href="#实战分析" class="headerlink" title="实战分析"></a>实战分析</h2><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello gxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Book()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;书的构造方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;price=&quot;</span> + price +<span class="string">&quot;,amount=&quot;</span> + amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;书的普通代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> price = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;书的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> amount = <span class="number">112</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>结果：</p>
<p>书的静态代码块</p>
<p> Hello gxx</p>
</blockquote>
<h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>触发初始化的第四种情况，先初始化包含main()方法的类。</p>
<p>在Java编译成字节码后，没有字节码的概念，只有  类初始化方法  和  对象初始化方法  。</p>
<p>==类初始化方法==：编译器会按照其出现顺序，收集<strong>类变量的赋值语句、静态代码块，最终组成类初始化方法</strong>。<strong>类初始化方法一般在类初始化的时候执行。</strong></p>
<p>上段代码中的类初始化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span></span><br><span class="line">   &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;书的静态代码块&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">int</span> amount = <span class="number">112</span>;</span><br></pre></td></tr></table></figure>

<p>==对象初始化方法==：编译器会按照其出现顺序，收集<strong>成员变量的赋值语句、普通代码块，最后收集构造函数的代码，最终组成对象初始化方法。对象初始化方法一般在实例化类对象的时候执行。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;书的普通代码块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> price = <span class="number">110</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;书的构造方法&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;price=&quot;</span> + price +<span class="string">&quot;,amount=&quot;</span> + amount);</span><br></pre></td></tr></table></figure>

<p>本例中没有执行对象初始化方法，因为没有对BOOK对象实例化。</p>
<h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grandpa</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爷爷在静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Grandpa</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爸爸在静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> factor = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是爸爸~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;儿子在静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是儿子~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitializationDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爸爸的岁数:&quot;</span> + Son.factor);	<span class="comment">//入口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果：</p>
<p>爷爷在静态代码块</p>
<p>爸爸在静态代码块 </p>
<p>爸爸的岁数:25</p>
</blockquote>
<p><strong>对于静态字段，只有直接定义这个字段的类才会被初始化（执行静态代码块）。</strong>所以没有<code>儿子在静态代码块中</code>.</p>
<h3 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h3><ul>
<li>首先程序到 main 方法这里，使用标准化输出 Son 类中的 factor 类成员变量，但是 Son 类中并没有定义这个类成员变量。于是往父类去找，我们在 Father 类中找到了对应的类成员变量，于是触发了 Father 的初始化。</li>
<li>但根据我们上面说到的初始化的 5 种情况中的第 3 种（当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化）。我们需要先初始化 Father 类的父类，也就是先初始化 Grandpa 类再初始化 Father 类。于是我们先初始化 Grandpa 类输出：「爷爷在静态代码块」，再初始化 Father 类输出：「爸爸在静态代码块」。</li>
<li>最后，所有父类都初始化完成之后，Son 类才能调用父类的静态变量，从而输出：「爸爸的岁数：25」。</li>
</ul>
<h3 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grandpa</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爷爷在静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Grandpa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是爷爷~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Grandpa</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爸爸在静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是爸爸~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;儿子在静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是儿子~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitializationDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Son(); 	<span class="comment">//入口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>结果：</p>
<p>爷爷在静态代码块 </p>
<p>爸爸在静态代码块 </p>
<p>儿子在静态代码块 </p>
<p>我是爷爷~ </p>
<p>我是爸爸~ </p>
<p>我是儿子~</p>
</blockquote>
<h3 id="分析：-2"><a href="#分析：-2" class="headerlink" title="分析："></a>分析：</h3><ul>
<li>首先在入口这里我们实例化一个 Son 对象，因此会触发 Son 类的初始化，而 Son 类的初始化又会带动 Father 、Grandpa 类的初始化，从而执行对应类中的静态代码块。因此会输出：「爷爷在静态代码块」、「爸爸在静态代码块」、「儿子在静态代码块」。</li>
<li><strong>当 Son 类完成初始化之后，便会调用 Son 类的构造方法，而 Son 类构造方法的调用同样会带动 Father、Grandpa 类构造方法的调用，最后会输出：「我是爷爷」、「我是爸爸」、「我是儿子~」。</strong></li>
</ul>
<h3 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        staticFunction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Book book = <span class="keyword">new</span> Book();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;书的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;书的普通代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Book()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;书的构造方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;price=&quot;</span> + price +<span class="string">&quot;,amount=&quot;</span> + amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;书的静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> price = <span class="number">110</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> amount = <span class="number">112</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析：-3"><a href="#分析：-3" class="headerlink" title="分析："></a>分析：</h3><p>按流程分析：</p>
<ul>
<li><p>首先，准备阶段，为类变量分配内存和初始化。此时，book被初始化为null，amount被初始化为0.</p>
</li>
<li><p>进入初始化之后，Book方法是程序入口，所以初始化Book类。<strong>（当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类）。</strong>即执行类构造器 。</p>
</li>
<li><p>JVM对Book类执行初始化首先是执行类构造器（按顺序收集类中所有<strong>静态代码块</strong>和<strong>类变量赋值语句</strong>就组成了类构造器 ），后执行对象的构造器（按顺序收集<strong>成员变量赋值和普通代码块</strong>，最后收集对象构造器，最终组成对象构造器 ）。</p>
</li>
</ul>
<p>类构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Book book = <span class="keyword">new</span> Book();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span></span><br><span class="line">   &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;书的静态代码块&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> amount = <span class="number">112</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>于是首先执行<code>static Book book = new Book();</code>这一条语句，这条语句又触发了类的实例化。于是 JVM 执行对象构造器 ，收集后的对象构造器 代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Book();</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;书的普通代码块&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> price = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"> Book()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;书的构造方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;price=&quot;</span> + price +<span class="string">&quot;,amount=&quot;</span> + amount);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>于是此时 price 赋予 110 的值，输出：「书的普通代码块」、「书的构造方法」。而此时 price 为 110 的值，而 amount 的赋值语句并未执行，所以只有在准备阶段赋予的零值，所以之后输出「price=110,amount=0」。</p>
<p>当类实例化完成之后，JVM 继续进行类构造器的初始化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Book book = <span class="keyword">new</span> Book();  <span class="comment">//完成类实例化</span></span><br><span class="line"><span class="keyword">static</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;书的静态代码块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> amount = <span class="number">112</span>;</span><br></pre></td></tr></table></figure>

<p>即输出：「书的静态代码块」，之后对 amount 赋予 112 的值。</p>
<ul>
<li>到这里，类的初始化已经完成，JVM 执行 main 方法的内容。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    staticFunction();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即输出：「书的静态方法」。</p>
<p>从上面几个例子可以看出，分析一个类的执行顺序大概可以按照如下步骤：</p>
<ul>
<li><strong>确定类变量的初始值。</strong>在类加载的准备阶段，JVM 会为类变量初始化零值，这时候类变量会有一个初始的零值。如果是被 final 修饰的类变量，则直接会被初始成用户想要的值。</li>
<li><strong>初始化入口方法。</strong>当进入类加载的初始化阶段后，JVM 会寻找整个 main 方法入口，从而初始化 main 方法所在的整个类。当需要对一个类进行初始化时，会首先初始化类构造器（），之后初始化对象构造器（）。</li>
<li><strong>初始化类构造器。</strong>JVM 会按顺序收集类变量的赋值语句、静态代码块，最终组成类构造器由 JVM 执行。</li>
<li><strong>初始化对象构造器。</strong>JVM 会按照收集成员变量的赋值语句、普通代码块，最后收集构造方法，将它们组成对象构造器，最终由 JVM 执行。</li>
</ul>
<p>如果在初始化 main 方法所在类的时候遇到了其他类的初始化，那么就先加载对应的类，加载完成之后返回。如此反复循环，最终返回 main 方法所在类。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>双亲委派机制</title>
    <url>/2021/10/04/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://www.cnblogs.com/goloving/p/14438785.html">双亲委派</a></p>
<p><a href="https://segmentfault.com/a/1190000037574626">反向委派</a></p>
<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>某个类加载器需要加载某个<code>.class</code>文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类。</p>
<p>Java虚拟机对class文件采用的是<strong>按需加载</strong>的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象，而且，加载某个类的class文件时，Java虚拟机采用的是<strong>双亲委派机制</strong>，即<strong>把请求交由父类处理</strong>，它是一种任务委派模式。</p>
<p>　　其工作原理：</p>
<p>（1）如果一个类加载器收到了类加载请求，它并不会自己先加载，而是把这个请求委托给父类的加载器去执行</p>
<p>（2）如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的引导类加载器；</p>
<p>（3）如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委派机制</p>
<p>（4）父类加载器一层一层往下分配任务，如果子类加载器能加载，则加载此类，如果将加载任务分配至系统类加载器也无法加载此类，则抛出异常</p>
<p>类加载器：</p>
<p><img src="https://img2020.cnblogs.com/blog/1158910/202102/1158910-20210223230534858-1901191651.png" alt="img"></p>
<p>其实还有一种类加载器，就是下面第4种。</p>
<p><strong>CustomClassLoader（用户自定义类加载器）</strong></p>
<p><code>　　java</code>编写，用户自定义的类加载器，可加载指定路径的<code>class</code>文件</p>
<h2 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h2><p><img src="https://img2020.cnblogs.com/blog/1158910/202102/1158910-20210223225901148-183547131.png" alt="img"></p>
<h2 id="为什么这么设计："><a href="#为什么这么设计：" class="headerlink" title="为什么这么设计："></a>为什么这么设计：</h2><p>1、防止重复加载同一个<code>.class</code>。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。<br>2、保证核心<code>.class</code>不能被篡改。通过委托方式，不会去篡改核心<code>.clas</code>，即使篡改也不会去加载，即使加载也不会是同一个<code>.class</code>对象了。不同的加载器加载同一个<code>.class</code>也不是同一个<code>Class</code>对象。这样保证了<code>Class</code>执行安全。</p>
<p>（1）避免类的重复加载</p>
<p>（2）保护程序安全，防止核心API被随意篡改</p>
<h2 id="反向委派机制"><a href="#反向委派机制" class="headerlink" title="反向委派机制"></a>反向委派机制</h2><p><strong>第三方包加载方式</strong></p>
<p>在Java应用中存在着很多服务提供者接口（Service Provider Interface，SPI），这些接口允许第三方为它们提供实现，如常见的 SPI 有 JDBC、JNDI等，这些 SPI 的接口属于 Java 核心库，一般存在rt.jar包中，由Bootstrap类加载器加载。而Bootstrap类加载器无法直接加载SPI的实现类，同时由于双亲委派模式的存在，Bootstrap类加载器也无法反向委托AppClassLoader加载器SPI的实现类。在这种情况下，我们就需要一种特殊的类加载器来加载第三方的类库，而线程上下文类加载器（双亲委派模型的破坏者）就是很好的选择。</p>
<p><img src="https://segmentfault.com/img/bVcHtgL" alt="image.png"></p>
<p>从图可知rt.jar核心包是有Bootstrap类加载器加载的，其内包含SPI核心接口类，由于SPI中的类经常需要调用外部实现类的方法，而jdbc.jar包含外部实现类(jdbc.jar存在于classpath路径)无法通过Bootstrap类加载器加载，因此只能委派线程上下文类加载器把jdbc.jar中的实现类加载到内存以便SPI相关类使用。显然这种线程上下文类加载器的加载方式破坏了“双亲委派模型”，它在执行过程中抛弃双亲委派加载链模式，使程序可以逆向使用类加载器，当然这也使得Java类加载器变得更加灵活。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot学习笔记</title>
    <url>/2021/09/14/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p><strong>项目创建方式一：</strong>使用Spring Initializr 的 Web页面创建项目</p>
<p>1、打开 <a href="https://start.spring.io/">https://start.spring.io/</a></p>
<p>2、填写项目信息</p>
<p>3、点击”Generate Project“按钮生成项目；下载此项目</p>
<p>4、解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p>
<p>5、如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。</p>
<p><strong>项目创建方式二：</strong>使用 IDEA 直接创建项目</p>
<p>1、创建一个新项目</p>
<p>2、选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p>
<p>3、填写项目信息</p>
<p>4、选择初始化的组件（初学勾选 Web 即可）</p>
<p>5、填写项目路径</p>
<p>6、等待项目构建成功</p>
<p><strong>项目结构分析：</strong></p>
<p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件。</p>
<p>1、程序的主启动类</p>
<p>2、一个 application.properties 配置文件</p>
<p>3、一个 测试类</p>
<p>4、一个 pom.xml</p>
<h2 id="原理初探"><a href="#原理初探" class="headerlink" title="原理初探"></a>原理初探</h2><p>自动配置:</p>
<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p><strong>父依赖</strong></p>
<p>其中它主要是依赖一个父项目，主要是管理项目的资源过滤及插件！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>          		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点进去，发现还有一个父依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心；</p>
<p><strong>以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了；</strong></p>
<h3 id="启动器-spring-boot-starter"><a href="#启动器-spring-boot-starter" class="headerlink" title="启动器 spring-boot-starter"></a>启动器 spring-boot-starter</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>启动器，就是Springboot的启动场景</p>
</li>
<li><p>比如spring-boot-starter-web, 就会帮我们自动导入web环境所有的依赖！</p>
</li>
<li><p>springboot会将所有的功能场景都变成启动器</p>
</li>
<li><p>我们要用什么功能，就只需要找到对应的启动器就可以了 <strong>starter</strong>   </p>
</li>
</ul>
<h3 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//@SpringBootApplication 来标注一个主程序类</span><br><span class="line">//说明这是一个Spring Boot应用</span><br><span class="line">//本身就是Spring的一个组件</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //以为是启动了一个方法，没想到启动了一个服务</span><br><span class="line">      SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><ol>
<li><strong>@SpringBootApplication：</strong> </li>
</ol>
<p>作用：标注在某个类上说明这个类是SpringBoot的主配置类 ，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>
<p>进入注解：可以看到上面还有很多其他注解！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><strong>@ComponentScan</strong>：</p>
<p>这个注解在Spring中很重要 ,它对应XML配置中的元素。</p>
<p>作用：自动扫描并加载符合条件的组件或者bean ， 将这个bean定义加载到IOC容器中</p>
</li>
<li><p><strong>@SpringBootConfiguration:</strong></p>
</li>
</ol>
<p>SpringBoot的配置类 ，标注在某个类上 ， 表示这是一个SpringBoot的配置类；</p>
<p>继续进去这个注解查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点进去得到下面的 @Component</span></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;&#125; </span><br><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>这里的 @Configuration，说明这是一个配置类 ，配置类就是对应Spring的xml 配置文件；</p>
<p>里面的 @Component 这就说明，启动类本身也是Spring中的一个组件而已，负责启动应用！</p>
<p>我们回到 SpringBootApplication 注解中继续看。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>@EnableAutoConfiguration</strong></li>
</ol>
<p><strong>@EnableAutoConfiguration ：开启自动配置功能</strong></p>
<p>以前我们需要自己配置的东西，而现在SpringBoot可以自动帮我们配置 ；@EnableAutoConfiguration告诉SpringBoot开启自动配置功能，这样自动配置才能生效；</p>
<p>点进注解接续查看：</p>
<p><strong>@AutoConfigurationPackage ：自动配置包</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@import</strong> ：Spring底层注解@import ， 给容器中导入一个组件</p>
<p>Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器 ；</p>
<p>这个分析完了，退到上一步，继续看</p>
<p><strong>@Import({AutoConfigurationImportSelector.class}) ：给容器导入组件 ；</strong></p>
<p>AutoConfigurationImportSelector ：自动配置导入选择器，那么它会导入哪些组件的选择器呢？我们点击去这个类看源码：</p>
<p>1、这个类中有一个这样的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得候选的配置</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里的getSpringFactoriesLoaderFactoryClass（）方法</span></span><br><span class="line">    <span class="comment">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span></span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、这个方法又调用了 SpringFactoriesLoader 类的静态方法！我们进入SpringFactoriesLoader类loadFactoryNames() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    String factoryClassName = factoryClass.getName();</span><br><span class="line">    <span class="comment">//这里它又调用了 loadSpringFactories 方法</span></span><br><span class="line">    <span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、我们继续点击查看 loadSpringFactories 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="comment">//获得classLoader ， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//去获取一个资源 &quot;META-INF/spring.factories&quot;</span></span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader != <span class="keyword">null</span> ? classLoader.getResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>) : ClassLoader.getSystemResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>);</span><br><span class="line">            LinkedMultiValueMap result = <span class="keyword">new</span> LinkedMultiValueMap();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将读取到的资源遍历，封装成为一个Properties</span></span><br><span class="line">            <span class="keyword">while</span>(urls.hasMoreElements()) &#123;</span><br><span class="line">                URL url = (URL)urls.nextElement();</span><br><span class="line">                UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">                Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">                Iterator var6 = properties.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                    Entry&lt;?, ?&gt; entry = (Entry)var6.next();</span><br><span class="line">                    String factoryClassName = ((String)entry.getKey()).trim();</span><br><span class="line">                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());</span><br><span class="line">                    <span class="keyword">int</span> var10 = var9.length;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> var11 = <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">                        String factoryName = var9[var11];</span><br><span class="line">                        result.add(factoryClassName, factoryName.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cache.put(classLoader, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>, var13);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、发现一个多次出现的文件：spring.factories，全局搜索它</p>
<ol start="5">
<li><strong>spring.factories</strong></li>
</ol>
<p>我们根据源头打开spring.factories ， 看到了很多自动配置的文件；这就是自动配置根源所在！</p>
<p><strong>WebMvcAutoConfiguration</strong></p>
<p>我们在上面的自动配置类随便找一个打开看看，比如 ：WebMvcAutoConfiguration</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109163254088.png" alt="image-20210805113454343"></p>
<p><strong>所以，自动配置真正实现是从classpath中搜寻所有的META-INF/spring.factories配置文件 ，并将其中对应的 org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 @Configuration的JavaConfig形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容器中。</strong></p>
<p><strong>结论：</strong></p>
<ol>
<li>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值</li>
<li>将这些值作为自动配置类导入容器 ， 自动配置类就生效,帮我们进行自动配置工作；</li>
<li>整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中；</li>
<li>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 ；</li>
<li>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</li>
</ol>
<h4 id="不简单的方法"><a href="#不简单的方法" class="headerlink" title="不简单的方法"></a>不简单的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>SpringApplication.run分析</strong></p>
<p>分析该方法主要分两部分，一部分是SpringApplication的实例化，二是run方法的执行；</p>
<h5 id="SpringApplication的实例化"><a href="#SpringApplication的实例化" class="headerlink" title="SpringApplication的实例化"></a>SpringApplication的实例化</h5><p><strong>这个类主要做了以下四件事情：</strong></p>
<p>1、推断应用的类型是普通的项目还是Web项目</p>
<p>2、查找并加载所有可用初始化器 ， 设置到initializers属性中</p>
<p>3、找出所有的应用程序监听器，设置到listeners属性中</p>
<p>4、推断并设置main方法的定义类，找到运行的主类</p>
<p>查看构造器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="keyword">this</span>.setInitializers(<span class="keyword">this</span>.getSpringFactoriesInstances();</span><br><span class="line">    <span class="keyword">this</span>.setListeners(<span class="keyword">this</span>.getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = <span class="keyword">this</span>.deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习笔记</title>
    <url>/2021/07/26/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>待更新</strong></p>
<h2 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h2><h3 id="Servlet原理"><a href="#Servlet原理" class="headerlink" title="Servlet原理"></a>Servlet原理</h3><p> <img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210712172226575.png" alt="image-20210712172226575"></p>
<h3 id="MVC三层架构"><a href="#MVC三层架构" class="headerlink" title="MVC三层架构"></a>MVC三层架构</h3><p><strong>model view controller</strong></p>
<ol>
<li>早期开发架构</li>
</ol>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210712184552393.png" alt="image-20210712184552393"></p>
<p>用户访问控制层，控制层就可以直接操作数库；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">servlrt--&gt;CRUD--&gt;database</span><br><span class="line">弊端：臃肿，难以维护</span><br><span class="line">    </span><br><span class="line">架构：没有什么是加一层解决不了的</span><br><span class="line">eg. JDBC</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>MVC架构</strong></li>
</ol>
<p> <img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210712190733391.png" alt="image-20210712190733391"></p>
<p>Model：</p>
<ul>
<li>业务处理：业务逻辑（Service）</li>
<li>数据持久化：CRUD （Dao）</li>
</ul>
<p>View：</p>
<ul>
<li>展示数据</li>
<li>提供链接发起Servlet请求</li>
</ul>
<p>Controller：（servlet）</p>
<ul>
<li>接收用户的请求：（req:请求参数，Session信息…）</li>
<li>交给业务层处理对应的代码</li>
<li>控制视图的跳转</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">登录--&gt;接收用户的登录请求--&gt;处理用户的请求（获取登录的参数，username，password）--&gt;交给业务层处理登陆业务（判断用户名密码是否正确：事务）--&gt;DAO层查询用户名密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure>

<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h2 id="导入配置文件"><a href="#导入配置文件" class="headerlink" title="导入配置文件"></a>导入配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Spring优良特性"><a href="#Spring优良特性" class="headerlink" title="Spring优良特性"></a>Spring优良特性</h2><blockquote>
<ul>
<li><p><strong>非侵入式</strong>：基于Spring开发的应用中的对象可以不依赖于Spring的API</p>
</li>
<li><p><strong>控制反转</strong>：IOC——Inversion of Control，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是由给了 Spring 框架。</p>
</li>
<li><p><strong>依赖注入</strong>：DI——Dependency Injection，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。</p>
</li>
<li><p><strong>面向切面编程</strong>：Aspect Oriented Programming——AOP</p>
</li>
<li><p><strong>容器</strong>：Spring 是一个容器，因为它包含并且管理应用对象的生命周期</p>
</li>
<li><p><strong>组件化</strong>：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</p>
</li>
<li><p><strong>一站式</strong>：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表述层的 SpringMVC 和持久层的 Spring JDBC）</p>
</li>
</ul>
</blockquote>
<p><strong>总结：</strong> <strong>Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的容器（框架）！</strong></p>
<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p><strong>控制反转：通常new一个实例，控制权由程序员控制，而”控制反转”是指new实例工作不由程序员来做而是交给Spring容器来做</strong>。</p>
<p><strong>配置文件：beans.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.geekpig.pojo.hello&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--给对象中的属性设置一个值--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h3><p>多种，最常用为直接用参数名设置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.geekpig.pojo.user&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">&quot;name&quot;</span> <span class="attr">value</span> = <span class="string">&quot;gxx&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：在配置文件加载的时候，**容器(ApplicationContext)**中管理的对象就已经被初始化了！</p>
<h2 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h2><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">User user = (User) context.getBean(&quot;userNew&quot;);</span><br></pre></td></tr></table></figure>

<h3 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   id： bean 的唯一标识符，也就相当于对象名</span></span><br><span class="line"><span class="comment">   class： bean 对象所对应的全限定名： 包名 + 类型</span></span><br><span class="line"><span class="comment">   name: 也就是起别名 而且name可以取多个别名</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;edu.cqupt.pojo.UserT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userT2，u2,u3,u4&quot;</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shilin&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>可以将多个配置文件，导入合并为一个</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//在ApplicationContext.xml里</span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans3.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="依赖注入（Dependency-Injection）"><a href="#依赖注入（Dependency-Injection）" class="headerlink" title="依赖注入（Dependency Injection）"></a>依赖注入（Dependency Injection）</h2><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><h3 id="set方式注入"><a href="#set方式注入" class="headerlink" title="set方式注入"></a>set方式注入</h3><ul>
<li>依赖：bean对象的创建依赖于容器！</li>
<li>注入：bean对象的所有属性，由容器来注入！</li>
</ul>
<h4 id="普通注入"><a href="#普通注入" class="headerlink" title="普通注入"></a>普通注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;edu.cqupt.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shi_lin&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Beans注入"><a href="#Beans注入" class="headerlink" title="Beans注入"></a>Beans注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;edu.cqupt.pojo.Addresss&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重庆&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--Bean注入： ref--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addresss&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="数组-amp-list-amp-map-amp-set注入"><a href="#数组-amp-list-amp-map-amp-set注入" class="headerlink" title="数组&amp;list&amp;map&amp;set注入"></a>数组&amp;list&amp;map&amp;set注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数组注入： array--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java 程序设计<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>Python 从入门到精通<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>MYSQL 必知必会<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--List 注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>编程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>听音乐<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Map 注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;学生卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234567&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123453232367&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3332434343434343&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Set 注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Null注入"><a href="#Null注入" class="headerlink" title="Null注入"></a>Null注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Null 注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Properties注入"><a href="#Properties注入" class="headerlink" title="Properties注入"></a>Properties注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--properties 注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/mydb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="C和P命名注入"><a href="#C和P命名注入" class="headerlink" title="C和P命名注入"></a>C和P命名注入</h3><p> 注意：<strong>p命名和c命名不能直接使用，需要导入xml约束。</strong></p>
<h4 id="P命名空间注入"><a href="#P命名空间注入" class="headerlink" title="P命名空间注入"></a>P命名空间注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;edu.cqupt.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;shi-lin&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="C命名空间注入"><a href="#C命名空间注入" class="headerlink" title="C命名空间注入"></a>C命名空间注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;edu.cqupt.pojo.User&quot;</span> <span class="attr">c:name</span> = <span class="string">&quot;shi-lin2&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h2><ul>
<li><p>自动装配是Spring满足bean依赖的一种方式！</p>
</li>
<li><p>Spring会在上下文中自动寻找，并自动给bean装备属性</p>
</li>
<li><p>在Spring中有三种装配的方式</p>
<ul>
<li>在xml中显示的装配</li>
<li>在java中显示配置</li>
<li><strong>隐式的自动装配bean</strong></li>
</ul>
</li>
</ul>
<h3 id="ByName"><a href="#ByName" class="headerlink" title="ByName"></a>ByName</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- byNmae 会自动在容器上下文中查找和自己对象set方法后面的值对应的id --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;edu.cqupt.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shi-lin&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;property name=&quot;cat&quot; ref=&quot;cat&quot;/&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;property name=&quot;dog&quot; ref=&quot;dog&quot;/&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ByType"><a href="#ByType" class="headerlink" title="ByType"></a>ByType</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- byName 会自动在容器上下文中查找和自己对象set方法后面的值对应的id --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- byType 会自动在容器上下文中查找和自己对象属性类型相同的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;edu.cqupt.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shi-lin&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;property name=&quot;cat&quot; ref=&quot;cat&quot;/&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;property name=&quot;dog&quot; ref=&quot;dog&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>小结:</strong><ul>
<li>byName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值唯一</li>
<li>byType的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</li>
</ul>
</li>
</ul>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul>
<li>JDK 1,5 开始支持注解、 Spring 2.5 开始支持注解</li>
<li>要使用注解<ul>
<li>导入约束。 contex约束</li>
<li>配置注解的支持<code>&lt;context:ananotation-config/&gt;</code></li>
</ul>
</li>
</ul>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><p>直接在属性上使用即可，也可以在set方式上使用，使用AutoWired我们可以不用编写Set方法了，前提是这个自动的属性在IOC（Spring）容器中存在，且符合名字byName</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// required = false 说明这个对象可以为null，否则不允许为空</span></span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Autowired源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>如果自动装配的环境比较复杂，自动装配无法通过一个注解【@Autuowired】完成的时候，我们可以使用@Qualifier(value = “xxx”)去配合@Autuowired使用，指定一个唯一的bean注入使用。</li>
</ul>
<h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><p>相当于@Autiwired和@Qualifier的组合，功能强大，是Java提供的类库中的</p>
<h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><p>@Resource 和@Autowired的区别：</p>
<ul>
<li><p>都是用来自动装配的，都可以放在属性字段上</p>
</li>
<li><p><strong>@Autowired 通过bytype的方式实现，而且必须要求这个对象存在【常用】</strong></p>
</li>
<li><p><strong>@Resource 默认通过byname的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错。</strong></p>
</li>
</ul>
<h4 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h4><p>需要导入aop的依赖包，此外还要导入context约束，增加注解的支持。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span> = <span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;edu.cqupt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>bean</li>
</ul>
<p>@<strong>Component</strong>: 组件，放在类上，说明这个类被Spring管理了，就是bean!</p>
<p>等价于：<code>  &lt;bean id=&quot;user&quot; class=&quot;edu.cqupt.pojo.User&quot;/&gt;</code></p>
<ul>
<li>属性如何注入</li>
</ul>
<p><strong>@Value</strong>(“shi-lin”)</p>
<p> 等价于： <code>&lt; property name =&quot;name&quot; value =&quot;shi-lin&quot; /&gt;</code></p>
<ul>
<li><p>衍生的注解</p>
</li>
<li><p>@<strong>Component</strong>有几个衍生的注解，我们在web开发中，会安装mvc三层架构分层。</p>
<ul>
<li>dao【@<strong>Repository</strong>】</li>
<li>service【@<strong>Service</strong>】</li>
<li>controller【@<strong>Controller</strong>】</li>
</ul>
<p>这四个注解功能都是一样的，都是代表将某个类注册到Spring中，转配Bean</p>
</li>
<li><p>自动装配</p>
<ul>
<li>@<strong>Autowired:</strong> 自动装配通过类型，名字– 如果 若果Autowired不能唯一自动转配上属性，则需要通过@<strong>Qualified(value=”xxx”)</strong></li>
<li><strong>@Nullable:</strong> 字段标记了这个注解，说明这个字段可以为null</li>
<li><strong>@Resource:</strong> 自动装配通过名字，类型</li>
</ul>
</li>
<li><p>作用域</p>
<ul>
<li>@<strong>Scope</strong>(<strong>“singleton”</strong>)单例模式</li>
<li>@<strong>Scope</strong>(<strong>“prototype”</strong>)原型模式</li>
</ul>
</li>
<li><p>小结</p>
<ul>
<li>xml 与 注解：<ul>
<li><strong>xml</strong>：更加万能，适用于任何场合、维护简单方便</li>
<li><strong>注解</strong>： 不是自己的类，使用不了，维护相对复杂</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>最佳实践方式：</p>
<ul>
<li><p>xml用来管理Bean</p>
</li>
<li><p>注解只用于属性注入</p>
</li>
<li><p>在使用的过程中，<strong>只需要注意一个问题，必须让注解生效，开启注解支持</strong></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;comm.geekpig&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Java-Config实现配置"><a href="#Java-Config实现配置" class="headerlink" title="Java Config实现配置"></a>Java Config实现配置</h2><p>我们现在要完全不使用Spring的.xml配置了，全权交给Java来做！</p>
<p>JavaConfig是Spring的一个子项目，在Spring4之后，它变成了核心功能</p>
<p><strong>实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">// 说明这个类被Spring接管了，注册到了容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Value(&quot;shi-lin&quot;)</span>   <span class="comment">// 属性注入值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个也会被Spring容器托管，注册到容器中，因为他本来就是一个@Component</span></span><br><span class="line"><span class="comment">// @Configuration代表这就是一个配置类，就和之前的beans.xml一样</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;edu.cqupt.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(MyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 注册一个bean，就相当于之前写的一个bean标签</span></span><br><span class="line">    <span class="comment">// 这个方法的名字就相当于bean标签中的id属性，方法的返回值就相当bean标签的class</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> User();     <span class="comment">//就是返回要注入的bean对象。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig2</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果完全使用了配置类方式去做，我们就只能通过AnnotationConfigApplicationContext上下文来获取容器，通过配置类的class对象加载！</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);<span class="comment">//加载配置类</span></span><br><span class="line">        User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这种纯Java的配置方式，在SpringBoot中随处可见！</strong></p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>Spring AOP 的底层！</p>
<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>代码步骤</p>
<ul>
<li><p>接口</p>
</li>
<li><p>真实角色</p>
</li>
<li><p>代理角色</p>
</li>
<li><p>客户端访问代理角色</p>
</li>
</ul>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3>]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>狂神说java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习笔记</title>
    <url>/2021/07/20/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>待更新</strong></p>
<h2 id="我们为什么要学习SpringMVC呢"><a href="#我们为什么要学习SpringMVC呢" class="headerlink" title="我们为什么要学习SpringMVC呢?"></a><strong>我们为什么要学习SpringMVC呢?</strong></h2><p>Spring MVC的特点：</p>
<ol>
<li>轻量级，简单易学</li>
<li>高效 , 基于请求响应的MVC框架</li>
<li>与Spring兼容性好，无缝结合</li>
<li>约定优于配置</li>
<li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li>
<li>简洁灵活</li>
</ol>
<p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p>
<p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p>
<p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p>
<h2 id="中心控制器"><a href="#中心控制器" class="headerlink" title="中心控制器"></a>中心控制器</h2><p>Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p>
<p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/kuangstudy00854e07-7eac-476c-a9dd-dcebb7ac0b89.png" alt="img"></p>
<h2 id="SpringMVC执行原理"><a href="#SpringMVC执行原理" class="headerlink" title="SpringMVC执行原理"></a>SpringMVC执行原理</h2><p><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/04/13/kuangstudy0214fd0a-0df0-4910-a467-5b7d61712868.png" alt="img"></p>
<p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p>
<h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p>
<p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p>
<p><strong>如上url拆分成三部分：</strong></p>
<p><a href="http://localhost:8080服务器域名/">http://localhost:8080    服务器域名</a></p>
<p>SpringMVC  部署在服务器上的web站点</p>
<p>hello             表示控制器</p>
<p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p>
<ol>
<li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</li>
<li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</li>
<li>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</li>
<li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li>
<li>Handler让具体的Controller执行。</li>
<li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</li>
<li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li>
<li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</li>
<li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li>
<li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li>
<li>最终视图呈现给用户。</li>
</ol>
<h2 id="HelloSpringMVC"><a href="#HelloSpringMVC" class="headerlink" title="HelloSpringMVC"></a>HelloSpringMVC</h2><h3 id="配置版【原理讲解】"><a href="#配置版【原理讲解】" class="headerlink" title="配置版【原理讲解】"></a>配置版【原理讲解】</h3><ol>
<li>导入了SpringMVC 的依赖！</li>
<li>配置web.xml ， 注册DispatcherServlet</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml : [servletname]-servlet.xml</p>
<p>说明，这里的名称要求是按照官方来的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加 处理映射器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加 处理器适配器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加 视图解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.geekpig.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将自己的类交给SpringIOC容器，注册bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.geekpig.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;zf-gxx&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>配置Tomcat 启动测试！</p>
<p><strong>PS1.启动Tomcat时乱码解决方案：</strong></p>
<p>找到Tomcat目录下conf文件夹中的logging.properties文件，打开logging.properties文件，找到文件中的java.util.logging.ConsoleHandler.encoding = UTF-8，将其中的UTF-8改为GBK，保存后重启Tomcat服务，启动后就会看到刚才的乱码已经转换过来了。<br><strong>PS2.IDEA配置Tomcat</strong></p>
<ol>
<li>打开File-Settings菜单–&gt;选择Application Servers，右侧点击添加按钮选择”Tomcat Server”（idea支持很多种webserver可以很方便的与外部服务器集成）–&gt; Tomcat Home目录直接选择自己下载的Tomcat解压目录即可</li>
<li>需要在运行程序之前先配置 RUN/DEBUG configer</li>
<li>要想运行网站需要配置deployment，类似ASP.NET中的网站发布设置，为什么需要设置呢，Tomcat是运行装idea外部的，只有发布到tomcat的网站目录才能运行web程序，这里属于自动发布到Tomcat目录里，然后才发送tomcat启动命令，就实现了自动启动web程序的功能。这里选择的发布文件格式为“Artifact”.全部保存好，再运行程序即可。</li>
</ol>
<p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p>
<ol>
<li>查看控制台输出，看一下是不是缺少了什么jar包。</li>
<li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li>
<li>重启Tomcat 即可解决！</li>
</ol>
<h3 id="注解版【重点】"><a href="#注解版【重点】" class="headerlink" title="注解版【重点】"></a>注解版【重点】</h3>]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>狂神说java</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记</title>
    <url>/2021/07/16/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>待更新</strong></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210714234350122.png" alt="image-20210714234350122"></p>
<p>mybatis太可爱啦！</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1598318662059-e38798fc-6ff4-4b82-92fe-ebd896b71f43.png" alt="image.png"></p>
<p>需要jar包的支持：</p>
<ul>
<li><p>java.sql</p>
</li>
<li><p>javax.sql</p>
</li>
<li><p>mysql-connector-java…  连接驱动（必须要导入）</p>
</li>
</ul>
<p><strong>JDBC 固定步骤：</strong></p>
<ol>
<li>加载驱动</li>
<li>连接数据库,代表数据库</li>
<li>向数据库发送SQL的对象Statement : CRUD</li>
<li>编写SQL （根据业务，不同的SQL）</li>
<li>执行SQL</li>
<li>关闭连接</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJdbc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">//4.编写SQL</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line">        <span class="comment">//5.执行查询SQL，返回一个 ResultSet  ： 结果集</span></span><br><span class="line">        ResultSet rs = statement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;password=&quot;</span>+rs.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+rs.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birthday=&quot;</span>+rs.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">        rs.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>预编译SQL</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.编写SQL</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.预编译</span></span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//给第一个占位符？ 的值赋值为1；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;狂神说Java&quot;</span>);<span class="comment">//给第二个占位符？ 的值赋值为狂神说Java；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);<span class="comment">//给第三个占位符？ 的值赋值为123456；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">4</span>,<span class="string">&quot;24736743@qq.com&quot;</span>);<span class="comment">//给第四个占位符？ 的值赋值为1；</span></span><br><span class="line">        preparedStatement.setDate(<span class="number">5</span>,<span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime()));<span class="comment">//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；</span></span><br><span class="line">        <span class="comment">//5.执行SQL</span></span><br><span class="line">        <span class="keyword">int</span> i = preparedStatement.executeUpdate();</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功@&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>事务</strong></p>
<p>要么都成功，要么都失败！</p>
<p>ACID原则：保证数据的安全。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开启事务</span><br><span class="line">事务提交  commit()</span><br><span class="line">事务回滚  rollback()</span><br><span class="line">关闭事务</span><br><span class="line"></span><br><span class="line">转账：</span><br><span class="line">A:1000</span><br><span class="line">B:1000</span><br><span class="line">    </span><br><span class="line">A(900)   --100--&gt;   B(1100)</span><br></pre></td></tr></table></figure>

<h3 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h3><p><strong>Junit单元测试</strong></p>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>简单使用</p>
<p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>文件上传注意事项 </p>
<ul>
<li><p>1.为保证服务器安全，上传文件应该放在外界无法直接访问你得目录下，比如放在WEB-INF目录下</p>
</li>
<li><p>2.为防止文件覆盖现象的发生，要为文件产生一个唯一的文件名   （添加时间戳 或者 uuid 或者MD5 或者位运算）</p>
</li>
<li><p>3.要限制上传文件的大小</p>
</li>
<li><p>4.可以限制上传文件的类型，在收到上传文件名时，要判断后缀名是否合格。</p>
</li>
</ul>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
<li>Mybatis官方文档 : <a href="http://www.mybatis.org/mybatis-3/zh/index.html">http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></li>
</ul>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p>
<ul>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>
</ul>
<p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li>
<li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li>
</ul>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p><strong>什么是持久层？</strong></p>
<ul>
<li><p>完成持久化工作的代码块 . —-&gt; dao层 【DAO (Data Access Object) 数据访问对象】</p>
</li>
<li><p>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</p>
</li>
<li><p>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专注于数据持久化逻辑的实现.</p>
</li>
<li><p>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。【说白了就是用来操作数据库存在的！】</p>
</li>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等… , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) –&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
</ul>
<h3 id="Mybatis的优点"><a href="#Mybatis的优点" class="headerlink" title="Mybatis的优点"></a>Mybatis的优点</h3><ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>…….</li>
</ul>
<h2 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h2><p>创建环境</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis`;</span><br><span class="line"></span><br><span class="line">USE `mybatis`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`pwd` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `<span class="keyword">user</span>`(`id`,`name`,`pwd`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;狂神&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;abcdef&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;987654&#x27;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>狂神说java</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2021/06/18/Maven/</url>
    <content><![CDATA[<p><strong>待更新</strong></p>
<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML 格式</p>
<p>可扩展标记语言 (XML) 是一种结构化数据交换语言。XML 不是一种固定的文件格式，而是一种用于定义协定格式的语言，以方便组成员交换数据。许多个人、组织和公司都使用 XML 传输产品信息、事务、清单数据以及其他业务数据。</p>
<h2 id="maven-pom"><a href="#maven-pom" class="headerlink" title="maven pom"></a>maven pom</h2><p>执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。</p>
<p>POM(project object model) 中可以指定以下配置：</p>
<ul>
<li>项目依赖</li>
<li>插件</li>
<li>执行目标</li>
<li>项目构建 profile</li>
<li>项目版本</li>
<li>项目开发者列表</li>
<li>相关邮件列表信息</li>
</ul>
<p>在创建 POM 之前，我们首先需要描述项目组 (groupId), 项目的唯一ID。</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span> = <span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span> = <span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span> = <span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.companyname.project-group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。</p>
<h2 id="Maven-构建生命周期"><a href="#Maven-构建生命周期" class="headerlink" title="Maven 构建生命周期"></a>Maven 构建生命周期</h2><p>一个典型的 Maven 构建（build）生命周期是由以下几个阶段的序列组成的：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/maven-package-build-phase.png" alt="img"></p>
<table>
<thead>
<tr>
<th align="left">阶段</th>
<th align="left">处理</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">验证 validate</td>
<td align="left">验证项目</td>
<td align="left">验证项目是否正确且所有必须信息是可用的</td>
</tr>
<tr>
<td align="left">编译 compile</td>
<td align="left">执行编译</td>
<td align="left">源代码编译在此阶段完成</td>
</tr>
<tr>
<td align="left">测试 Test</td>
<td align="left">测试</td>
<td align="left">使用适当的单元测试框架（例如JUnit）运行测试。</td>
</tr>
<tr>
<td align="left">包装 package</td>
<td align="left">打包</td>
<td align="left">创建JAR/WAR包如在 pom.xml 中定义提及的包</td>
</tr>
<tr>
<td align="left">检查 verify</td>
<td align="left">检查</td>
<td align="left">对集成测试的结果进行检查，以保证质量达标</td>
</tr>
<tr>
<td align="left">安装 install</td>
<td align="left">安装</td>
<td align="left">安装打包的项目到本地仓库，以供其他项目使用</td>
</tr>
<tr>
<td align="left">部署 deploy</td>
<td align="left">部署</td>
<td align="left">拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程</td>
</tr>
</tbody></table>
<p>为了完成 default 生命周期，这些阶段（包括其他未在上面罗列的生命周期阶段）将被按顺序地执行。</p>
<p>Maven 有以下三个标准的生命周期：</p>
<ul>
<li><strong>clean</strong>：项目清理的处理</li>
<li>**default(或 build)**：项目部署的处理</li>
<li><strong>site</strong>：项目站点文档创建的处理</li>
</ul>
<h3 id="Clean-生命周期"><a href="#Clean-生命周期" class="headerlink" title="Clean 生命周期"></a>Clean 生命周期</h3><p>当我们执行 mvn post-clean 命令时，Maven 调用 clean 生命周期，它包含以下阶段：</p>
<ul>
<li>pre-clean：执行一些需要在clean之前完成的工作</li>
<li>clean：移除所有上一次构建生成的文件</li>
<li>post-clean：执行一些需要在clean之后立刻完成的工作</li>
</ul>
<p>mvn clean 中的 clean 就是上面的 clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，如果执行 mvn clean 将运行以下两个生命周期阶段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pre-clean, clean</span><br></pre></td></tr></table></figure>

<p>如果我们运行 mvn post-clean ，则运行以下三个生命周期阶段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pre-clean, clean, post-clean</span><br></pre></td></tr></table></figure>

<h3 id="Default-Build-生命周期"><a href="#Default-Build-生命周期" class="headerlink" title="Default (Build) 生命周期"></a>Default (Build) 生命周期</h3><p>这是 Maven 的主要生命周期，被用于构建应用，包括下面的 23 个阶段：</p>
<table>
<thead>
<tr>
<th align="left">生命周期阶段</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">validate（校验）</td>
<td align="left">校验项目是否正确并且所有必要的信息可以完成项目的构建过程。</td>
</tr>
<tr>
<td align="left">initialize（初始化）</td>
<td align="left">初始化构建状态，比如设置属性值。</td>
</tr>
<tr>
<td align="left">generate-sources（生成源代码）</td>
<td align="left">生成包含在编译阶段中的任何源代码。</td>
</tr>
<tr>
<td align="left">process-sources（处理源代码）</td>
<td align="left">处理源代码，比如说，过滤任意值。</td>
</tr>
<tr>
<td align="left">generate-resources（生成资源文件）</td>
<td align="left">生成将会包含在项目包中的资源文件。</td>
</tr>
<tr>
<td align="left">process-resources （处理资源文件）</td>
<td align="left">复制和处理资源到目标目录，为打包阶段最好准备。</td>
</tr>
<tr>
<td align="left">compile（编译）</td>
<td align="left">编译项目的源代码。</td>
</tr>
<tr>
<td align="left">process-classes（处理类文件）</td>
<td align="left">处理编译生成的文件，比如说对Java class文件做字节码改善优化。</td>
</tr>
<tr>
<td align="left">generate-test-sources（生成测试源代码）</td>
<td align="left">生成包含在编译阶段中的任何测试源代码。</td>
</tr>
<tr>
<td align="left">process-test-sources（处理测试源代码）</td>
<td align="left">处理测试源代码，比如说，过滤任意值。</td>
</tr>
<tr>
<td align="left">generate-test-resources（生成测试资源文件）</td>
<td align="left">为测试创建资源文件。</td>
</tr>
<tr>
<td align="left">process-test-resources（处理测试资源文件）</td>
<td align="left">复制和处理测试资源到目标目录。</td>
</tr>
<tr>
<td align="left">test-compile（编译测试源码）</td>
<td align="left">编译测试源代码到测试目标目录.</td>
</tr>
<tr>
<td align="left">process-test-classes（处理测试类文件）</td>
<td align="left">处理测试源码编译生成的文件。</td>
</tr>
<tr>
<td align="left">test（测试）</td>
<td align="left">使用合适的单元测试框架运行测试（Juint是其中之一）。</td>
</tr>
<tr>
<td align="left">prepare-package（准备打包）</td>
<td align="left">在实际打包之前，执行任何的必要的操作为打包做准备。</td>
</tr>
<tr>
<td align="left">package（打包）</td>
<td align="left">将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件。</td>
</tr>
<tr>
<td align="left">pre-integration-test（集成测试前）</td>
<td align="left">在执行集成测试前进行必要的动作。比如说，搭建需要的环境。</td>
</tr>
<tr>
<td align="left">integration-test（集成测试）</td>
<td align="left">处理和部署项目到可以运行集成测试环境中。</td>
</tr>
<tr>
<td align="left">post-integration-test（集成测试后）</td>
<td align="left">在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。</td>
</tr>
<tr>
<td align="left">verify （验证）</td>
<td align="left">运行任意的检查来验证项目包有效且达到质量标准。</td>
</tr>
<tr>
<td align="left">install（安装）</td>
<td align="left">安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。</td>
</tr>
<tr>
<td align="left">deploy（部署）</td>
<td align="left">将最终的项目包复制到远程仓库中与其他开发者和项目共享。</td>
</tr>
</tbody></table>
<p>有一些与 Maven 生命周期相关的重要概念需要说明：</p>
<p><strong>当一个阶段通过 Maven 命令调用时，例如 mvn compile，只有该阶段之前以及包括该阶段在内的所有阶段会被执行。</strong></p>
<p>不同的 maven 目标将根据打包的类型（JAR / WAR / EAR），被绑定到不同的 Maven 生命周期阶段。Site 生命周期</p>
<p>Maven Site 插件一般用来创建新的报告文档、部署站点等。</p>
<ul>
<li>pre-site：执行一些需要在生成站点文档之前完成的工作</li>
<li>site：生成项目的站点文档</li>
<li>post-site： 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li>
<li>site-deploy：将生成的站点文档部署到特定的服务器上</li>
</ul>
<p>这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置身份</title>
    <url>/2021/06/07/Git%E9%85%8D%E7%BD%AE%E8%BA%AB%E4%BB%BD/</url>
    <content><![CDATA[<h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><ol>
<li><a href="%22https://git-scm.com/downloads%22">官网</a>安装，可能由于国内网络条件的问题可能难以安装</li>
<li><a href="%22https://npm.taobao.org/mirrors/git-for-windows/%22">淘宝的镜像源安装</a>,可以成功安装！</li>
</ol>
<span id="more"></span>

<h2 id="配置身份"><a href="#配置身份" class="headerlink" title="配置身份"></a>配置身份</h2><p><strong>配置身份主要是在提交代码时用来记录身份</strong></p>
<ol>
<li>打开Git Bash,配置用户名。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure>

<p>PS. “name”可任意取。</p>
<ol start="2">
<li>配置邮箱。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;xxx@xxx.com&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="检查身份"><a href="#检查身份" class="headerlink" title="检查身份"></a>检查身份</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<p>或者查看配置信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure>

<h2 id="修改身份"><a href="#修改身份" class="headerlink" title="修改身份"></a>修改身份</h2><p>命令同配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;XXX&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;XXX@XX.com&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>java网络编程</title>
    <url>/2021/03/11/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>信件：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210310224320189.png" alt="image-20210310224320189"></p>
<p><strong>计算机网络：</strong></p>
<p>计算机网络是指将<strong>地理位置不同</strong>的具有独立功能的<strong>多台计算机及其外部设备，通过通信线路连接起来</strong>，在网络操作系统，网络管理软件及<strong>网络通信协议</strong>的管理和协调下，实现资源共享和信息传递的计算机系统。</p>
<p><strong>网络编程的目的：</strong></p>
<ul>
<li>传播交流信息，数据交换。通信</li>
</ul>
<p><strong>想要达到这个效果需要什么：</strong></p>
<ol>
<li><p>如何准确地定位网络上的一台主机          端口，定位到这个计算机上的某个资源</p>
</li>
<li><p>找到了这个主机，如何传输数据呢？</p>
<p>网络编程：TCP/IP        C/S</p>
</li>
</ol>
<h2 id="1-2-网络通信的要素"><a href="#1-2-网络通信的要素" class="headerlink" title="1.2 网络通信的要素"></a>1.2 网络通信的要素</h2><p>如何实现网络的通信？</p>
<p>通信双方的地址：</p>
<ul>
<li>ip</li>
<li>端口号</li>
</ul>
<p><strong>规则：网络通信的协议</strong></p>
<p>TCP/IP参考模型：</p>
<p> <img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210310230024502.png" alt="image-20210310230024502"></p>
<p>小结：</p>
<p>1.网络编程中有两个主要的问题</p>
<ul>
<li><p>如何准确地定位到网络上的一台或多台主机</p>
</li>
<li><p>找到主机之后如何进行通信</p>
</li>
</ul>
<p>2.网络编程中的要素</p>
<ul>
<li>ip 和端口号</li>
<li>网络通信协议</li>
</ul>
<p>3.万物皆对象</p>
<h2 id="1-3-IP"><a href="#1-3-IP" class="headerlink" title="1.3 IP"></a>1.3 IP</h2><p>ip地址：InetAddress</p>
<ul>
<li><p>唯一定位一台网络上的计算机</p>
</li>
<li><p>127.0.0.1 ：本机local host</p>
</li>
<li><p>IP地址的分类</p>
<ul>
<li><p>ipv4 / ipv6</p>
<ul>
<li>IPV4 127.0.0.1       4个字节组成。      共42亿    </li>
<li>IPV6   128位           8个无符号整数！</li>
</ul>
</li>
<li><p>公网(互联网)-私网(局域网)</p>
<ul>
<li>ABCD类地址</li>
<li>192.168.xx.xx , 专门给组织内部用的</li>
</ul>
</li>
</ul>
</li>
<li><p>域名：记忆IP问题</p>
<ul>
<li>IP：<a href="http://www.baidu.com/">www.baidu.com</a></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试ip</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInetAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//查询本机地址</span></span><br><span class="line">            InetAddress  inetAddress1 = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            System.out.println(inetAddress1);</span><br><span class="line">            InetAddress  inetAddress3 = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            System.out.println(inetAddress3);</span><br><span class="line">            InetAddress  inetAddress4 = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(inetAddress4);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//查询网站ip地址</span></span><br><span class="line">            InetAddress  inetAddress2 = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">            System.out.println(inetAddress2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//常用方法</span></span><br><span class="line">            <span class="comment">//System.out.println(inetAddress2.getAddress());</span></span><br><span class="line">            System.out.println(inetAddress2.getCanonicalHostName());<span class="comment">//规范的名字</span></span><br><span class="line">            System.out.println(inetAddress2.getHostAddress());<span class="comment">//ip</span></span><br><span class="line">            System.out.println(inetAddress2.getHostName());<span class="comment">//域名，或者自己电脑的名字</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-端口"><a href="#1-4-端口" class="headerlink" title="1.4 端口"></a>1.4 端口</h2><p>端口表示计算机上一个程序的进程</p>
<ul>
<li><p>不同的进程有不同的端口号！用来区分软件！</p>
</li>
<li><p>被规定0~65535</p>
</li>
<li><p>TCP/UDP: 65535*2      协议不同不冲突      单个协议下，端口号不能冲突</p>
</li>
<li><p>端口分类</p>
<ul>
<li><p>公有端口 0~1023</p>
<ul>
<li>HTTP:80</li>
<li>HTTPS:443</li>
<li>FTP:21</li>
<li>Telent:23</li>
</ul>
</li>
<li><p>程序注册端口：1024-49151，分配用户或者程序</p>
<ul>
<li>Tomcat：8080</li>
<li>MySQL：3306</li>
<li>Oracle：1521</li>
</ul>
</li>
<li><p>动态，私有：49152-65535</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano <span class="comment">#查看所有的端口</span></span><br><span class="line">netsata -ano|finder <span class="string">&quot;5900&quot;</span>  <span class="comment">#查看指定的端口</span></span><br><span class="line">tasklist|finder <span class="string">&quot;8696&quot;</span> <span class="comment">#查看指定端口的进程</span></span><br><span class="line">Ctrl + Shife + ESC <span class="comment">#任务管理器</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInetSocketAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InetSocketAddress socketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8080</span>);</span><br><span class="line">        System.out.println(socketAddress);</span><br><span class="line">        System.out.println(socketAddress.getAddress());</span><br><span class="line">        System.out.println(socketAddress.getHostName());<span class="comment">//hosts</span></span><br><span class="line">        System.out.println(socketAddress.getPort());<span class="comment">//port</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-通信协议"><a href="#1-5-通信协议" class="headerlink" title="1.5 通信协议"></a>1.5 通信协议</h2><p>协议：约定</p>
<p>网络通信协议：速率，传输码率，代码结构，传输控制……</p>
<p>分层！</p>
<p><strong>TCP/IP协议簇：实际上是一组协议</strong></p>
<p>重要：</p>
<ul>
<li><p>TCP:用户传输协议</p>
</li>
<li><p>UDP:用户数据报协议</p>
</li>
<li><p>IP:网络互连协议</p>
</li>
</ul>
<p>TCP  UDP 对比</p>
<p>TCP:打电话</p>
<ul>
<li><p>连接，稳定</p>
</li>
<li><p>三次握手，四次挥手</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A:你瞅啥？</span><br><span class="line">B:瞅你咋地？</span><br><span class="line">A:打一架</span><br><span class="line"></span><br><span class="line">A:我要走了</span><br><span class="line">B:你真的要走了吗</span><br><span class="line">B:你真的真的要走了吗</span><br><span class="line">A:BYE</span><br></pre></td></tr></table></figure>

<p><strong>三次握手:</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjA1MTEwNDA1NjY2?x-oss-process=image/format,png" alt="三次握手"></p>
<p><strong>四次挥手:</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjA2MDg0ODUxMjcy?x-oss-process=image/format,png" alt="四次挥手"></p>
</li>
<li><p>客户端，服务端</p>
</li>
<li><p>传输完成，释放连接，效率低</p>
</li>
</ul>
<p>UDP:发短信</p>
<ul>
<li>不连接，不稳定</li>
<li>客户端，服务端，没有明确的界限</li>
<li>不管有没有准备好，都可以发给你</li>
</ul>
<h2 id="1-6-TCP"><a href="#1-6-TCP" class="headerlink" title="1.6 TCP"></a>1.6 TCP</h2><p>客户端：</p>
<ol>
<li>连接服务器Socket</li>
<li>发送消息</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClientDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket =  <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.要知道服务器的地址</span></span><br><span class="line">            InetAddress serverIP = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> port  =<span class="number">9999</span>;</span><br><span class="line">            <span class="comment">//2.创建一个socket链接</span></span><br><span class="line">             socket = <span class="keyword">new</span> Socket(serverIP,port);</span><br><span class="line">            <span class="comment">//3.发送消息IO流</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">&quot;hello fuck java&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(os!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端：</p>
<ol>
<li>建立服务的端口 ServerSocket</li>
<li>等待用户的消息 accept</li>
<li>接受用户的消息</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServerDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        Socket  socket=<span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1.搞一个地址</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             serverSocket =  <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//2.等待客户端连接过来</span></span><br><span class="line">             socket= serverSocket.accept();</span><br><span class="line">            <span class="comment">//3.读取客户端的消息</span></span><br><span class="line">             is = socket.getInputStream();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">                 int len;</span></span><br><span class="line"><span class="comment">                 while((len=is.read(buffer))!=-1)&#123;</span></span><br><span class="line"><span class="comment">                     String msg = new String(buffer,0,len);</span></span><br><span class="line"><span class="comment">                     System.out.println(msg);</span></span><br><span class="line"><span class="comment">                 &#125;</span></span><br><span class="line"><span class="comment">                 该方法会乱码</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//管道流</span></span><br><span class="line">              byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                byteArrayOutputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(byteArrayOutputStream.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(byteArrayOutputStream!=<span class="keyword">null</span>)</span><br><span class="line">            byteArrayOutputStream.close();</span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="keyword">null</span>)</span><br><span class="line">            is.close();</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)</span><br><span class="line">            socket.close();</span><br><span class="line">            <span class="keyword">if</span>(serverSocket!=<span class="keyword">null</span>)</span><br><span class="line">            serverSocket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>Server:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Socket.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------file server------------&quot;</span>);</span><br><span class="line">        <span class="comment">//1.创建服务</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9000</span>);</span><br><span class="line">        <span class="comment">//2.监听客户端的连接</span></span><br><span class="line">        Socket socket = serverSocket.accept();<span class="comment">//阻塞式监听，会一直等待客户端连接</span></span><br><span class="line">        <span class="comment">//3.获取输出流</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">//4.文件输出</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;girl2.png&quot;</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通知客户端</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;接收完毕，可以断开..&quot;</span>.getBytes());</span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Client:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Socket.demo03;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------file client------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.创建socket连接//ctr + alt +v </span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9000</span>);  </span><br><span class="line">        <span class="comment">// 2.创建一个输出流</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();  </span><br><span class="line">        <span class="comment">//3.读取文件</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;girl.png&quot;</span>)); </span><br><span class="line">        <span class="comment">//4.写文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];   </span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通知服务器传输完毕</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        <span class="comment">//确定服务器接收完毕，才能断开</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len2;</span><br><span class="line">        <span class="keyword">while</span>((len2=is.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(buf,<span class="number">0</span>,len2);</span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        is.close();</span><br><span class="line">        baos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-7-UDP"><a href="#1-7-UDP" class="headerlink" title="1.7 UDP"></a>1.7 UDP</h2><p>发短信：不用连接，需要知道对方地址</p>
<h3 id="UDP消息发送"><a href="#UDP消息发送" class="headerlink" title="UDP消息发送"></a>UDP消息发送</h3><p>发送端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Socket.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">udpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.建立一个Socket</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">		<span class="comment">//2.建个包</span></span><br><span class="line">        String msg =<span class="string">&quot;你好服务器&quot;</span>;</span><br><span class="line">        <span class="comment">//发送给谁</span></span><br><span class="line">        InetAddress ip = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">9090</span>;</span><br><span class="line">        <span class="comment">//数据，数据的长度起始，发送给谁</span></span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(msg.getBytes(), <span class="number">0</span>, msg.getBytes().length, ip, port);</span><br><span class="line">		<span class="comment">//3.发送给谁</span></span><br><span class="line">        socket.send(packet);</span><br><span class="line">		<span class="comment">//4.关闭流</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Socket.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="comment">//还是要等待客户端的连接</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">udpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//开放端口</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line">        <span class="comment">//接收数据包</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">        socket.receive(packet);<span class="comment">//阻塞接受</span></span><br><span class="line">        System.out.println(packet.getAddress().getHostAddress());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line">        socket.close();<span class="comment">//关闭连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UDP循环发送消息"><a href="#UDP循环发送消息" class="headerlink" title="UDP循环发送消息"></a>UDP循环发送消息</h3><p>Sender:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpSenderDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//准备数据，控制台读取System in</span></span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            String data  = reader.readLine();</span><br><span class="line">            <span class="keyword">byte</span>[] datas = data.getBytes();</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas,<span class="number">0</span>,datas.length,<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>,<span class="number">6666</span>));</span><br><span class="line"></span><br><span class="line">            socket.send(packet);</span><br><span class="line">            <span class="keyword">if</span>(data.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Receiver:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpReceiverDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception </span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//准备接受包裹</span></span><br><span class="line">            <span class="keyword">byte</span>[] container = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(container,<span class="number">0</span>,container.length);</span><br><span class="line">            socket.receive(packet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//断开连接 bye</span></span><br><span class="line">            <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">            String receiveData = <span class="keyword">new</span> String(data,<span class="number">0</span>,data.length);</span><br><span class="line">            System.out.println(receiveData);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(receiveData.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UDP循环发送-多线程"><a href="#UDP循环发送-多线程" class="headerlink" title="UDP循环发送+多线程"></a>UDP循环发送+多线程</h3><p>在线咨询：两个人都是发送方，也都可以是接收方</p>
<p><strong>TalkSend发送数据线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkSend</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fromPort;</span><br><span class="line">    <span class="keyword">private</span> String toIP;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toPort;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkSend</span><span class="params">(<span class="keyword">int</span> fromPort, String toIP, <span class="keyword">int</span> toPort)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.fromPort = fromPort;</span><br><span class="line">        <span class="keyword">this</span>.toIP = toIP;</span><br><span class="line">        <span class="keyword">this</span>.toPort = toPort;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             socket = <span class="keyword">new</span> DatagramSocket(fromPort);</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备数据，控制台读取System in</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            String data  = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                data = reader.readLine();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span>[] datas = data.getBytes();</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas,<span class="number">0</span>,datas.length,<span class="keyword">new</span> InetSocketAddress(<span class="keyword">this</span>.toIP,<span class="keyword">this</span>.toPort));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.send(packet);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(data.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>TalkReceive接收数据线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkReceive</span> <span class="keyword">implements</span>  <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span>   <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String msgFrom;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkReceive</span><span class="params">(<span class="keyword">int</span> port,String msgFrom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.msgFrom= msgFrom;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//准备接受包裹</span></span><br><span class="line">            <span class="keyword">byte</span>[] container = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(container,<span class="number">0</span>,container.length);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.receive(packet);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//断开连接 bye</span></span><br><span class="line">            <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">            String receiveData = <span class="keyword">new</span> String(data,<span class="number">0</span>,data.length);</span><br><span class="line">            System.out.println(msgFrom+<span class="string">&quot;：&quot;</span>+receiveData);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(receiveData.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>老师端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkTeacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开启两个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(<span class="number">5555</span>,<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="number">9999</span>,<span class="string">&quot;学生&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>学生端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开启两个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(<span class="number">7777</span>,<span class="string">&quot;localhost&quot;</span>,<span class="number">9999</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="number">8888</span>,<span class="string">&quot;老师&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210311221246961.png" alt="image-20210311221246961"></p>
<h2 id="1-8-URL"><a href="#1-8-URL" class="headerlink" title="1.8 URL"></a>1.8 URL</h2><p><a href="https://www.baidu.com/">https://www.baidu.com/</a></p>
<p>统一资源定位符：定位资源的，定位互联网上的某一个资源</p>
<p>DNS域名解析    将<a href="http://www.baidu.com/">www.baidu.com</a> 解析成xxx.xx.xx.xxx</p>
<hr>
<p>格式：<code>协议：//ip地址：端口/项目名/资源</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/helloworld/index.jsp?username=gxx&amp;password+123456&quot;</span>);</span><br><span class="line">        System.out.println(url.getProtocol());<span class="comment">//协议</span></span><br><span class="line">        System.out.println(url.getHost());<span class="comment">//主机ip</span></span><br><span class="line">        System.out.println(url.getPort());<span class="comment">//端口</span></span><br><span class="line">        System.out.println(url.getPath());<span class="comment">//文件</span></span><br><span class="line">        System.out.println(url.getFile());<span class="comment">//全路径</span></span><br><span class="line">        System.out.println(url.getQuery());<span class="comment">//参数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>下载网络资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlDown</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.下载地址</span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://ss2.meipian.me/users/33576056/8b70d467a4394d95b1bde4eb5a1488d2.jpg-mobile&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接到这个资源 HTTP</span></span><br><span class="line">        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        InputStream inputStream = urlConnection.getInputStream();</span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;123.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=inputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        urlConnection.disconnect();<span class="comment">//断开连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>如何配置IDEA自带Maven插件的镜像源（找不到settings.xml）</title>
    <url>/2020/11/02/%E9%85%8D%E7%BD%AEIDEA%E8%87%AA%E5%B8%A6Maven%E6%8F%92%E4%BB%B6%E7%9A%84%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<h2 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h2><p>由于某些众所周知的原因，Maven从中央仓库下载依赖速度非常慢，甚至经常失败，几乎处于不可用状态。而Maven项目和这个构建工具又是Java开发者必不可少的开发利器。</p>
<p>一般我们采取配置国内阿里云的镜像源，很快很巴适</p>
<p>自己下载maven的一般在下载目录下找到conf文件夹，修改settings.xml文件即可。</p>
<p>但是有很多IDEA重度用户（比如我），一般只用IDEA进行开发，IDEA是默认内置Maven插件的，但是在IDEA的插件里是找不到settings.xml文件的，更别提修改成阿里云的镜像源了… </p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210714212341233.png" alt="image-20210714212341233"></p>
<p>打开.m2文件后：并没有settings.xml</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210714212428746.png" alt="image-20210714212428746"></p>
<h2 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h2><h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><p>在 .m2 文件夹下新建 settings.xml 配置文件.</p>
<p>复制下面，之后在镜像源处进行配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment">or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment">distributed with this work for additional information</span></span><br><span class="line"><span class="comment">regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment">to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment">&quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment">with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> | This is the configuration file for Maven. It can be specified at two levels:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  1. User Level. This settings.xml file provides configuration for a single user,</span></span><br><span class="line"><span class="comment"> |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -s /path/to/user/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  2. Global Level. This settings.xml file provides configuration for all Maven</span></span><br><span class="line"><span class="comment"> |                 users on a machine (assuming they&#x27;re all using the same Maven</span></span><br><span class="line"><span class="comment"> |                 installation). It&#x27;s normally provided in</span></span><br><span class="line"><span class="comment"> |                 $&#123;maven.home&#125;/conf/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -gs /path/to/global/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> | The sections in this sample file are intended to give you a running start at</span></span><br><span class="line"><span class="comment"> | getting the most out of your Maven installation. Where appropriate, the default</span></span><br><span class="line"><span class="comment"> | values (values used when the setting is not specified) are provided.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: ~/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- interactiveMode</span></span><br><span class="line"><span class="comment">   | This will determine whether maven prompts you when it needs input. If set to false,</span></span><br><span class="line"><span class="comment">   | maven will use a sensible default value, perhaps based on some other setting, for</span></span><br><span class="line"><span class="comment">   | the parameter in question.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: true</span></span><br><span class="line"><span class="comment">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- offline</span></span><br><span class="line"><span class="comment">   | Determines whether maven should attempt to connect to the network when executing a build.</span></span><br><span class="line"><span class="comment">   | This will have an effect on artifact downloads, artifact deployment, and others.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: false</span></span><br><span class="line"><span class="comment">  &lt;offline&gt;false&lt;/offline&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- pluginGroups</span></span><br><span class="line"><span class="comment">   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.</span></span><br><span class="line"><span class="comment">   | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers</span></span><br><span class="line"><span class="comment">   | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- pluginGroup</span></span><br><span class="line"><span class="comment">     | Specifies a further group identifier to use for plugin lookup.</span></span><br><span class="line"><span class="comment">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- proxies</span></span><br><span class="line"><span class="comment">   | This is a list of proxies which can be used on this machine to connect to the network.</span></span><br><span class="line"><span class="comment">   | Unless otherwise specified (by system property or command-line switch), the first proxy</span></span><br><span class="line"><span class="comment">   | specification in this list marked as active will be used.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- proxy</span></span><br><span class="line"><span class="comment">     | Specification for one proxy, to be used in connecting to the network.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;proxy&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;optional&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;active&gt;true&lt;/active&gt;</span></span><br><span class="line"><span class="comment">      &lt;protocol&gt;http&lt;/protocol&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;proxyuser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;proxypass&lt;/password&gt;</span></span><br><span class="line"><span class="comment">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span></span><br><span class="line"><span class="comment">      &lt;port&gt;80&lt;/port&gt;</span></span><br><span class="line"><span class="comment">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span></span><br><span class="line"><span class="comment">    &lt;/proxy&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servers</span></span><br><span class="line"><span class="comment">   | This is a list of authentication profiles, keyed by the server-id used within the system.</span></span><br><span class="line"><span class="comment">   | Authentication profiles can be used whenever maven must make a connection to a remote server.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- server</span></span><br><span class="line"><span class="comment">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class="line"><span class="comment">     | a unique name within the system (referred to by the &#x27;id&#x27; attribute below).</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | <span class="doctag">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are</span></span><br><span class="line"><span class="comment">     |       used together.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;deploymentRepo&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;repouser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;repopwd&lt;/password&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Another sample, using keys to authenticate.</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;siteServer&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;</span></span><br><span class="line"><span class="comment">      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mirrors</span></span><br><span class="line"><span class="comment">   | This is a list of mirrors to be used in downloading artifacts from remote repositories.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | It works like this: a POM may declare a repository to use in resolving certain artifacts.</span></span><br><span class="line"><span class="comment">   | However, this repository may have problems with heavy traffic at times, so people have mirrored</span></span><br><span class="line"><span class="comment">   | it to several places.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | That repository definition will have a unique id, so we can create a mirror reference for that</span></span><br><span class="line"><span class="comment">   | repository, to be used as an alternate download site. The mirror site will be the preferred</span></span><br><span class="line"><span class="comment">   | server for that repository.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- profiles</span></span><br><span class="line"><span class="comment">   | This is a list of profiles which can be activated in a variety of ways, and which can modify</span></span><br><span class="line"><span class="comment">   | the build process. Profiles provided in the settings.xml are intended to provide local machine-</span></span><br><span class="line"><span class="comment">   | specific paths and repository locations which allow the build to work in the local environment.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | For example, if you have an integration testing plugin - like cactus - that needs to know where</span></span><br><span class="line"><span class="comment">   | your Tomcat instance is installed, you can provide a variable here such that the variable is</span></span><br><span class="line"><span class="comment">   | dereferenced during the build process to configure the cactus plugin.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles</span></span><br><span class="line"><span class="comment">   | section of this document (settings.xml) - will be discussed later. Another way essentially</span></span><br><span class="line"><span class="comment">   | relies on the detection of a system property, either matching a particular value for the property,</span></span><br><span class="line"><span class="comment">   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a</span></span><br><span class="line"><span class="comment">   | value of &#x27;1.4&#x27; might activate a profile when the build is executed on a JDK version of &#x27;1.4.2_07&#x27;.</span></span><br><span class="line"><span class="comment">   | Finally, the list of active profiles can be specified directly from the command line.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | <span class="doctag">NOTE:</span> For profiles defined in the settings.xml, you are restricted to specifying only artifact</span></span><br><span class="line"><span class="comment">   |       repositories, plugin repositories, and free-form properties to be used as configuration</span></span><br><span class="line"><span class="comment">   |       variables for plugins in the POM.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- profile</span></span><br><span class="line"><span class="comment">     | Specifies a set of introductions to the build process, to be activated using one or more of the</span></span><br><span class="line"><span class="comment">     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;</span></span><br><span class="line"><span class="comment">     | or the command line, profiles have to have an ID that is unique.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | An encouraged best practice for profile identification is to use a consistent naming convention</span></span><br><span class="line"><span class="comment">     | for profiles, such as &#x27;env-dev&#x27;, &#x27;env-test&#x27;, &#x27;env-production&#x27;, &#x27;user-jdcasey&#x27;, &#x27;user-brett&#x27;, etc.</span></span><br><span class="line"><span class="comment">     | This will make it more intuitive to understand what the set of introduced profiles is attempting</span></span><br><span class="line"><span class="comment">     | to accomplish, particularly when you only have a list of profile id&#x27;s for debug.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.</span></span><br><span class="line"><span class="comment">    &lt;profile&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;jdk-1.4&lt;/id&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;activation&gt;</span></span><br><span class="line"><span class="comment">        &lt;jdk&gt;1.4&lt;/jdk&gt;</span></span><br><span class="line"><span class="comment">      &lt;/activation&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;repositories&gt;</span></span><br><span class="line"><span class="comment">        &lt;repository&gt;</span></span><br><span class="line"><span class="comment">          &lt;id&gt;jdk14&lt;/id&gt;</span></span><br><span class="line"><span class="comment">          &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt;</span></span><br><span class="line"><span class="comment">          &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt;</span></span><br><span class="line"><span class="comment">          &lt;layout&gt;default&lt;/layout&gt;</span></span><br><span class="line"><span class="comment">          &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt;</span></span><br><span class="line"><span class="comment">        &lt;/repository&gt;</span></span><br><span class="line"><span class="comment">      &lt;/repositories&gt;</span></span><br><span class="line"><span class="comment">    &lt;/profile&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | Here is another profile, activated by the system property &#x27;target-env&#x27; with a value of &#x27;dev&#x27;,</span></span><br><span class="line"><span class="comment">     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration</span></span><br><span class="line"><span class="comment">     | might hypothetically look like:</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | ...</span></span><br><span class="line"><span class="comment">     | &lt;plugin&gt;</span></span><br><span class="line"><span class="comment">     |   &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">     |   &lt;artifactId&gt;myplugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     |   &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">     |     &lt;tomcatLocation&gt;$&#123;tomcatPath&#125;&lt;/tomcatLocation&gt;</span></span><br><span class="line"><span class="comment">     |   &lt;/configuration&gt;</span></span><br><span class="line"><span class="comment">     | &lt;/plugin&gt;</span></span><br><span class="line"><span class="comment">     | ...</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">     | <span class="doctag">NOTE:</span> If you just wanted to inject this configuration whenever someone set &#x27;target-env&#x27; to</span></span><br><span class="line"><span class="comment">     |       anything, you could just leave off the &lt;value/&gt; inside the activation-property.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;profile&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;env-dev&lt;/id&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;activation&gt;</span></span><br><span class="line"><span class="comment">        &lt;property&gt;</span></span><br><span class="line"><span class="comment">          &lt;name&gt;target-env&lt;/name&gt;</span></span><br><span class="line"><span class="comment">          &lt;value&gt;dev&lt;/value&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">      &lt;/activation&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;properties&gt;</span></span><br><span class="line"><span class="comment">        &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt;</span></span><br><span class="line"><span class="comment">      &lt;/properties&gt;</span></span><br><span class="line"><span class="comment">    &lt;/profile&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- activeProfiles</span></span><br><span class="line"><span class="comment">   | List of profiles that are active for all builds.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;activeProfiles&gt;</span></span><br><span class="line"><span class="comment">    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;</span></span><br><span class="line"><span class="comment">    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;</span></span><br><span class="line"><span class="comment">  &lt;/activeProfiles&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><p>在 Maven home directory 选项中切换 Maven</p>
<p>我们在Maven home directory选项中可以看到除了Bundled (Maven 3) 还有另外一个选项，那就是在我们IDEA安装文件夹下 plugins/maven/lib/maven3</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210714224609428.png" alt="image-20210714224609428"></p>
<p>在将Maven目录切换到IDEA安装目录中的plugins/maven/lib/maven3后，我们将settings.xml配置文件也修改为该Maven下的settings.xml.</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210714224724349.png" alt="image-20210714224724349"></p>
<p>之后修改该settings.xml文件即可，内容同上。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>DONE!</strong></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>部署网站知识总结</title>
    <url>/2020/09/24/%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p><strong>待完善</strong></p>
<h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><h4 id="备案："><a href="#备案：" class="headerlink" title="备案："></a>备案：</h4><p>所谓的网站备案其实是网站的ICP备案的简称，国家相关规定如下：《互联网信息服务管理办法》指出互联网信息服务分为经营性和非经营性两类。国家对经营性互联网信息服务实行许可制度；对非经营性互联网信息服务实行备案制度。未取得许可或者未履行备案手续的，不得从事互联网信息服务。</p>
<p>一般来说，备案指的是域名进行备案，而不是服务器进行备案。一个网站是否备案，是取决于网站所用空间是国内还是国外的.<br>如果是国内主机，网站域名需要备案，才能通过域名访问到你的网站。<br>如果是国外主机，网站域名是不用备案的，也可以通过域名访问。</p>
<h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h4><p>域名解析是把域名指向网站空间IP，让人们通过注册的域名可以方便地访问到网站的一种服务。IP地址是网络上标识站点的数字地址，为了方便记忆，采用域名来代替IP地址标识站点地址。域名解析就是域名到IP地址的转换过程。域名的解析工作由DNS服务器完成。</p>
<p>了解完这些之后，我们可以进行实际操作。</p>
<h2 id="第一步：购买云服务器"><a href="#第一步：购买云服务器" class="headerlink" title="第一步：购买云服务器"></a>第一步：购买云服务器</h2><h2 id="第二步：Xshell和Xftp"><a href="#第二步：Xshell和Xftp" class="headerlink" title="第二步：Xshell和Xftp"></a>第二步：Xshell和Xftp</h2><h2 id="第三步：安装-Docker-与-Docker-Composer"><a href="#第三步：安装-Docker-与-Docker-Composer" class="headerlink" title="第三步：安装 Docker 与 Docker Composer"></a>第三步：安装 Docker 与 Docker Composer</h2><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><blockquote>
<p>引用自 <a href="https://www.runoob.com/docker/centos-docker-install.html">菜鸟教程 - CentOS Docker 安装</a></p>
</blockquote>
<p>1、remove old version</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<p>2、安装必要工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>3、添加软件源信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>4、更新 yum 缓存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; sudo yum makecache fast</span><br></pre></td></tr></table></figure>

<p>5、安装 Docker-ce：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure>

<p>6、启动 Docker 后台服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="安装-Docker-Composer"><a href="#安装-Docker-Composer" class="headerlink" title="安装 Docker Composer"></a>安装 Docker Composer</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">&gt; sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line">&gt; docker-compose -v</span><br></pre></td></tr></table></figure>

<p>docker composer 是一个很好用的 Docker 进阶工具。</p>
<p>我们<strong>可以通过撰写 docker-composer.yml 文件并执行 docker-compose up -d</strong> 来更快速的安装某一套环境。</p>
<h2 id="第四步：安装-Docker-的可视化管理系统，并配置腾讯云安全组"><a href="#第四步：安装-Docker-的可视化管理系统，并配置腾讯云安全组" class="headerlink" title="第四步：安装 Docker 的可视化管理系统，并配置腾讯云安全组"></a>第四步：安装 Docker 的可视化管理系统，并配置腾讯云安全组</h2><h3 id="安装-Docker-的可视化管理系统"><a href="#安装-Docker-的可视化管理系统" class="headerlink" title="安装 Docker 的可视化管理系统"></a>安装 Docker 的可视化管理系统</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure>

<p>上面的两部操作中，我们让 Portainer</p>
<p>——也就是我们的 Docker 可视化管理系统<strong>运行在了服务器的9000 端口上。</strong></p>
<h3 id="配置安全组"><a href="#配置安全组" class="headerlink" title="配置安全组"></a>配置安全组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://console.cloud.tencent.com/cvm/securitygroup</span><br></pre></td></tr></table></figure>

<p>当我们现在访问我们的 <a href="https://link.zhihu.com/?target=http://ip">http://ip</a>:port 组合时，我们会发现我们并不可以访问成功。</p>
<p>这个原因就是，我们<strong>没有配置腾讯云的安全组协议。</strong></p>
<p>腾讯云的安全组是什么意思呢？</p>
<p>就是说，<strong>腾讯云会帮你拦截访问你服务器基本上所有端口的 HTTP 请求，</strong></p>
<p><strong>除非你对某个端口单独配置了安全组协议。</strong></p>
<p>所以说，我们现在需要配置下安全组协议好让 9000 端口可以被访问。</p>
<p>点击上面的网址，进入安全组配置，点击「添加入站规则」，按如下方式添加：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/v2-b7dc78980cd98a4a9e689686184eac39_720w.jpg" alt="img"></p>
<h2 id="第五步：阿里云购买域名，完成域名解析"><a href="#第五步：阿里云购买域名，完成域名解析" class="headerlink" title="第五步：阿里云购买域名，完成域名解析"></a>第五步：阿里云购买域名，完成域名解析</h2><p>在阿里云中购买域名，并且解析到你的服务器 IP 地址上去。</p>
<p><strong>当你有多个 WEB 应用都要部署到同一个服务器上时，请确保解析了多个二级域名在同一个服务器上。</strong></p>
<p>（一级域名 <a href="https://link.zhihu.com/?target=http://xxx.org">http://xxx.org</a>；二级域名：<a href="https://link.zhihu.com/?target=http://www.xxx.org/">www.xxx.org</a> 或 csm.xxx.org）</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/v2-a0f332e578ef4761838950649b39fd9d_720w.jpg" alt="img"></p>
<p>这里值得注意的是——<strong>域名解析的意思。</strong></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/v2-05d21f1051d70c8bdf6114b55754b9e9_720w.jpg" alt="img"></p>
<ol>
<li><strong>我们购买到的域名，如 <a href="https://link.zhihu.com/?target=http://baidu.com">http://baidu.com</a>，是一级域名</strong></li>
<li><strong>域名解析，从概念上讲，是把</strong> <a href="https://link.zhihu.com/?target=http://www.baidu.com/">www.baidu.com</a> <strong>或</strong> <a href="https://link.zhihu.com/?target=http://wap.baidu.com/">wap.baidu.com</a> <strong>这类的域名解析到某个 IP 地址上（如119.75.217.109）的过程；（详情请看下图的主机记录）</strong></li>
<li><strong>域名解析，从操作上讲，就是点击「添加记录」，然后输入「你自己拥有的域名」和「任意一条 IP 地址」，然后点击完成的过程；也就是说，你可以把你的域名映射到任意一个公网 IP 上，对方不用确认</strong></li>
</ol>
<h2 id="第六步：安装-Nginx，并完成反向代理"><a href="#第六步：安装-Nginx，并完成反向代理" class="headerlink" title="第六步：安装 Nginx，并完成反向代理"></a>第六步：安装 Nginx，并完成反向代理</h2><h3 id="安装反向代理服务器-nginx-reverse-proxy"><a href="#安装反向代理服务器-nginx-reverse-proxy" class="headerlink" title="安装反向代理服务器 nginx-reverse-proxy"></a>安装反向代理服务器 nginx-reverse-proxy</h3><p>首先，先<strong>在我们的服务器中的 root 目录下面创建文件夹 nginx-reverse-proxy，并在其中创建三个子文件夹：</strong></p>
<ul>
<li>conf</li>
<li>www</li>
<li>logs</li>
</ul>
<p>接下来，我们<strong>在 conf 文件夹下创建一个文件 nginx.conf</strong>：<em>（其内容如下）</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，我们运行 docker 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 --name nginx-reverse-proxy -v ~/nginx-reverse-proxy/www:/usr/share/nginx/html -v ~/nginx-reverse-proxy/conf/nginx.conf:/etc/nginx/nginx.conf -v ~/nginx-reverse-proxy/logs:/var/log/nginx nginx</span><br></pre></td></tr></table></figure>

<h3 id="安装-WEB-服务器-nginx-www"><a href="#安装-WEB-服务器-nginx-www" class="headerlink" title="安装 WEB 服务器 nginx-www"></a>安装 WEB 服务器 nginx-www</h3><p>首先，先<strong>在我们的服务器中的 root 目录下面创建文件夹 nginx-www，并在其中创建三个子文件夹：</strong></p>
<ul>
<li>conf</li>
<li>www</li>
<li>logs</li>
</ul>
<p>接下来，我们<strong>在 conf 文件夹下创建一个文件 nginx.conf</strong>：<em>（其内容如下）</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，我们运行 docker 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 90:80 --name nginx-www -v ~/nginx-www/www:/usr/share/nginx/html -v ~/nginx-www/conf/nginx.conf:/etc/nginx/nginx.conf -v ~/nginx-www/logs:/var/log/nginx nginx</span><br></pre></td></tr></table></figure>

<p><strong>去配置安全组，让其可以访问 90 端口</strong></p>
<h3 id="复制-VUE-的-dist-文件夹中内容，到-nginx-的-www-目录"><a href="#复制-VUE-的-dist-文件夹中内容，到-nginx-的-www-目录" class="headerlink" title="复制 VUE 的 dist 文件夹中内容，到 nginx 的 www 目录"></a><strong>复制 VUE 的 dist 文件夹中内容，到 nginx 的 www 目录</strong></h3><p>我们现在把我们的 vue 项目打包，运行 npm run build，将项目文件下的 dist 文件夹下面的内容复制到目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/nginx-www/www/</span><br></pre></td></tr></table></figure>

<p>在 portainer 中重启 container（访问之前的 ip:9000 即可）</p>
<p><strong>此时我们在浏览器中输入 ip:90，即可看到我们托管的网站。</strong></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/v2-0faff06584836c9b3b0b1a4f6166c8aa_720w.jpg" alt="img"></p>
<h3 id="安装-WEB-服务器-nginx-cms"><a href="#安装-WEB-服务器-nginx-cms" class="headerlink" title="安装 WEB 服务器 nginx-cms"></a>安装 WEB 服务器 nginx-cms</h3><p>首先，先<strong>在我们的服务器中的 root 目录下面创建文件夹 nginx-cms，并在其中创建三个子文件夹：</strong></p>
<ul>
<li>conf</li>
<li>www</li>
<li>logs</li>
</ul>
<p>接下来，我们<strong>在 conf 文件夹下创建一个文件 nginx.conf</strong>：<em>（其内容如下）</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，我们运行 docker 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 100:80 --name nginx-cms -v ~/nginx-cms/www:/usr/share/nginx/html -v ~/nginx-cms/conf/nginx.conf:/etc/nginx/nginx.conf -v ~/nginx-cms/logs:/var/log/nginx nginx</span><br></pre></td></tr></table></figure>

<p><strong>去配置安全组，让其可以访问 100 端口</strong></p>
<h2 id="第七步：配置反向代理服务器"><a href="#第七步：配置反向代理服务器" class="headerlink" title="第七步：配置反向代理服务器"></a><strong>第七步：配置反向代理服务器</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">   </span><br><span class="line">   server &#123;  </span><br><span class="line">    listen 80;</span><br><span class="line">    server_name portainer.xxx.org;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header   Host      $http_host;</span><br><span class="line">        proxy_pass         http://ip:9000;  //把这里的 ip 换成你自己的公网 ip 地址</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   server &#123;  </span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.xxx.org;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header   Host      $http_host;</span><br><span class="line">        proxy_pass         http://ip:90; //把这里的 ip 换成你自己的公网 ip 地址</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们修改完 nginx.conf，我们需要使用如下指令让其生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker kill -s HUP nginx-reverse-proxy</span><br></pre></td></tr></table></figure>

<p>并且最后需要在 portainer 中重启 container</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/v2-906442feb15dcacf0c4c349d31d53172_720w.jpg" alt="img"></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/v2-bfd84a970994f9d82ca7ee5088d5db51_720w.jpg" alt="img"></p>
<h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><h3 id="整体流程遵循着一套核心概念"><a href="#整体流程遵循着一套核心概念" class="headerlink" title="整体流程遵循着一套核心概念"></a>整体流程遵循着一套核心概念</h3><p>需求：将多个 WEB 项目，部署在一台服务器上。并且每一个项目，都有一个自己的域名可以访问。</p>
<p>解决方案：</p>
<ol>
<li>购买云服务器，获得 <strong>IP 地址</strong></li>
<li>购买域名，并<strong>将多个二级域名解析到该 IP 地址上</strong>；（<a href="http://www.xxx.com-&gt;192.168.0.1;cms.xxx.com-&gt;192.168.0.1;abc.xxx.com-&gt;192.168.0.1)/">www.xxx.com-&gt;192.168.0.1；cms.xxx.com-&gt;192.168.0.1；abc.xxx.com-&gt;192.168.0.1）</a></li>
<li>利用 Docker 安装 nginx，它运行在服务器的某一个端口上（我们自己指定）</li>
<li>利用 xshell 或者 finalshell 这种 SSH 软件，将我们的项目传输到上一步安装的 nginx 的静态资源文件夹中，于是我们就可以<strong>用 192.168.0.1:90 这样的「ip地址:端口号」的形式访问到我们的「一个 WEB 项目」了</strong></li>
<li>当我们访问一个地址如 192.168.0.1 时，我们默认访问的是它的 80 端口</li>
<li>于是我们可以用 docker 部署多个 nginx 在同一台服务器的非 80 端口上，它们中都部署着不同的 WEB 项目，比如 192.168.0.1:90 中部署的是「官方网站」，192.168.0.1:100 中部署的是「网页游戏」</li>
<li>最后我们部署一个 nginx 作为「反向代理服务器」在服务器的 80 端口上，在这个<strong>反向代理服务器</strong>中<strong>配置「域名」与「ip：端口号」的对应关系</strong>。（如下图）</li>
<li>于是我们就可以通过不同域名，访问同一个服务器上部署的不同项目了！就是这样！</li>
</ol>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/v2-364bf60b346257b3b6fe4bd26936422b_720w.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7最小化安装后，ifconfig命令无法使用command not found</title>
    <url>/2020/09/10/CentOS7%E6%9C%80%E5%B0%8F%E5%8C%96%E5%AE%89%E8%A3%85%E5%90%8E%EF%BC%8Cifconfig%E5%91%BD%E4%BB%A4%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8command%20not%20found/</url>
    <content><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>准备在虚拟机装CentOS7系统来当作本地服务器部署项目，最小化安装后，在配置网络时ifconfig运行报错</p>
<p><code>-bash:  ifconfig :  command not found</code></p>
<h2 id="逐步排查："><a href="#逐步排查：" class="headerlink" title="逐步排查："></a>逐步排查：</h2><h3 id="首先了解是否没有开启网卡"><a href="#首先了解是否没有开启网卡" class="headerlink" title="首先了解是否没有开启网卡"></a>首先了解是否没有开启网卡</h3><p><code>ping  www.baidu.com</code></p>
<h4 id="此处如果没ping通此处应移步去配置网络"><a href="#此处如果没ping通此处应移步去配置网络" class="headerlink" title="此处如果没ping通此处应移步去配置网络"></a>此处如果没ping通此处应移步去配置网络</h4><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210127141645419.png" alt="image-20210127141645419"></p>
<p>选择桥接模式，并且桥接到物理宿主机的上网网卡。（亲测设置为“自动”也可）</p>
<p>测试一下ping,可以ping通说明网卡有启用，并能获取IP地址来上网。</p>
<h4 id="ping通之后输入ip-addr查看是否能获取IP地址来确定网卡是否启用。"><a href="#ping通之后输入ip-addr查看是否能获取IP地址来确定网卡是否启用。" class="headerlink" title="ping通之后输入ip addr查看是否能获取IP地址来确定网卡是否启用。"></a>ping通之后输入<code>ip addr</code>查看是否能获取IP地址来确定网卡是否启用。</h4><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210127142633105.png" alt="image-20210127142633105"></p>
<p>可以通过ip addr 查到获取的IP地址，<strong>证明网卡是启用的</strong>。</p>
<h3 id="网卡正常开启的情况下几乎可以确定是没有安装ifconfig相关的工具"><a href="#网卡正常开启的情况下几乎可以确定是没有安装ifconfig相关的工具" class="headerlink" title="网卡正常开启的情况下几乎可以确定是没有安装ifconfig相关的工具"></a>网卡正常开启的情况下几乎可以确定是没有安装ifconfig相关的工具</h3><p>具体操作如下：</p>
<ol>
<li><p><code>yum provides ifconfig</code>查看一下ifconfig命令属于哪个包。</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210127144323158.png" alt="image-20210127144323158"></p>
</li>
</ol>
<p><strong>net-tools!</strong></p>
<ol start="2">
<li><p><code>yum install net-tools</code></p>
<p>安装过程中出现的选项选择yes即可。</p>
</li>
</ol>
<h3 id="输入ifconfig命令进行测试"><a href="#输入ifconfig命令进行测试" class="headerlink" title="输入ifconfig命令进行测试"></a>输入ifconfig命令进行测试</h3><p>(笔者之前已用dhclient工具进行了固定ip)</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210127144822695.png" alt="image-20210127144822695"></p>
<p><strong>DONE!</strong></p>
]]></content>
      <categories>
        <category>小问题</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Linux下启动Tomcat遇到Neither the JAVA_HOME nor the JRE_HOME environment variable is defined</title>
    <url>/2020/09/10/%E8%A7%A3%E5%86%B3Linux%E4%B8%8B%E5%90%AF%E5%8A%A8Tomcat%E9%81%87%E5%88%B0Neither%20the%20JAVA_HOME%20nor%20the%20JRE_HOME%20environment%20variable%20is%20defined/</url>
    <content><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>在CentOS下安装完Tomcat环境后设置了一下快速启动，却发现在执行<code>service tomcat start</code> 时出现报错</p>
<p>具体报错如下：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210127210002226.png" alt="image-20210127210002226"></p>
<p>就是JAVA_HOME和JRE_HOME的环境变量都没有定义，要运行该命令至少需要其中一个环境变量。</p>
<p>说白了就是环境变量未配置。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><ol>
<li>首先找到自己JAVA_HOME的位置：</li>
</ol>
<p>笔者的为<code>JAVA_HOME=/usr/local/java/jdk1.8.0_281</code> </p>
<ol start="2">
<li> 然后进入tomcat的bin目录下：</li>
</ol>
<p>编辑<code>catalina.sh</code>文件：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210127211639363.png" alt="image-20210127211639363"></p>
<p>在空白处加入JAVA_HOME路径定义即可。（因为JAVA_HOME和JRE_HOME定义一个即可，所以笔者并未导入JRE_HOME路径，同样解决了该问题。）</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210127212035042.png" alt="image-20210127212035042"></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210127212009462.png" alt="image-20210127212009462"></p>
<p>启动成功!</p>
<p>DONE!</p>
]]></content>
      <categories>
        <category>小问题</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷键</title>
    <url>/2020/08/20/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[ <span id="more"></span>

<p>ctrl+shift+alt：多行操作<br>psvm：生成main()方法；<br>fori：生成for循环；<br>Ctrl+Alt+v：自动补齐返回值类型<br>ctrl+o：覆写方法<br>ctrl+i：实现接口中的方法<br>ctrl+shift+u：大小写转换<br>CTRL+SHIFT+Z：取消撤销<br>Alt＋Insert：生成构造方法、getter、setter<br>ctrl+y：删除当前行<br>Ctrl+Shift+J：将选中的行合并成一行<br>ctrl+g：定位到某一行<br>Ctrl+Shitft+向下箭头：将光标所在的代码块向下整体移动<br>Ctrl+Shift+向上箭头：将光标所在的代码块向上整体移动<br>Alt+Shift+向下箭头：将行向下移动<br>Alt+Shift+向上箭头：将行向上移动<br>Ctrl+F：在当前文件中查找<br>Ctrl+R：替换字符串<br>Ctrl+Shift+F:在全局文件中查找字符串<br>Ctrl+Shift+R：在全局中替换字符串<br>Ctrl+Shift+Enter：自动补齐{}或者分号;<br>Shift+Enter：在当前行的下方开始新行<br>Ctrl+Alt+Enter：在当前行的上方插入新行<br>Ctrl+Delete：删除光标所在至单词结尾处的所有字符</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Git在clone项目时遇到的Error</title>
    <url>/2020/08/10/%E8%A7%A3%E5%86%B3Git%E5%9C%A8clone%E9%A1%B9%E7%9B%AE%E6%97%B6%E7%9A%84fatal/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在找开源项目时，准备clone Github上著名的开源项目halo时发现git clone失败，具体报错如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error：RPC failed;curl 56 OpenSSLSSL_read:Connection was Reset, errno 10054</span><br><span class="line">fatal: the remote end hung up unexpectedly</span><br><span class="line">fatal； early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure>

<p>具体如下图：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210124144450379.png" alt="image-20210124144450379"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在检索解决方案的时候找到了多种方案：</p>
<h3 id="方案一：本解决方案为Stackoverflow上的高分回答。"><a href="#方案一：本解决方案为Stackoverflow上的高分回答。" class="headerlink" title="方案一：本解决方案为Stackoverflow上的高分回答。"></a>方案一：本解决方案为Stackoverflow上的高分回答。</h3><p>原回答如下：</p>
<p>（我要是没记错的话应该在 git config之前要先进行一次git init）</p>
<p>First, turn off compression:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.compression 0</span><br></pre></td></tr></table></figure>

<p>Next, let’s do a partial clone to truncate the amount of info coming down:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --depth 1 &lt;repo_URI&gt;</span><br></pre></td></tr></table></figure>

<p>When that works, go into the new directory and retrieve the rest of the clone:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch --unshallow </span><br></pre></td></tr></table></figure>

<p>or, alternately,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch --depth=2147483647</span><br></pre></td></tr></table></figure>

<p>Now, do a regular pull:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull --all</span><br></pre></td></tr></table></figure>

<p>I think there is a glitch with msysgit in the 1.8.x versions that exacerbates these symptoms, so another option is to try with an earlier version of git (&lt;= 1.8.3, I think).</p>
<p>这一套三板斧下来，应该可以解决80%的情况（其他答主所言），但是由于我最开始只在CSDN上看到解决方案，只进行了第一步问题并未得到解决。</p>
<h3 id="方案二：本方案为最后解决笔者问题的方案（同样源于Stackoverflow）"><a href="#方案二：本方案为最后解决笔者问题的方案（同样源于Stackoverflow）" class="headerlink" title="方案二：本方案为最后解决笔者问题的方案（同样源于Stackoverflow）"></a>方案二：本方案为最后解决笔者问题的方案（同样源于Stackoverflow）</h3><p>With this kind of error, I usually start by raising the <code>postBuffer</code> size by:（即增大postBuffer的值，524288000比特就是500兆的大小）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure>

<p>(some comments below report having to double the value):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.postBuffer 1048576000</span><br></pre></td></tr></table></figure>

<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>虽然可以clone项目了，但是不清楚error产生具体原因仍然未解决我们遇到的问题。</p>
<p>From the <a href="https://git-scm.com/docs/git-config"><code>git config</code> man page</a>, <code>http.postBuffer</code> is about:</p>
<blockquote>
<p>Maximum size in bytes of the buffer used by smart HTTP transports when POSTing data to the remote system.<br>For requests larger than this buffer size, HTTP/1.1 and <code>Transfer-Encoding: chunked</code> is used to avoid creating a massive pack file locally. Default is 1 MiB, which is sufficient for most requests.</p>
</blockquote>
<p>按照笔者的理解翻译一下，大致是说:</p>
<blockquote>
<p>http.postBuffer就是指HTTP协议在传输数据到远端时缓冲区容纳容量的最大比特数，对于请求超过了缓冲区大小的请求，HTTP/1.1和<code>Transfer-Encoding: chunked</code>会被用来避免在本地创建一个大文件。系统默认值是1兆比特，对于大多数请求而言是足够的。</p>
<p>即使是clone项目，也可能产生影响，目前来看error大概率是因为这个原因产生的。</p>
<p><a href="%22https://stackoverflow.com/users/136088/joe%22">StackOverflow的提问</a>在这里。</p>
</blockquote>
<hr>
<p>由于笔者也是初学者，文中涉及的问题和疏漏之处请多指点，关于产生问题的原因后续查阅也会继续补充。</p>
<p>多谢！</p>
]]></content>
      <categories>
        <category>小问题</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java SE学习笔记</title>
    <url>/2020/07/20/Java%20SE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>​                                       <strong>本文笔记整理自<a href="https://www.bilibili.com/video/BV12J41137hu?spm_id_from=333.999.0.0">狂神的Java入门视频</a></strong>.</p>
<p>大量笔记需要填充与拆分，且带我慢慢整理。</p>
<h2 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h2><h3 id="Markdown的常用语法"><a href="#Markdown的常用语法" class="headerlink" title="Markdown的常用语法"></a>Markdown的常用语法</h3><ol>
<li><p>#的数量决定几标题</p>
</li>
<li><p>*+-表示无序列表，可以嵌套</p>
</li>
<li><p>有序列表用1.2.3.表示</p>
</li>
<li><p><em>文字</em>表示斜体，<strong>文字</strong>黑体，<em><strong>文字</strong></em>加粗斜体，<del>文字</del>删除线。</p>
</li>
<li><p>&gt; 表示引用，&gt;&gt;和&gt;&gt;&gt;可以嵌套</p>
</li>
<li><p>—/***三个及以上表示分割线</p>
</li>
<li><p>[链接名字]（“链接地址”，“链接title”）。（“链接title”可以省略）（网址要写https:// or http://）</p>
</li>
<li><p>! [图片描述](图片地址)</p>
</li>
<li><p>两个`之间放代码，两个``` 之间放语言标识和代码块。</p>
</li>
</ol>
<h3 id="写Blog"><a href="#写Blog" class="headerlink" title="写Blog"></a>写Blog</h3><p>Typora,语雀，CSDN，简书，博客园……</p>
<h2 id="常见的Dos命令"><a href="#常见的Dos命令" class="headerlink" title="常见的Dos命令"></a>常见的Dos命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#盘符切换</span></span><br><span class="line"><span class="comment">#查看当前目录下的所有文件 dir</span></span><br><span class="line"><span class="comment">#切换目录 cd</span></span><br><span class="line"><span class="comment">#清屏 cls</span></span><br><span class="line"><span class="comment">#退出终端 exit</span></span><br><span class="line"><span class="comment">#查看电脑的ip ipconfig</span></span><br><span class="line"><span class="comment">#打开应用 </span></span><br><span class="line">	calc(计算器)</span><br><span class="line">	mspaint</span><br><span class="line">	notepad</span><br><span class="line"><span class="comment">#ping</span></span><br><span class="line"><span class="comment">#文件操作</span></span><br><span class="line">	md 目录名</span><br><span class="line">	rd 目录名</span><br><span class="line">	<span class="built_in">cd</span>&gt; 文件名（创建文件）</span><br><span class="line">	del 文件名</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="常见的IDEA快捷键"><a href="#常见的IDEA快捷键" class="headerlink" title="常见的IDEA快捷键"></a>常见的IDEA快捷键</h2><ol>
<li>psvm + 回车          主函数 </li>
<li>sout + 回车            输出语句 </li>
<li>win + shift + s        win10 截图 </li>
<li>ctrl + D                    复制当前行到下一行。 </li>
<li>Alt + shift + F10 改为 ctrl + Enter 表示允许程序 </li>
<li>Alt + Insert 改为 Alt+空格 表示 Generate</li>
</ol>
<h3 id="1-Ctrl"><a href="#1-Ctrl" class="headerlink" title="1.Ctrl"></a>1.Ctrl</h3><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + F</td>
<td>在当前文件进行文本查找 （必备）</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>在当前文件进行文本替换 （必备）</td>
</tr>
<tr>
<td>Ctrl + Z</td>
<td>撤销 （必备）</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td>删除光标所在行 或 删除选中的行 （必备）</td>
</tr>
<tr>
<td>Ctrl + X</td>
<td>剪切光标所在行 或 剪切选择内容</td>
</tr>
<tr>
<td>Ctrl + C</td>
<td>复制光标所在行 或 复制选择内容</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备）</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）</td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>显示最近打开的文件记录列表 （必备）</td>
</tr>
<tr>
<td>Ctrl + N</td>
<td>根据输入的 <strong>类名</strong> 查找类文件 （必备）</td>
</tr>
<tr>
<td>Ctrl + G</td>
<td>在当前文件跳转到指定行处</td>
</tr>
<tr>
<td>Ctrl + J</td>
<td>插入自定义动态代码模板 （必备）</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>方法参数提示显示 （必备）</td>
</tr>
<tr>
<td>Ctrl + Q</td>
<td>光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>前往当前光标所在的方法的父类的方法 / 接口定义 （必备）</td>
</tr>
<tr>
<td>Ctrl + B</td>
<td>进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备）</td>
</tr>
<tr>
<td>Ctrl + K</td>
<td>版本控制提交项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td>Ctrl + T</td>
<td>版本控制更新项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>显示当前类的层次结构</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>选择可重写的方法</td>
</tr>
<tr>
<td>Ctrl + I</td>
<td>选择可继承的方法</td>
</tr>
<tr>
<td>Ctrl + +</td>
<td>展开代码</td>
</tr>
<tr>
<td>Ctrl + -</td>
<td>折叠代码</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）</td>
</tr>
<tr>
<td>Ctrl + [</td>
<td>移动光标到当前所在代码的花括号开始位置</td>
</tr>
<tr>
<td>Ctrl + ]</td>
<td>移动光标到当前所在代码的花括号结束位置</td>
</tr>
<tr>
<td>Ctrl + F1</td>
<td>在光标所在的错误代码处显示错误信息 （必备）</td>
</tr>
<tr>
<td>Ctrl + F3</td>
<td>调转到所选中的词的下一个引用位置 （必备）</td>
</tr>
<tr>
<td>Ctrl + F4</td>
<td>关闭当前编辑文件</td>
</tr>
<tr>
<td>Ctrl + F8</td>
<td>在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td>
</tr>
<tr>
<td>Ctrl + F9</td>
<td>执行 Make Project 操作</td>
</tr>
<tr>
<td>Ctrl + F11</td>
<td>选中文件 / 文件夹，使用助记符设定 / 取消书签 （必备）</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td>弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td>编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td>
</tr>
<tr>
<td>Ctrl + End</td>
<td>跳到文件尾</td>
</tr>
<tr>
<td>Ctrl + Home</td>
<td>跳到文件头</td>
</tr>
<tr>
<td>Ctrl + Space</td>
<td>基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号 （必备）</td>
</tr>
<tr>
<td>Ctrl + Delete</td>
<td>删除光标后面的单词或是中文句 （必备）</td>
</tr>
<tr>
<td>Ctrl + BackSpace</td>
<td>删除光标前面的单词或是中文句 （必备）</td>
</tr>
<tr>
<td>Ctrl + 1,2,3…9</td>
<td>定位到对应数值的书签位置 （必备）</td>
</tr>
<tr>
<td>Ctrl + 左键单击</td>
<td>在打开的文件标题上，弹出该文件路径 （必备）</td>
</tr>
<tr>
<td>Ctrl + 光标定位</td>
<td>按 Ctrl 不要松开，会显示光标所在的类信息摘要</td>
</tr>
<tr>
<td>Ctrl + 左方向键</td>
<td>光标跳转到当前单词 / 中文句的左侧开头位置 （必备）</td>
</tr>
<tr>
<td>Ctrl + 右方向键</td>
<td>光标跳转到当前单词 / 中文句的右侧开头位置 （必备）</td>
</tr>
<tr>
<td>Ctrl + 前方向键</td>
<td>等效于鼠标滚轮向前效果 （必备）</td>
</tr>
<tr>
<td>Ctrl + 后方向键</td>
<td>等效于鼠标滚轮向后效果 （必备）</td>
</tr>
</tbody></table>
<h3 id="2-Alt"><a href="#2-Alt" class="headerlink" title="2.Alt"></a>2.Alt</h3><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Alt + `|显示版本控制常用操作菜单弹出层 （必备）</td>
<td></td>
</tr>
<tr>
<td>Alt + Q</td>
<td>弹出一个提示，显示当前类的声明 / 上下文信息</td>
</tr>
<tr>
<td>Alt + F1</td>
<td>显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择 （必备）</td>
</tr>
<tr>
<td>Alt + F2</td>
<td>对于前面页面，显示各类浏览器打开目标选择弹出层</td>
</tr>
<tr>
<td>Alt + F3</td>
<td>选中文本，逐个往下查找相同文本，并高亮显示</td>
</tr>
<tr>
<td>Alt + F7</td>
<td>查找光标所在的方法 / 变量 / 类被调用的地方</td>
</tr>
<tr>
<td>Alt + F8</td>
<td>在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td>
</tr>
<tr>
<td>Alt + Home</td>
<td>定位 / 显示到当前文件的 Navigation Bar</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等 （必备）</td>
</tr>
<tr>
<td>Alt + 左方向键</td>
<td>切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换 （必备）</td>
</tr>
<tr>
<td>Alt + 右方向键</td>
<td>按切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换 （必备）</td>
</tr>
<tr>
<td>Alt + 前方向键</td>
<td>当前光标跳转到当前文件的前一个方法名位置 （必备）</td>
</tr>
<tr>
<td>Alt + 后方向键</td>
<td>当前光标跳转到当前文件的后一个方法名位置 （必备）</td>
</tr>
<tr>
<td>Alt + 1,2,3…9</td>
<td>显示对应数值的选项卡，其中 1 是 Project 用得最多 （必备）</td>
</tr>
</tbody></table>
<h3 id="3-Shift"><a href="#3-Shift" class="headerlink" title="3.Shift"></a>3.Shift</h3><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Shift + F1</td>
<td>如果有外部文档可以连接外部文档</td>
</tr>
<tr>
<td>Shift + F2</td>
<td>跳转到上一个高亮错误 或 警告位置</td>
</tr>
<tr>
<td>Shift + F3</td>
<td>在查找模式下，查找匹配上一个</td>
</tr>
<tr>
<td>Shift + F4</td>
<td>对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td>
</tr>
<tr>
<td>Shift + F6</td>
<td>对文件 / 文件夹 重命名</td>
</tr>
<tr>
<td>Shift + F7</td>
<td>在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td>
</tr>
<tr>
<td>Shift + F8</td>
<td>在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</td>
</tr>
<tr>
<td>Shift + F9</td>
<td>等效于点击工具栏的 Debug 按钮</td>
</tr>
<tr>
<td>Shift + F10</td>
<td>等效于点击工具栏的 Run 按钮</td>
</tr>
<tr>
<td>Shift + F11</td>
<td>弹出书签显示层 （必备）</td>
</tr>
<tr>
<td>Shift + Tab</td>
<td>取消缩进 （必备）</td>
</tr>
<tr>
<td>Shift + ESC</td>
<td>隐藏当前 或 最后一个激活的工具窗口</td>
</tr>
<tr>
<td>Shift + End</td>
<td>选中光标到当前行尾位置</td>
</tr>
<tr>
<td>Shift + Home</td>
<td>选中光标到当前行头位置</td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>开始新一行。光标所在行下空出一行，光标定位到新行位置 （必备）</td>
</tr>
<tr>
<td>Shift + 左键单击</td>
<td>在打开的文件名上按此快捷键，可以关闭当前打开文件 （必备）</td>
</tr>
<tr>
<td>Shift + 滚轮前后滚动</td>
<td>当前文件的横向滚动轴滚动 （必备）</td>
</tr>
</tbody></table>
<h3 id="4-Ctrl-Alt"><a href="#4-Ctrl-Alt" class="headerlink" title="4.Ctrl + Alt"></a>4.Ctrl + Alt</h3><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Alt + L</td>
<td>格式化代码，可以对当前文件和整个包目录使用 （必备）</td>
</tr>
<tr>
<td>Ctrl + Alt + O</td>
<td>优化导入的类，可以对当前文件和整个包目录使用 （必备）</td>
</tr>
<tr>
<td>Ctrl + Alt + I</td>
<td>光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td>
</tr>
<tr>
<td>Ctrl + Alt + T</td>
<td>对选中的代码弹出环绕选项弹出层 （必备）</td>
</tr>
<tr>
<td>Ctrl + Alt + J</td>
<td>弹出模板选择窗口，将选定的代码加入动态模板中</td>
</tr>
<tr>
<td>Ctrl + Alt + H</td>
<td>调用层次</td>
</tr>
<tr>
<td>Ctrl + Alt + B</td>
<td>在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td>
</tr>
<tr>
<td>Ctrl + Alt + C</td>
<td>重构-快速提取常量</td>
</tr>
<tr>
<td>Ctrl + Alt + F</td>
<td>重构-快速提取成员变量</td>
</tr>
<tr>
<td>Ctrl + Alt + V</td>
<td>重构-快速提取变量</td>
</tr>
<tr>
<td>Ctrl + Alt + Y</td>
<td>同步、刷新</td>
</tr>
<tr>
<td>Ctrl + Alt + S</td>
<td>打开 IntelliJ IDEA 系统设置 （必备）</td>
</tr>
<tr>
<td>Ctrl + Alt + F7</td>
<td>显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td>
</tr>
<tr>
<td>Ctrl + Alt + F11</td>
<td>切换全屏模式</td>
</tr>
<tr>
<td>Ctrl + Alt + Enter</td>
<td>光标所在行上空出一行，光标定位到新行 （必备）</td>
</tr>
<tr>
<td>Ctrl + Alt + Home</td>
<td>弹出跟当前文件有关联的文件弹出层</td>
</tr>
<tr>
<td>Ctrl + Alt + Space</td>
<td>类名自动完成</td>
</tr>
<tr>
<td>Ctrl + Alt + 左方向键</td>
<td>退回到上一个操作的地方 （必备）</td>
</tr>
<tr>
<td>Ctrl + Alt + 右方向键</td>
<td>前进到上一个操作的地方 （必备）</td>
</tr>
<tr>
<td>Ctrl + Alt + 前方向键</td>
<td>在查找模式下，跳到上个查找的文件</td>
</tr>
<tr>
<td>Ctrl + Alt + 后方向键</td>
<td>在查找模式下，跳到下个查找的文件</td>
</tr>
<tr>
<td>Ctrl + Alt + 右括号（]）</td>
<td>在打开多个项目的情况下，切换下一个项目窗口</td>
</tr>
<tr>
<td>Ctrl + Alt + 左括号（[）</td>
<td>在打开多个项目的情况下，切换上一个项目窗口</td>
</tr>
</tbody></table>
<h3 id="5-Ctrl-Shift"><a href="#5-Ctrl-Shift" class="headerlink" title="5.Ctrl + Shift"></a>5.Ctrl + Shift</h3><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Shift + F</td>
<td>根据输入内容查找整个项目 或 指定目录内文件 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + R</td>
<td>根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + J</td>
<td>自动将下一行合并到当前行末尾 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + Z</td>
<td>取消撤销 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td>递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + U</td>
<td>对选中的代码进行大 / 小写轮流转换 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + T</td>
<td>对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + C</td>
<td>复制当前文件磁盘路径到剪贴板 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + V</td>
<td>弹出缓存的最近拷贝的内容管理器弹出层</td>
</tr>
<tr>
<td>Ctrl + Shift + E</td>
<td>显示最近修改的文件列表的弹出层</td>
</tr>
<tr>
<td>Ctrl + Shift + H</td>
<td>显示方法层次结构</td>
</tr>
<tr>
<td>Ctrl + Shift + B</td>
<td>跳转到类型声明处 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + I</td>
<td>快速查看光标所在的方法 或 类的定义</td>
</tr>
<tr>
<td>Ctrl + Shift + A</td>
<td>查找动作 / 设置</td>
</tr>
<tr>
<td>Ctrl + Shift + /</td>
<td>代码块注释 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + [</td>
<td>选中从光标所在位置到它的顶部中括号位置 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + ]</td>
<td>选中从光标所在位置到它的底部中括号位置 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + +</td>
<td>展开所有代码 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + -</td>
<td>折叠所有代码 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + F7</td>
<td>高亮显示所有该选中文本，按Esc高亮消失 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + F8</td>
<td>在 Debug 模式下，指定断点进入条件</td>
</tr>
<tr>
<td>Ctrl + Shift + F9</td>
<td>编译选中的文件 / 包 / Module</td>
</tr>
<tr>
<td>Ctrl + Shift + F12</td>
<td>编辑器最大化 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + Space</td>
<td>智能代码提示</td>
</tr>
<tr>
<td>Ctrl + Shift + Enter</td>
<td>自动结束代码，行末自动添加分号 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + Backspace</td>
<td>退回到上次修改的地方 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + 1,2,3…9</td>
<td>快速添加指定数值的书签 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + 左键单击</td>
<td>把光标放在某个类变量上，按此快捷键可以直接定位到该类中 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + 左方向键</td>
<td>在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + 右方向键</td>
<td>在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + 前方向键</td>
<td>光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + 后方向键</td>
<td>光标放在方法名上，将方法移动到下一个方法前面，调整方法排序 （必备）</td>
</tr>
</tbody></table>
<h3 id="6-Alt-Shift"><a href="#6-Alt-Shift" class="headerlink" title="6.Alt + Shift"></a>6.Alt + Shift</h3><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Alt + Shift + N</td>
<td>选择 / 添加 task （必备）</td>
</tr>
<tr>
<td>Alt + Shift + F</td>
<td>显示添加到收藏夹弹出层 / 添加到收藏夹</td>
</tr>
<tr>
<td>Alt + Shift + C</td>
<td>查看最近操作项目的变化情况列表</td>
</tr>
<tr>
<td>Alt + Shift + I</td>
<td>查看项目当前文件</td>
</tr>
<tr>
<td>Alt + Shift + F7</td>
<td>在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td>
</tr>
<tr>
<td>Alt + Shift + F9</td>
<td>弹出 Debug 的可选择菜单</td>
</tr>
<tr>
<td>Alt + Shift + F10</td>
<td>弹出 Run 的可选择菜单</td>
</tr>
<tr>
<td>Alt + Shift + 左键双击</td>
<td>选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句 （必备）</td>
</tr>
<tr>
<td>Alt + Shift + 前方向键</td>
<td>移动光标所在行向上移动 （必备）</td>
</tr>
<tr>
<td>Alt + Shift + 后方向键</td>
<td>移动光标所在行向下移动 （必备）</td>
</tr>
</tbody></table>
<h3 id="7-Ctrl-Shift-Alt"><a href="#7-Ctrl-Shift-Alt" class="headerlink" title="7.Ctrl + Shift + Alt"></a>7.Ctrl + Shift + Alt</h3><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Shift + Alt + V</td>
<td>无格式黏贴 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + N</td>
<td>前往指定的变量 / 方法</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + S</td>
<td>打开当前项目设置 （必备）</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + C</td>
<td>复制参考信息</td>
</tr>
</tbody></table>
<h3 id="8-其他"><a href="#8-其他" class="headerlink" title="8.其他"></a>8.其他</h3><table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th><strong>介绍</strong></th>
</tr>
</thead>
<tbody><tr>
<td>F2</td>
<td>跳转到下一个高亮错误 或 警告位置 （必备）</td>
</tr>
<tr>
<td>F3</td>
<td>在查找模式下，定位到下一个匹配处</td>
</tr>
<tr>
<td>F4</td>
<td>编辑源 （必备）</td>
</tr>
<tr>
<td>F7</td>
<td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>
</tr>
<tr>
<td>F8</td>
<td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>
</tr>
<tr>
<td>F9</td>
<td>在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td>
</tr>
<tr>
<td>F11</td>
<td>添加书签 （必备）</td>
</tr>
<tr>
<td>F12</td>
<td>回到前一个工具窗口 （必备）</td>
</tr>
<tr>
<td>Tab</td>
<td>缩进 （必备）</td>
</tr>
<tr>
<td>ESC</td>
<td>从工具窗口进入代码文件窗口 （必备）</td>
</tr>
<tr>
<td>连按两次Shift</td>
<td>弹出 Search Everywhere 弹出层</td>
</tr>
</tbody></table>
<p><a href="%22https://www.jianshu.com/p/c31a934080a3%22">快捷键总结原文章</a></p>
<h2 id="相对无关内容"><a href="#相对无关内容" class="headerlink" title="相对无关内容"></a>相对无关内容</h2><h3 id="找开源项目的方式"><a href="#找开源项目的方式" class="headerlink" title="找开源项目的方式"></a>找开源项目的方式</h3><h4 id="高级检索（同样适用于Google）"><a href="#高级检索（同样适用于Google）" class="headerlink" title="高级检索（同样适用于Google）"></a>高级检索（同样适用于Google）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#in:name example		名字中有“example”</span></span><br><span class="line"><span class="comment">#in:readme example		readme中有“example”</span></span><br><span class="line"><span class="comment">#in:description example	描述中有“example”</span></span><br><span class="line"><span class="comment">#stars:&gt;1000		star&gt;1000</span></span><br><span class="line"><span class="comment">#forks:&gt;1000		fork&gt;1000</span></span><br><span class="line"><span class="comment">#pushed:&gt;2019-09-01		2019年9月1日后有更新的</span></span><br><span class="line"><span class="comment">#language:java		用Java编写的项目</span></span><br><span class="line"></span><br><span class="line">参考文档：https://docs.github.com/en/github/searching-for-information-on-github/searching-for-repositories</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Java基础知识"><a href="#Java基础知识" class="headerlink" title="Java基础知识"></a>Java基础知识</h2><h3 id="入门注意："><a href="#入门注意：" class="headerlink" title="入门注意："></a>入门注意：</h3><p>● 如果手工输入源程序，一定要注意大小写。尤其是类名为Welcome，而不是welcome或WELCOME。</p>
<p>● 编译器需要一个文件名（Welcome.java），而运行程序时，只需要指定类名（Welcome），不要带扩展名．java或．class。</p>
<h3 id="卸载JDK："><a href="#卸载JDK：" class="headerlink" title="卸载JDK："></a>卸载JDK：</h3><p>（从入门到卸载）</p>
<ol>
<li><p>删除Java的安装目录</p>
</li>
<li><p>删除JAVA_HOME</p>
</li>
<li><p>删除path下关于Java的目录</p>
</li>
<li><p>java -version检查</p>
</li>
</ol>
<h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3><p>强类型，严格定义</p>
<h4 id="基本数据类型（Primitive-Type）："><a href="#基本数据类型（Primitive-Type）：" class="headerlink" title="基本数据类型（Primitive Type）："></a>基本数据类型（Primitive Type）：</h4><p>八个：</p>
<ul>
<li><p>数值类型：</p>
<ul>
<li>整数类型：byte(1),short(2),int(4),long(8)</li>
<li>浮点类型：float(4),double(8)</li>
<li>字符类型：char（2）</li>
</ul>
</li>
<li><p>boolean类型:true/false</p>
<p>（字符串String不是关键字，是类）</p>
</li>
</ul>
<h4 id="引用数据类型-Reference-Type-："><a href="#引用数据类型-Reference-Type-：" class="headerlink" title="引用数据类型(Reference Type)："></a>引用数据类型(Reference Type)：</h4><ul>
<li>类</li>
<li>接口</li>
<li>数组</li>
</ul>
<h4 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h4><ul>
<li>自动类型转换：低转高</li>
<li>强制类型转换：高转低</li>
</ul>
<h4 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h4><ol>
<li> 少使用浮点数进行比较</li>
<li>进制：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">整数各种进制的字面量如下：</span><br><span class="line">十进制数，没有前缀</span><br><span class="line">二进制数，前缀是0b</span><br><span class="line">八进制数，前缀是0o</span><br><span class="line">十六进制数，前缀是0x</span><br><span class="line">let decimalInteger = 17</span><br><span class="line">let binaryInteger = 0b10001       // 二进制的17</span><br><span class="line">let octalInteger = 0o21           // 八进制的17</span><br><span class="line">let hexadecimalInteger = 0x11     // 十六进制的17</span><br></pre></td></tr></table></figure>

<p>可以使用十六进制表示浮点数值。例如，0.125=2-3可以表示成0x1.0p-3。在十六进制表示法中，使用p表示指数，而不是e。注意，尾数采用十六进制，指数采用十进制。指数的基数是2，而不是10。</p>
<hr>
<h3 id="变量和常量："><a href="#变量和常量：" class="headerlink" title="变量和常量："></a>变量和常量：</h3><h4 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h4><p>type varName [=value];</p>
<p>作用域：</p>
<p>类变量</p>
<p>实例变量</p>
<p>局部变量</p>
<h4 id="常量："><a href="#常量：" class="headerlink" title="常量："></a>常量：</h4><p>final MAX_A = 10;</p>
<p>命名规范：</p>
<ol>
<li>见名知意</li>
<li>驼峰命名（变量，方法）</li>
<li>类：首字母大写，驼峰命名</li>
<li>常量：大写+下划线</li>
<li>不要使用拼音命名</li>
</ol>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符:"></a>运算符:</h4><ul>
<li><p>算术运算符： +  -  *  /  %  ++  –</p>
</li>
<li><p>赋值运算符： =</p>
</li>
<li><p>关系运算符：&gt;  &lt;   &gt;=   &lt;=    ==     !=    instanceof</p>
</li>
<li><p>逻辑运算符: &amp;&amp;  ||  !</p>
</li>
<li><p>位运算符: &amp;   |    ^     ~    &gt;&gt;   &lt;&lt;    &gt;&gt;&gt;</p>
</li>
<li><p>条件运算符:    ?    :</p>
</li>
<li><p>扩展运算符: +=   -=    *=     /=  </p>
</li>
</ul>
<h4 id="包机制："><a href="#包机制：" class="headerlink" title="包机制："></a>包机制：</h4><ul>
<li><p>域名倒写</p>
</li>
<li><p>防止冲突</p>
</li>
<li><p>package在最前 import</p>
</li>
</ul>
<h4 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h4><p> 生成JDK帮助文档</p>
<p>javadoc:</p>
<ol>
<li>@author</li>
<li>@version</li>
<li>@since</li>
<li>@param</li>
<li>@return</li>
<li>@throws</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@author</span> Doke</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@param</span> args 命令参数</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@since</span> 8.0</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@throws</span> 没有异常输出</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译结束后，执行如下命令可生成doc文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javadoc -encoding UTF-8 -charset UTF-8 HelloWorld.java</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="顺序结构："><a href="#顺序结构：" class="headerlink" title="顺序结构："></a>顺序结构：</h4><p>程序默认执行顺序</p>
<h4 id="选择结构："><a href="#选择结构：" class="headerlink" title="选择结构："></a>选择结构：</h4><p>if 单选择结构</p>
<p>if-else多选择结构</p>
<p>if-else if-else多选择结构</p>
<p>switch：1. 支持String类型  2. case穿透现象 3. default  4. break</p>
<h4 id="循环结构："><a href="#循环结构：" class="headerlink" title="循环结构："></a>循环结构：</h4><p>while</p>
<p>do while</p>
<p>for</p>
<h4 id="增强for循环（for-each）"><a href="#增强for循环（for-each）" class="headerlink" title="增强for循环（for-each）"></a>增强for循环（for-each）</h4><ul>
<li><p>break&amp;continue&amp;return</p>
<p>break：跳出循环</p>
<p>continue：终止当次循环</p>
<p>带标签continue</p>
<p>return：结束方法运行</p>
</li>
</ul>
<hr>
<h3 id="方法（Method）："><a href="#方法（Method）：" class="headerlink" title="方法（Method）："></a>方法（Method）：</h3><p>Java方法是语句的集合，它们在一起执行一个功能。</p>
<p>​    方法是解决一类问题的步骤的有序组合</p>
<p>​    方法包含于类或对象中</p>
<p>​    方法在程序中被创建，在其他地方被引用</p>
<p>**修饰符 返回值 方法名 （参数名） {return 返回值；} **</p>
<h4 id="设计方法的原则："><a href="#设计方法的原则：" class="headerlink" title="设计方法的原则："></a>设计方法的原则：</h4><p>功能块，实现功能的语句块集合。设计方法最好保持方法的<strong>原子性</strong>，就是一个方法只完成一个功能，有利于后期扩展。</p>
<h4 id="方法的调用："><a href="#方法的调用：" class="headerlink" title="方法的调用："></a>方法的调用：</h4><p><strong>类名.方法   /   对象.方法</strong></p>
<h4 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递:"></a>值传递和引用传递:</h4><ul>
<li>call by value</li>
<li>call by reference</li>
</ul>
<h4 id="重载方法："><a href="#重载方法：" class="headerlink" title="重载方法："></a><strong>重载方法：</strong></h4><ol>
<li><p>在一个类中，有相同的函数名称，但形参不同的函数。</p>
</li>
<li><p>规则：</p>
</li>
</ol>
<ul>
<li>方法名称必须相同</li>
<li>参数列表必须不同（个数不同，类型不同，参数排列顺序不同等）。</li>
<li>方法的返回类型可以相同可以不同</li>
<li>仅仅返回类型不同不足以成为方法的重载  </li>
</ul>
<ol start="3">
<li>实现理论：方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，报错。</li>
</ol>
<h4 id="P-S"><a href="#P-S" class="headerlink" title="P.S."></a>P.S.</h4><ul>
<li><p>命令行传参：给main方法传递参数</p>
</li>
<li><p>可变长参数：…      必须放在最后一个参数</p>
</li>
<li><p><strong>递归：自己调用自己</strong></p>
</li>
<li><p><strong>静态方法与非静态方法比较：</strong>类的调用是否需要实例化（new）</p>
<p>静态方法是和类一起加载的！非静态方法是在类实例化之后才存在的。所以在静态方法中没法调用非静态方法。</p>
</li>
</ul>
<hr>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>new int[5]        {1,2,3,4,5}     同一类型</p>
<h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><p>通过下标拿到值</p>
<p>Array index out of Bounds</p>
<p>增强for循环遍历数组</p>
<h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p>int[] []</p>
<h4 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h4><h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><ul>
<li>冒泡排序</li>
<li>选择排序</li>
<li>插入排序</li>
<li>快速排序</li>
<li>归并排序</li>
<li>希尔排序</li>
<li>堆排序</li>
<li>桶排序（基数排序）</li>
</ul>
<hr>
<h3 id="面向对象（Object-Oriented-Programming）"><a href="#面向对象（Object-Oriented-Programming）" class="headerlink" title="面向对象（Object-Oriented Programming）"></a>面向对象（Object-Oriented Programming）</h3><ul>
<li><p>本质：<strong>以类的方式组织代码，以对象的方式封装数据。</strong></p>
</li>
<li><p>抽象</p>
</li>
<li><p>三大特性：</p>
<ul>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ul>
</li>
<li><p>类是对象的模板。先有对象后有类，类是对对象的抽象。</p>
</li>
</ul>
<p>​        类 = 属性 + 方法。</p>
<p>​         类实例化后会返回一个自己的对象</p>
<p>（<strong>PS：</strong>一个项目里应该只存在一个main方法）</p>
<ul>
<li><p>创建与对象初始化</p>
<p>使用new关键字创建对象：除了分配空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用</p>
<ul>
<li><p><strong>构造器</strong>：即构造方法，是在创建对象（即使用new关键字时）的时候必须要调用的。</p>
<p><em>特点如下：</em></p>
<p>1.必须和类的名字相同</p>
<p>2.必须没有返回类型，也不能写void</p>
<p><em>分类：</em></p>
<ul>
<li><p>无参构造器：实例化初始字段</p>
</li>
<li><p>有参构造器：<strong>一旦定义了有参构造，无参构造就必须显式定义</strong>，否则进行如下操作会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure>

<p>所以定义了有参构造，一定显式定义无参构造器。有参构造后即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">Student student = <span class="keyword">new</span> Student(<span class="string">&quot;gxx&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><em>作用：</em></p>
<p>1.new的本质是在调用构造器</p>
<p>2.初始化对象的值</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>P.S.    <strong>this</strong>指向的是这个类的实例</p>
<ul>
<li><p>创建对象的内存分析：</p>
<p>对象是通过引用来操作的： 栈 —-&gt;堆</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.demo03.Pet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Pet dog = <span class="keyword">new</span> Pet();</span><br><span class="line">        </span><br><span class="line">        dog.name = <span class="string">&quot;旺财&quot;</span>;</span><br><span class="line">        dog.age = <span class="number">3</span>;</span><br><span class="line">        dog.shout();</span><br><span class="line">        </span><br><span class="line">        System.out.println(dog.name);</span><br><span class="line">        Sysytem.out.println(dog.age);</span><br><span class="line">        </span><br><span class="line">        Pet cat = <span class="keyword">new</span> Pet();</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;叫了一声&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码的内存分配如下图：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210217170212349.png" alt="image-20210217170212349"></p>
<h4 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h4><p><em><strong>“高内聚，低耦合”</strong></em></p>
<p>属性私有 + 可操作属性的方法（public的get,set方法）</p>
<p>好处：1. 提高程序安全性</p>
<pre><code>        2. 隐藏代码实现细节
           3. 统一接口
           4. 系统可维护性增加
</code></pre>
<h4 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h4><p><strong>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模</strong></p>
<p><em><strong>extends</strong></em>，子类是对父类的扩展，两者之间的关系为 ***”is  a”***。</p>
<p>Java中只有单继承，没有多继承。</p>
<p>继承是类和类之间的一种关系，除此之外，类和类之间的关系还有依赖，组合，聚合等。</p>
<p>子类继承父类，就会拥有父类的全部方法。</p>
<p><em>私有的东西无法继承！</em></p>
<p>Java中所有类都继承于Object类。</p>
<p><strong>Super关键字</strong></p>
<p>调用父类字段和方法</p>
<ol>
<li><p> super调用父类的构造器，必须要在子类构造器的第一行（默认调用 ）</p>
</li>
<li><p>super必须只能出现在子类的方法或者构造方法中</p>
</li>
<li><p>super和this不能同时调用构造方法</p>
<p><strong>VS this:</strong></p>
<p>代表的对象不同：</p>
<p>​    this ：本身调用者这个对象</p>
<p>​    super：代表父类对象的应用</p>
<p>前提：</p>
<p>​    this:没有继承也可使用</p>
<p>​    super：只能在继承条件下使用</p>
<p>构造方法：</p>
<p>​    this();本类的构造</p>
<p>​    super();父类的构造</p>
</li>
</ol>
<p><strong>方法重写(@Override)</strong></p>
<p>需要有继承关系，子类重写父类的方法，方法体不同。</p>
<ol>
<li>方法名必须相同</li>
<li>参数列表必须相同</li>
<li>修饰符：范围可以扩大； pubilc &gt; Protected &gt;Default &gt;private</li>
<li>输出的异常：范围，可以被缩小，但不能扩大； Class Not Found Exception –&gt;Exception(大)</li>
</ol>
<p>非静态方法才能重写</p>
<p>静态方法，方法的调用只看左边。</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210217192359461.png" alt="image-20210217192359461"></p>
<h4 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h4><p>动态编译，增强可扩展性！</p>
<p>即同一种方法可以根据发送对象的不同而采用多种不同的行为方式。</p>
<p>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多。</p>
<p>存在条件：</p>
<ol>
<li><p>有继承关系</p>
</li>
<li><p>子类重写父类方法</p>
</li>
<li><p><strong>父类引用指向子类对象</strong></p>
<p> 重写后，执行子类方法！</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210217195209268.png" alt="image-20210217195209268"></p>
</li>
</ol>
<p>P.S. 多态是方法的多态，属性没有多态性。</p>
<p> 不能实现多态：</p>
<ol>
<li>static 静态方法，属于类，它不属于实例。</li>
<li>final 常量</li>
<li>private 方法</li>
</ol>
<p><strong>instanceof关键字</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(X <span class="keyword">instanceof</span> Y); <span class="comment">//能不能编译通过看X和Y是否有父子关系</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210217201742484.png" alt="image-20210217201742484"></p>
<p>//类型之间的转换 </p>
<p>子类转换为父类可能丢失一些方法</p>
<p><strong>static关键字</strong></p>
<p>静态字段和类一起加载，可以<code>类名.变量</code></p>
<p>非静态方法可以直接访问类中的静态方法。</p>
<ul>
<li><p>匿名代码块和静态代码块</p>
<p>静态代码块只执行一次</p>
<p>先执行静态代码块，然后是匿名代码块，最后构造方法</p>
</li>
</ul>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210218120535653.png" alt="image-20210218120535653"></p>
<ul>
<li><p>静态导入包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"></span><br><span class="line">pubilc <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(random());<span class="comment">//No error</span></span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="抽象类："><a href="#抽象类：" class="headerlink" title="抽象类："></a>抽象类：</h4><p><strong>abstract关键字</strong></p>
<p>约束!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="function">pubilc <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;<span class="comment">//抽象方法。只有名字，没有实现。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象类的所有方法，继承它的子类，都必须要实现它的方法，除非子类也是抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>不能new一个抽象类，只能靠子类去实现；约束</li>
<li>抽象类中可以写普通方法</li>
<li>抽象方法必须在抽象类中</li>
</ol>
<h4 id="接口："><a href="#接口：" class="headerlink" title="接口："></a>接口：</h4><p><strong>比较：</strong></p>
<p>普通类：只有具体实现</p>
<p>抽象类：具体实现和规范（抽象方法)都有！</p>
<p>接口：只有规范！自己无法写方法，专业的约束！约束和实现分离。</p>
<p><strong>接口的本质是契约。interface</strong></p>
<p>接口就是规范，定义的是一组规则，体现了现实世界“如果你是…则必须能…”的思想。</p>
<p>接口中的所有定义其实都是抽象的<code>public abstract</code></p>
<p>接口中所有定义的属性都是常量<code>pubilc static final</code> (一般不用)</p>
<p>接口都需要有实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>implements</strong>,实现了接口的类，就需要重写接口中的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>侧面实现多继承！ </p>
<p>只有一个方法的接口叫做函数式接口，可以使用lambda表达式简化</p>
<h4 id="内部类："><a href="#内部类：" class="headerlink" title="内部类："></a>内部类：</h4><p>在一个类的内部再定义一个类。</p>
<p>通过外部类来实例化内部类，可以获取外部类私有字段。</p>
<ol>
<li>成员内部类</li>
<li>静态内部类</li>
<li>局部内部类</li>
<li>匿名内部类（重点）</li>
</ol>
<hr>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>程序运行中出现的不期而至的各种状况。</p>
<ul>
<li><p>检查性异常</p>
<p>用户错误或问题引起的异常</p>
</li>
<li><p>运行时异常</p>
<p>可以在编译时被忽略</p>
</li>
<li><p>错误：不是异常</p>
</li>
</ul>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210218155426412.png" alt="image-20210218155426412"></p>
<h4 id="五个关键字："><a href="#五个关键字：" class="headerlink" title="五个关键字："></a>五个关键字：</h4><p><strong>try catch throw throws  finally ：</strong></p>
<p>throw手动抛出异常</p>
<p>throws方法抛出异常</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210218160504822.png" alt="image-20210218160504822"></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210218160524718.png" alt="image-20210218160524718"></p>
<h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>只需继承Exception类。</p>
<p>步骤：</p>
<ol>
<li>创建自定义异常类</li>
<li>在方法中通过throw关键字抛出异常对象</li>
<li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理异常；否则在方法的声明处通过throws关键字指明要抛出给方法调用着的异常，继续进行下一步操作。</li>
<li>在出现异常方法的调用者中捕获并处理异常。</li>
</ol>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul>
<li>处理运行时异常时，采用逻辑合理规避同时辅助try-catch处理</li>
<li>在多重catch块后面，可以加一个catch（Exception）来处理可能被遗漏的异常</li>
<li>对于不确定的代码，也可以加上try-catch，处理潜在的异常</li>
<li>尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出</li>
<li>具体如何去处理异常，需根据不同的业务需求和异常类型决定</li>
<li>尽量添加finally语句块去释放占用的资源</li>
</ul>
<hr>
<h2 id="Java高级特性"><a href="#Java高级特性" class="headerlink" title="Java高级特性"></a>Java高级特性</h2><h3 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h3><ul>
<li><p>Object类</p>
<ul>
<li>hashcode()</li>
<li>toString()</li>
<li>clone()</li>
<li>getClass()</li>
<li>notify()</li>
<li>wait()</li>
<li>equals()</li>
</ul>
</li>
<li><p>String类</p>
<p>不可变性 final</p>
<p>操作量较小</p>
</li>
<li><p>String Buffer</p>
<p>可变长 append();</p>
<p>多线程数据量较大</p>
<p>效率低，安全</p>
</li>
<li><p>String Builder</p>
<p>可变长 </p>
<p>单线程数据量较大</p>
<p>效率高不安全</p>
</li>
<li><p>Math类</p>
</li>
<li><p>Random类</p>
<p>生成随机数 UUID</p>
</li>
<li><p>File类</p>
<ul>
<li>创建文件</li>
<li>查看文件</li>
<li>修改文件</li>
<li>删除文件</li>
</ul>
</li>
<li><p>包装类</p>
<p>自动装箱和拆箱</p>
</li>
<li><p>Date类</p>
<p>Date</p>
<p>SimpleDateFormat    yyyy-MM-dd HH:mm:ss</p>
<p>Calendar（建议使用）</p>
</li>
</ul>
<hr>
<h3 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h3><h4 id="Collection-实现Iterable接口"><a href="#Collection-实现Iterable接口" class="headerlink" title="Collection (实现Iterable接口)"></a>Collection (实现Iterable接口)</h4><ul>
<li><p>list(有序可重复)</p>
<ul>
<li><p>ArrayList</p>
<p>add/remove/contains/size</p>
</li>
<li><p>LinkedList</p>
<p>getFirst()</p>
<p>getLast()</p>
<p>removeFirst()</p>
<p>addFirst()</p>
</li>
<li><p>Vector</p>
</li>
<li><p>Stack</p>
</li>
</ul>
</li>
<li><p>set（无序不可重复）</p>
<ul>
<li>HashSet（常用）</li>
<li>TreeSet</li>
</ul>
</li>
<li><p>Iterator：迭代器</p>
</li>
</ul>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><ul>
<li><p>HashMap(重点，高频)</p>
<p>JDK1.7: 数组+链表</p>
<p>JDK1.8：hash表=数组+链表+红黑树</p>
</li>
</ul>
<h4 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h4><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p>&lt;&gt;约束，避免类型转换之间的问题</p>
<hr>
<h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><p>输入：InputStream</p>
<p>输出：OutputStream</p>
<h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><p>Reader</p>
<p>Writer</p>
<h4 id="节点流"><a href="#节点流" class="headerlink" title="节点流"></a>节点流</h4><p>CharArrayReader，Writer,InputStream,OutputStream</p>
<p>StringReader,Writer</p>
<p>pipe（管道流） PipedOutputStream</p>
<p>File（…）</p>
<h4 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a>处理流</h4><ul>
<li><p>buffer</p>
<p>bufferInputStream</p>
<p>bufferOutputStream</p>
<p>bufferReader</p>
<p>bufferWriter</p>
</li>
<li><p>data</p>
<p>DataInputStream</p>
<p>DataOutputStream</p>
</li>
<li><p>转换流</p>
<p>InputStreamReader</p>
<p>OutputStreamWriter</p>
</li>
<li><p>Filter</p>
<p>FilterInputStream</p>
<p>FilterOutputStream</p>
<p>FilterReader</p>
<p>FilterWriter</p>
</li>
<li><p>print</p>
<p>PrintWriter</p>
<p>PrintStream</p>
</li>
<li><p>object流</p>
</li>
<li><p><strong>序列化 反序列化</strong></p>
</li>
</ul>
<hr>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="进程（Process）和线程（Thread）"><a href="#进程（Process）和线程（Thread）" class="headerlink" title="进程（Process）和线程（Thread）"></a>进程（Process）和线程（Thread）</h4><p><strong>程序</strong>是指令和数据的有序集合，本身无运行含义，是一个静态概念。</p>
<p><strong>进程</strong>则是执行程序的一次执行过程，它是一个动态的概念。是系统资源的分配的单位。</p>
<p><strong>线程</strong>，一个进程中包含多个线程。</p>
<h4 id="线程创建的方式"><a href="#线程创建的方式" class="headerlink" title="线程创建的方式"></a>线程创建的方式</h4><ul>
<li><p>Thread   class        继承Thread类(<strong>不推荐使用：避免OOP单继承局限性</strong>)</p>
<ul>
<li><p>自定义线程类继承Thread类</p>
</li>
<li><p>重写run()方法，编写线程执行体</p>
</li>
<li><p>创建线程对象，调用start()方法启动线程</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在看代码&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">pubilc <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//main线程  主线程</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建一个线程对象</span></span><br><span class="line">        TestThread1 testthread1 = <span class="keyword">new</span> TestThread1();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用start()方法开启线程</span></span><br><span class="line">        testthread1.start();</span><br><span class="line">        <span class="comment">//testthread1.run(); //run()方法不是开启线程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2000</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在学习多线程&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210222125848469.png"></p>
<p><strong>线程开启不一定立即执行，由CPU调度执行</strong></p>
</li>
</ul>
<p>P.S <em><strong>利用多线程下载图片</strong></em></p>
<p>准备commons-io放入lib中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//练习Thread,实现多线程下载图片</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestThread1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestThread1</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Webdownloader webdownloader = <span class="keyword">new</span> Webdownloader();</span><br><span class="line">        webdownloader.downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载了文件名为：&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThread1 t1 = <span class="keyword">new</span> TestThread1(<span class="string">&quot;http://e.hiphotos.baidu.com/image/pic/item/a1ec08fa513d2697e542494057fbb2fb4316d81e.jpg&quot;</span>,<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        TestThread1 t2 = <span class="keyword">new</span> TestThread1(<span class="string">&quot;http://c.hiphotos.baidu.com/image/pic/item/30adcbef76094b36de8a2fe5a1cc7cd98d109d99.jpg&quot;</span>,<span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">        TestThread1 t3 = <span class="keyword">new</span> TestThread1(<span class="string">&quot;http://h.hiphotos.baidu.com/image/pic/item/7c1ed21b0ef41bd5f2c2a9e953da81cb39db3d1d.jpg&quot;</span>,<span class="string">&quot;3.jpg&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Webdownloader</span></span>&#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span>   </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(IOException e)</span><br><span class="line">    &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">&quot;IO异常，downloader方法出现问题&quot;</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210222142444870.png" alt="image-20210222142444870"></p>
<p><strong>Done！</strong></p>
<ul>
<li><p>Runnnable             实现Runnnable接口（<strong>推荐使用：避免单继承局限性，灵活。方便一个对象被多个线程使用</strong>）</p>
<ul>
<li><p>定义MyRunnable类<strong>实现Runnnable接口</strong></p>
</li>
<li><p>**实现run()**方法，编写线程执行体</p>
</li>
<li><p>创建线程对象，调用<strong>start()方法</strong>启动线程</p>
<p><em><strong>传入目标对象+Thread对象.start()</strong></em></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; <span class="number">200</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在看代码&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建runnable接口的实现类对象</span></span><br><span class="line">        TestThread2 testThread2 = <span class="keyword">new</span> TestThread2();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建线程对象，通过线程对象来开启我们的线程，代理</span></span><br><span class="line">        <span class="comment">//Thread thread = new Thread(testThread2);</span></span><br><span class="line">        <span class="comment">//thread.start();</span></span><br><span class="line">        <span class="comment">//上面两句可以简化为下面一句</span></span><br><span class="line">        <span class="keyword">new</span> Thread(testThread2).start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在学习多线程---&quot;</span>)；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210223121338511.png" alt="image-20210223121338511"></p>
<p>P.S. <em><strong>初始并发实例</strong></em></p>
<p>买车票：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java;</span><br><span class="line"><span class="comment">//多个线程同时操作同一个对象</span></span><br><span class="line"><span class="comment">//买火车票的例子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread4</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNumbers = <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span>(ticketNumbers&lt;=<span class="number">0</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到了第&quot;</span> + ticketNumbers-- + <span class="string">&quot;票&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThread4 ticket = <span class="keyword">new</span> TestThread4();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;黄牛党&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210223125850321.png" alt="image-20210223125850321">            <img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210225114014753.png" alt="image-20210225114014753"></p>
<p>每次运行结果不一。</p>
<p><strong>发现问题：多个线程操作同一个资源的情况下，线程不安全，数据紊乱。</strong></p>
<p><em><strong>案例：龟兔赛跑</strong></em></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210223140251136.png" alt="image-20210223140251136"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java;</span><br><span class="line"><span class="comment">//模拟龟兔赛跑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Race</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//胜利者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//模拟兔子休息</span></span><br><span class="line">            <span class="keyword">if</span>(Thread.currentThread().getName().equals(<span class="string">&quot;兔子&quot;</span>) &amp;&amp; i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断比赛是否结束</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = gameOver(i);</span><br><span class="line">            <span class="comment">//如果比赛结束了，就停止程序</span></span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;跑了&quot;</span>+i+<span class="string">&quot;步&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否完成比赛</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">gameOver</span><span class="params">(<span class="keyword">int</span> steps)</span></span>&#123;</span><br><span class="line">     <span class="comment">//判断是否有胜利者</span></span><br><span class="line">        <span class="keyword">if</span>(winner!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//已经存在胜利者了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span>(steps==<span class="number">100</span>)&#123;</span><br><span class="line">              winner = Thread.currentThread().getName();</span><br><span class="line">              System.out.println(<span class="string">&quot;Winner is&quot;</span> + winner);</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Race race = <span class="keyword">new</span> Race();</span><br><span class="line">        <span class="keyword">new</span> Thread(race,<span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(race,<span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210223142254519.png" alt="image-20210223142254519"></p>
<p><strong>DONE!</strong></p>
<ul>
<li><p>Callable                  实现Callable接口</p>
<ul>
<li><p>实现Callable接口，需要返回值类型</p>
</li>
<li><p>重写call方法，需要抛出异常</p>
</li>
<li><p>创建目标对象</p>
</li>
<li><p>创建执行任务 <code>ExecutorService ser = Executors.newFixedThreadPool(1);</code></p>
</li>
<li><p>提交执行<code>Future&lt;Boolean&gt; result1 = ser.submit(t1);</code></p>
</li>
<li><p>获取结果：<code>boolean r1 =  result1.get();</code></p>
</li>
<li><p>关闭服务：<code>ser.shutdownNow();</code></p>
<p><strong>实现Callable接口来下载网络图片：</strong></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现Callable接口来下载网络图片：</span></span><br><span class="line"><span class="keyword">package</span> com.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCallable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCallable</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Webdownloader webdownloader = <span class="keyword">new</span> Webdownloader();</span><br><span class="line">        webdownloader.downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载了文件名为：&quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        TestCallable t1 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;http://e.hiphotos.baidu.com/image/pic/item/a1ec08fa513d2697e542494057fbb2fb4316d81e.jpg&quot;</span>,<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        TestCallable t2 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;http://c.hiphotos.baidu.com/image/pic/item/30adcbef76094b36de8a2fe5a1cc7cd98d109d99.jpg&quot;</span>,<span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">        TestCallable t3 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;http://h.hiphotos.baidu.com/image/pic/item/7c1ed21b0ef41bd5f2c2a9e953da81cb39db3d1d.jpg&quot;</span>,<span class="string">&quot;3.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//创建执行任务</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(t3);</span><br><span class="line">        <span class="comment">//获取结果</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> resurt1 =  r1.get();</span><br><span class="line">            <span class="keyword">boolean</span> resurt2 = r2.get();</span><br><span class="line">            <span class="keyword">boolean</span> resurt3 =  r3.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Webdownloader</span></span>&#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span>   </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常，downloader方法出现问题&quot;</span>);</span><br><span class="line">        &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>callable的好处：</p>
<ol>
<li>可以定义返回值</li>
<li>可以抛出异常</li>
</ol>
<h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>真实对象和代理对象都要实现同一个接口</p>
<p>代理对象要代理真实角色</p>
<p><em><strong>好处：</strong></em></p>
<p>代理对象可以做很多真实对象做不了的事情</p>
<p>真实对象专注做自己的事情</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结婚</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">           You you = <span class="keyword">new</span> You();<span class="comment">//你要结婚</span></span><br><span class="line">           <span class="comment">//you.HappyMarry();本来的调用方法</span></span><br><span class="line">           WeddingCompany weddingCompany = <span class="keyword">new</span> WeddingCompany(you);</span><br><span class="line">           weddingCompany.HappyMarry();</span><br><span class="line">           <span class="comment">//new WeddingCompany(new You()).HappyMarry();//一行取代上面两行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//真实角色，你去结婚</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***要结婚了，超开心&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理角色，帮助你结婚</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeddingCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代理谁--&gt;真实目标角色</span></span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">WeddingCompany</span><span class="params">(Marry target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="keyword">this</span>.target.HappyMarry();<span class="comment">//这就是真实对象</span></span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结婚之前，准备婚礼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;结婚之后，收取尾款&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>new Thread(  ()  -&gt;System.out.pirntln(&quot;***&quot;)   ).start();//lambda表达式</code>  </p>
<p>静态代理，真实对象是Runnable接口</p>
<p><code>new WeddingCompany(new You()).HappyMarry();</code></p>
<p>即new Thread(Runnable).start();</p>
<p><strong>线程底层实现模式！</strong></p>
<h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><p><strong>函数式编程</strong></p>
<p>好处：</p>
<ul>
<li>避免内部类定义过多</li>
<li>代码简洁</li>
<li>去掉无意义代码，留下核心逻辑</li>
</ul>
<h5 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a><strong>函数式接口</strong></h5><p>任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于函数式接口，可以通过Lambda表达式来创建该接口的对象。</p>
<h5 id="推导lambda表达式，层层简化"><a href="#推导lambda表达式，层层简化" class="headerlink" title="推导lambda表达式，层层简化"></a><strong>推导lambda表达式，层层简化</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">推导lambda表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//3.静态内部类（由于实现类放在外面十分麻烦）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I like lambda2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ILike like = <span class="keyword">new</span> Like();<span class="comment">//用接口new一个实现类</span></span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> Like2();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span>  <span class="title">Like3</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda3&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        like = <span class="keyword">new</span> Like3();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">         <span class="comment">//5.匿名内部类,没有类的名称，必须借助接口或者父类</span></span><br><span class="line">        like = <span class="keyword">new</span> ILike() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda4&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;<span class="comment">//这是语句，写分号;</span></span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.用lambda简化</span></span><br><span class="line">        like = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I like lambda5&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">ILike</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;<span class="comment">//在接口中隐式声明，自动abstract</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I like lambda&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>传参形式：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   static class Love implements ILove&#123;</span></span><br><span class="line"><span class="comment">        @Override</span></span><br><span class="line"><span class="comment">        public void love(String a) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;I love gxx1--&gt;&quot;+a);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       class Love implements ILove&#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void love(String a) &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;I love gxx2--&gt;&quot;+a);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        ILove love = new ILove()&#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void love(String a) &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;I love gxx3--&gt;&quot;+a);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda表达式</span></span><br><span class="line">        ILove love = (String a)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I love gxx4--&gt;&quot;</span>+a);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda表达式简化</span></span><br><span class="line">        <span class="comment">// 简化1：去掉参数类型</span></span><br><span class="line">        love = (a)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I love gxx5--&gt;&quot;</span>+a);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//简化2：简化括号</span></span><br><span class="line">        love = a -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I love gxx6--&gt;&quot;</span>+a);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//简化3：去掉花括号</span></span><br><span class="line">        love = a -&gt; System.out.println(<span class="string">&quot;I love gxx7--&gt;&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//总结：</span></span><br><span class="line">            <span class="comment">//lambda只有一行代码才能去掉花括号，否则要用代码块包裹。</span></span><br><span class="line">            <span class="comment">//前提是接口为函数式接口</span></span><br><span class="line">            <span class="comment">//多个参数也可以去掉参数类型，要去掉就都去掉，必须加上括号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        love.love(<span class="string">&quot;forever&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILove</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">love</span><span class="params">(String a)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Love implements ILove&#123;</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void love(String a) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;I love gxx--&gt;&quot;+a);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h5><ol>
<li><p>lambda只有一行代码才能去掉花括号，否则要用代码块包裹。</p>
</li>
<li><p>前提是接口为函数式接口 </p>
</li>
<li><p>多个参数也可以去掉参数类型，要去掉就都去掉，必须加上括号</p>
</li>
</ol>
<p><strong>P.S.    Runnable是函数式接口</strong> </p>
<h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><p>五大状态：创建状态，就绪状态，运行状态，阻塞状态，死亡状态</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210224131407622.png" alt="image-20210224131407622"></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210224163159999.png" alt="image-20210224163159999"></p>
<p><strong>线程方法：</strong></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210224163326572.png" alt="image-20210224163326572"></p>
<h5 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h5><ol>
<li>建议线程正常停止–&gt;利用次数，不建议死循环</li>
<li>建议使用标志位–&gt;设置一个标志位</li>
<li>不要使用stop/destroy等过时或者JDK不建议使用的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.state;</span><br><span class="line"><span class="comment">//测试stop</span></span><br><span class="line"><span class="comment">//1. 建议线程正常停止--&gt;利用次数，不建议死循环</span></span><br><span class="line"><span class="comment">//2.建议使用标志位--&gt;设置一个标志位</span></span><br><span class="line"><span class="comment">//3.不要使用stop/destroy等过时或者JDK不建议使用的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.设置一个标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run....Thread&quot;</span>+i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.设置一个公开的方法停止线程，转换标志位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestStop testStop = <span class="keyword">new</span> TestStop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">999</span>)&#123;</span><br><span class="line">                <span class="comment">//调用stop方法切换标志位，让线程停止</span></span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程停止了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210225131109672.png" alt="image-20210225131109672"></p>
<p>***Q:***为什么900的时候线程已经停止，但是多次执行仍可能出现main999后仍有run….Thread???</p>
<h5 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h5><ul>
<li>sleep(时间)指定当前线程阻塞的毫秒数</li>
<li>sleep存在异常Interrupted Exception</li>
<li>sleep时间达到后线程进入就绪状态</li>
<li>sleep可以模拟网络延时，倒计时等</li>
<li>每一个对象都有一个锁，sleep不会释放锁</li>
</ul>
<p>模拟网络延时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.state;</span><br><span class="line"><span class="comment">//模拟网络延时：放大问题的发生性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNumbers = <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ticketNumbers&lt;=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//模拟延时</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到了第&quot;</span> + ticketNumbers-- + <span class="string">&quot;票&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestSleep ticket = <span class="keyword">new</span> TestSleep();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;黄牛党&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模拟倒计时/打印系统当前时间：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模拟倒计时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tenDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="comment">// tenDown();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印系统当前时间</span></span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">//获取系统当前时间</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>).format(startTime));</span><br><span class="line">            startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">//更新当前时间</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h5><ul>
<li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li>
<li>将线程从运行状态转为就绪状态</li>
<li><strong>让CPU重新调度，礼让不一定成功，看CPU心情！</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.state;</span><br><span class="line"><span class="comment">//测试礼让线程</span></span><br><span class="line"><span class="comment">//礼让不一定成功，看CPU心情</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyYield myYield = <span class="keyword">new</span> MyYield();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程开始执行&quot;</span>);</span><br><span class="line">        Thread.yield();<span class="comment">//礼让</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程停止执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210225133655243.png" alt="image-20210225133655243"><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210225133624124.png" alt="image-20210225133624124"></p>
<h5 id="线程强制执行-Join"><a href="#线程强制执行-Join" class="headerlink" title="线程强制执行_Join"></a>线程强制执行_Join</h5><p>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.state;</span><br><span class="line"><span class="comment">//测试join方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程vip来了&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="comment">//启动我们的线程</span></span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">200</span>)&#123;</span><br><span class="line">                thread.join();<span class="comment">//插队</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两交替执行，但是main200前join的线程一定执行完</span></span><br></pre></td></tr></table></figure>

<h5 id="观测线程状态"><a href="#观测线程状态" class="headerlink" title="观测线程状态"></a>观测线程状态</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.state;</span><br><span class="line"><span class="comment">//观察测试线程的状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread  thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;///////&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察状态</span></span><br><span class="line">        Thread.State state =  thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//NEW</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察启动后</span></span><br><span class="line">        thread.start();<span class="comment">//启动线程</span></span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//run</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(state != Thread.State.TERMINATED)&#123;</span><br><span class="line">            <span class="comment">//只要线程不终止，就一直输出状态</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            state = thread.getState();</span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210226142009355.png" alt="image-20210226142009355"></p>
<p><strong>总结：</strong></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210226142132834.png" alt="image-20210226142132834"></p>
<h5 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h5><ul>
<li><p>java提供了一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行</p>
</li>
<li><p>线程优先级用数字表示，范围1~10</p>
<p> Thread.MIN_PRIORITY = 1;</p>
<p> Thread.MAX_PRIORITY = 10;</p>
<p> Thread.NORM_PRIORITY = 5;</p>
</li>
<li><p>getPriority().setPriority(int xxx)</p>
<p>先设置优先级，后启动！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.state;</span><br><span class="line"><span class="comment">//测试线程的优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//主线程默认优先级</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line"></span><br><span class="line">        MyPriority myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t6 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先设置优先级，再启动</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t3.setPriority(<span class="number">4</span>);</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        t4.setPriority(Thread.MAX_PRIORITY);<span class="comment">//10</span></span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//t5.setPriority(-1);</span></span><br><span class="line">        <span class="comment">//t5.start();</span></span><br><span class="line">        <span class="comment">//ERROR!</span></span><br><span class="line">        <span class="comment">//t6.setPriority(11);</span></span><br><span class="line">        <span class="comment">//t6.start();</span></span><br><span class="line">        <span class="comment">//ERROR!</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="守护-daemon-线程"><a href="#守护-daemon-线程" class="headerlink" title="守护(daemon)线程"></a>守护(daemon)线程</h5><ul>
<li><p>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></p>
</li>
<li><p>虚拟机必须确保用户线程执行完毕</p>
</li>
<li><p>虚拟机不用等待守护线程执行完毕</p>
</li>
<li><p>如，后台记录操作日志，监控内存，垃圾回收等待….</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.state;</span><br><span class="line"><span class="comment">//测试守护线程</span></span><br><span class="line"><span class="comment">//上帝守护你</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaemon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        God god = <span class="keyword">new</span> God();</span><br><span class="line">        You you = <span class="keyword">new</span> You();</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(god);</span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>); <span class="comment">//默认是false表示用户线程，正常的线程都是用户线程...</span></span><br><span class="line"></span><br><span class="line">        thread.start();<span class="comment">//上帝守护线程启动</span></span><br><span class="line">        <span class="keyword">new</span> Thread(you).start();<span class="comment">//你 用户线程启动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上帝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上帝保佑你&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//你</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我一辈子喜欢你&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====goodbye world=======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><p>多个线程操作同一个资源</p>
<p><strong>并发：</strong>同一个对象被多个线程同时操作</p>
<p><strong>形成条件：队列 + 锁</strong></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210302112128156.png" alt="image-20210302112128156"></p>
<h5 id="三个线程不安全案例："><a href="#三个线程不安全案例：" class="headerlink" title="三个线程不安全案例："></a><strong>三个线程不安全案例：</strong></h5><ol>
<li>买票</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.syn;</span><br><span class="line"><span class="comment">//线程不安全，有负数</span></span><br><span class="line"><span class="comment">//不安全买票</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket station = <span class="keyword">new</span> BuyTicket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;我&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;你&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;黄牛党&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;<span class="comment">//外部停止方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span>(ticketNums &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟延时</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到&quot;</span>+ticketNums--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210302121831170.png" alt="image-20210302121831170"></p>
<ol start="2">
<li>银行取钱</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.syn;</span><br><span class="line"><span class="comment">//不安全的取钱</span></span><br><span class="line"><span class="comment">//两个人去银行取钱</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//账户</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="string">&quot;结婚基金&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account,<span class="number">50</span>,<span class="string">&quot;你&quot;</span>);</span><br><span class="line">        Drawing yourWife = <span class="keyword">new</span> Drawing(account,<span class="number">100</span>,<span class="string">&quot;yourWife&quot;</span>);</span><br><span class="line">        you.start();</span><br><span class="line">        yourWife.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money;<span class="comment">//余额</span></span><br><span class="line">    String name;<span class="comment">//卡名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String name,<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//银行：模拟取款</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Account account;</span><br><span class="line">    <span class="comment">//取了多少钱</span></span><br><span class="line">    <span class="keyword">int</span> drawingMoney;</span><br><span class="line">    <span class="keyword">int</span> nowMoney;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account,<span class="keyword">int</span> drawingMoney,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断有没有钱</span></span><br><span class="line">        <span class="keyword">if</span>(account.money-drawingMoney&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;钱不够，无法取钱&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//sleep可以放大问题的发生性</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//余额</span></span><br><span class="line">        account.money -=  drawingMoney;</span><br><span class="line">        <span class="comment">//手里的钱</span></span><br><span class="line">        nowMoney += drawingMoney;</span><br><span class="line"></span><br><span class="line">        System.out.println(account.name + <span class="string">&quot;余额为：&quot;</span>+account.money);</span><br><span class="line">        <span class="comment">//因为继承Thread,所以this.getName()相当于Thread.currentThread().getName()</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()+<span class="string">&quot;手里的钱：&quot;</span>+nowMoney);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210302121908741.png" alt="image-20210302121908741"></p>
<ol start="3">
<li>列表</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程不安全的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        List&lt;String&gt;  list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">                 <span class="comment">//同一时间存在线程往列表同一位置添加数据，被覆盖掉一些</span></span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(list.size());<span class="comment">//期待值为10000</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210302122041016.png" alt="image-20210302122041016"></p>
<h5 id="同步方法及同步块-synchronized"><a href="#同步方法及同步块-synchronized" class="headerlink" title="同步方法及同步块(synchronized):"></a>同步方法及同步块(<strong>synchronized</strong>):</h5><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210303091503134.png" alt="image-20210303091503134"></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210303091556662.png" alt="image-20210303091556662"></p>
<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210303091350516.png" alt="image-20210303091350516"></p>
<p>同步方法锁的是类本身，同步块可以锁任何东西。</p>
<p><strong>锁的对象就是变化的量，需要增删改的对象</strong></p>
<h5 id="修改不安全案例："><a href="#修改不安全案例：" class="headerlink" title="修改不安全案例："></a>修改不安全案例：</h5><ol>
<li>安全买票：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread.demo05线程同步;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticktnumbers = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>; <span class="comment">// 外部停止方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// synchronized同步方法： 锁的是this</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticktnumbers &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;买了第&quot;</span> + ticktnumbers-- + <span class="string">&quot;张票。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnSafeBuyTicket</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket ticket = <span class="keyword">new</span> BuyTicket();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;老师&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">小明买了第<span class="number">10</span>张票。</span><br><span class="line">黄牛买了第<span class="number">9</span>张票。</span><br><span class="line">老师买了第<span class="number">8</span>张票。</span><br><span class="line">小明买了第<span class="number">7</span>张票。</span><br><span class="line">黄牛买了第<span class="number">6</span>张票。</span><br><span class="line">老师买了第<span class="number">5</span>张票。</span><br><span class="line">小明买了第<span class="number">4</span>张票。</span><br><span class="line">黄牛买了第<span class="number">3</span>张票。</span><br><span class="line">老师买了第<span class="number">2</span>张票。</span><br><span class="line">老师买了第<span class="number">1</span>张票。</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596079989659-b960e55d-5b55-4bee-a647-757b085fc01f.png" alt="image.png"></p>
<ol start="2">
<li>安全的银行</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread.demo05线程同步;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oop.demo05.A;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money;  <span class="comment">//余额</span></span><br><span class="line">    String name;    <span class="comment">//卡名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 银行：模拟取款</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawer</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Account account;</span><br><span class="line">    <span class="keyword">int</span> drawingMoney;</span><br><span class="line">    <span class="keyword">int</span> nowMoney;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawer</span><span class="params">(Account account, <span class="keyword">int</span> drawingMoney, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取钱的方法run加synchronized锁的是this,此处即为Drawer的实例对象</span></span><br><span class="line">        <span class="comment">//所以不能在run上加synchronized，而应该给同步资源account加锁，因为增删改的对象是account</span></span><br><span class="line">        <span class="keyword">synchronized</span> (account)&#123;</span><br><span class="line">            <span class="keyword">if</span>(account.money - drawingMoney &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在取钱不够了，取不了&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);     <span class="comment">// 放大问题的发生性</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 卡内余额 = 卡里的钱 - 取出的钱</span></span><br><span class="line">            account.money = account.money - drawingMoney;</span><br><span class="line">            <span class="comment">// 手里的钱 =  手里的钱 + 取出的钱</span></span><br><span class="line">            nowMoney = nowMoney + drawingMoney;</span><br><span class="line"></span><br><span class="line">            System.out.println(account.name + <span class="string">&quot;余额为：&quot;</span> +account.money);</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.getName()+<span class="string">&quot;手里的钱：&quot;</span>+nowMoney);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnSafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">200000</span>,<span class="string">&quot;结婚基金&quot;</span>);</span><br><span class="line">        Drawer you = <span class="keyword">new</span> Drawer(account,<span class="number">50000</span>,<span class="string">&quot;你&quot;</span>);</span><br><span class="line">        Drawer wife = <span class="keyword">new</span> Drawer(account,<span class="number">100000</span>,<span class="string">&quot;妻子&quot;</span>);</span><br><span class="line">        you.start();</span><br><span class="line">        wife.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">结婚基金余额为：<span class="number">150000</span></span><br><span class="line">你手里的钱：<span class="number">50000</span></span><br><span class="line">结婚基金余额为：<span class="number">50000</span></span><br><span class="line">妻子手里的钱：<span class="number">100000</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>安全的列表</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread.demo05线程同步;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合线程不安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnSafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (list)&#123;</span><br><span class="line">                    list.add(Thread.currentThread().getName());</span><br><span class="line">                    <span class="comment">//同一时间存在线程往列表同一位置添加数据，被覆盖掉一些</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(list);</span></span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p><strong>Q:代码3中当不延时结果仍旧小于10000.是否仍旧线程不安全？应该如何修改？</strong></p>
<p><strong>A:创建了线程要等CPU去调度才能执行，即lambda表达式里边的东西，这个时候若循环次数结束了，主函数即将输出sout函数，可能有些new线程没被cup调度，所以也就没有add进去，就被打印了</strong></p>
<h5 id="拓展：-1"><a href="#拓展：-1" class="headerlink" title="拓展："></a>拓展：</h5><p>测试JUC安全类型的集合(CopyOnWriteArrayList)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"><span class="comment">//测试JUC安全类型的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJUC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Q:为什么不延时仍小于10000</span></span><br><span class="line"><span class="comment">//A:这是子线程都启动了，但是还没运行玩，主线程for结束，cpu让主线程比他们快直接就输出了，</span></span><br></pre></td></tr></table></figure>



<h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，导致两个或多个线程都在等待对方释放资源，都停止执行的情形。</p>
<h5 id="产生死锁的原因"><a href="#产生死锁的原因" class="headerlink" title="产生死锁的原因:"></a>产生死锁的原因:</h5><p>（1） 因为系统资源不足。</p>
<p>（2） 进程运行推进的顺序不合适。</p>
<p>（3） 资源分配不当等。</p>
<p>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。</p>
<h5 id="产生死锁的四个必要条件"><a href="#产生死锁的四个必要条件" class="headerlink" title="产生死锁的四个必要条件:"></a>产生死锁的四个必要条件:</h5><p>（1） 互斥条件：一个资源每次只能被一个进程使用。</p>
<p>（2） 请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</p>
<p>（3） 不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。</p>
<p>（4） 循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</p>
<p>这四个条件是<strong>死锁的必要条件</strong>，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。</p>
<h5 id="死锁的解除与预防"><a href="#死锁的解除与预防" class="headerlink" title="死锁的解除与预防:"></a>死锁的解除与预防:</h5><p>理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和解除死锁。所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确定资源的合理分配算法，避免进程永久占据系统资源。此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</p>
<h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.syn;</span><br><span class="line"><span class="comment">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Mirror</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//化妆</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line">    <span class="keyword">int</span> choice;</span><br><span class="line">    String girlName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Makeup</span><span class="params">(<span class="keyword">int</span> choice,String girlName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">        <span class="keyword">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//化妆： 互相持有对方的锁</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(choice==<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">               System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得口红的锁。&quot;</span>);</span><br><span class="line">               Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">               <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">                   System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;1s钟后获得镜子的锁。&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">               System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得镜子的锁。&quot;</span>);</span><br><span class="line">               Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">               <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">                   System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;1s钟后获得口红的锁。&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Makeup g1 = <span class="keyword">new</span> Makeup(<span class="number">1</span>,<span class="string">&quot;灰姑凉&quot;</span>);</span><br><span class="line">        Makeup g2= <span class="keyword">new</span> Makeup(<span class="number">2</span>,<span class="string">&quot;白雪公主&quot;</span>);</span><br><span class="line">        g1.start();</span><br><span class="line">        g2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>出现死锁：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596086802294-4946dc86-1f5e-4603-9f37-985822dc6ca1.png" alt="image.png"></p>
<p>解决：不让锁中抱对方的锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.syn;</span><br><span class="line"></span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Mirror</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//化妆</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line">    <span class="keyword">int</span> choice;</span><br><span class="line">    String girlName;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Makeup</span><span class="params">(<span class="keyword">int</span> choice,String girlName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">        <span class="keyword">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//化妆： 互相持有对方的锁</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(choice==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得口红的锁。&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;1s钟后获得镜子的锁。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得镜子的锁。&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;1s钟后获得口红的锁。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Makeup g1 = <span class="keyword">new</span> Makeup(<span class="number">1</span>,<span class="string">&quot;灰姑凉&quot;</span>);</span><br><span class="line">        Makeup g2= <span class="keyword">new</span> Makeup(<span class="number">2</span>,<span class="string">&quot;白雪公主&quot;</span>);</span><br><span class="line">        g1.start();</span><br><span class="line">        g2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210304201719393.png" alt="image-20210304201719393"></p>
<p>Done!</p>
<h4 id="Lock锁："><a href="#Lock锁：" class="headerlink" title="Lock锁："></a>Lock锁：</h4><p> <img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/1596088604964-bcd04ca7-1989-4228-847f-a80a3c69a109.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试Lock锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestLock2 testLock2 = <span class="keyword">new</span> TestLock2();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLock2</span>  <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//定义lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();<span class="comment">//加锁</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticketNums&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(ticketNums--);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="comment">//解锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596089471599-41cabf93-7799-481d-a8c5-0a5f3ac83937.png?x-oss-process=image/resize,w_1492" alt="image.png"></p>
<h4 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h4><h5 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h5><ul>
<li><p>wait() 表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</p>
</li>
<li><p>wait(long timeout) 指定等待的毫秒数</p>
</li>
<li><p>notify() 唤醒一个处于等待状态的线程</p>
</li>
<li><p>notifyAll() 唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程先调度</p>
</li>
</ul>
<p><strong>注：上述方法都是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出IIIegalMonitorSateException异常</strong></p>
<h5 id="生产者消费者问题（Producer-consumer-problem）"><a href="#生产者消费者问题（Producer-consumer-problem）" class="headerlink" title="生产者消费者问题（Producer-consumer problem）"></a>生产者消费者问题（Producer-consumer problem）</h5><p>​        该问题描述了两个共享固定大小缓冲区的线程——即所谓的“生产者”和“消费者”，在实际运行时会发生的问题。生产者的主要作用是生成一定量的数据放到缓冲区中，然后重复此过程。与此同时，消费者也在缓冲区消耗这些数据。该问题的关键就是要保证生产者不会在缓冲区满时加入数据，消费者也不会在缓冲区中空时消耗数据。</p>
<h6 id="解决方式1-管程法"><a href="#解决方式1-管程法" class="headerlink" title="解决方式1-管程法"></a>解决方式1-管程法</h6><p>生产者消费者模型是一个并发协作的模型：</p>
<p><strong>生产者：</strong>负责生产数据的模块（可能是方法、对象、线程、进程）</p>
<p><strong>消费者：</strong>负责处理数据的模块（可能是方法、对象、线程、进程）</p>
<p><strong>缓冲区（仓库）：</strong>消费者和生产者之间通信的桥梁，生产者将生产好的产品放入缓冲区，消费者从缓冲区中取出产品</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.syn;</span><br><span class="line"><span class="comment">//测试：生产者消费者问题--&gt;利用缓冲区解决：管程法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者，消费者，产品，缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Productor(container).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(container).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            container.push(<span class="keyword">new</span> Chicken(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span>+i+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Consumer</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了--&gt;&quot;</span>+container.pop().id+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需要一个容器大小</span></span><br><span class="line">    Chicken[] chickens = <span class="keyword">new</span> Chicken[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者放入产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果容器满了，就需要等待消费者消费</span></span><br><span class="line">        <span class="keyword">if</span> (count == chickens.length) &#123;</span><br><span class="line">            <span class="comment">//通知消费者消费，生产等待</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有满，就丢入产品</span></span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通知消费者消费了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费者消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断能否消费</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//等待生产者生产，消费者等等</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果可以消费</span></span><br><span class="line">        count--;</span><br><span class="line">        Chicken chicken = chickens[count];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//吃完了，通知生产者继续生产</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="解决方式2-信号灯法"><a href="#解决方式2-信号灯法" class="headerlink" title="解决方式2-信号灯法"></a>解决方式2-信号灯法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.syn;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试：生产者消费者模型--&gt;标志法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV tv = <span class="keyword">new</span> TV();</span><br><span class="line">        <span class="keyword">new</span> Player(tv).start();</span><br><span class="line">        <span class="keyword">new</span> Watcher(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者--演员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">&quot;快乐大本营&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">&quot;抖音纪录片&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者-观众</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品--节目</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span></span>&#123;</span><br><span class="line">    String voice;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//表演</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String voice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;演员表演了：&quot;</span>+ voice);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();       <span class="comment">//通知观众观看</span></span><br><span class="line">        <span class="keyword">this</span>.voice = voice;</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//观看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;观众观看了：&quot;</span>+voice);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596093590281-6d82df1b-1396-4a89-bf60-532b62968536.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multi_thread.syn;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建服务，创建线程池</span></span><br><span class="line">        <span class="comment">// newFixedThreadPool(10); 参数是线程池的大小</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 执行</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20210308201344922.png" alt="image-20210308201344922"></p>
<h4 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h4><p><img src="https://gitee.com/geekpig/my-blog-images/raw/master/img/image-20211109090631082.png" alt="image-20211109090631082"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>狂神说java</tag>
      </tags>
  </entry>
  <entry>
    <title>Git把本地代码推送到远程仓库</title>
    <url>/2020/06/01/Git%E6%8A%8A%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<p>首先默认已经安装了git,并且为git配置好了身份。</p>
<p>首先找到你项目的文件夹，比如项目名称为myproject，进入到这个文件夹，鼠标右键找到Git Bash Here</p>
<p>接下来依次执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init   // 初始化版本库</span><br><span class="line"></span><br><span class="line">git add .   // 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 </span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span> // 把添加的文件提交到版本库，并填写提交备注</span><br></pre></td></tr></table></figure>

<p>目前为止，我们完成了代码库的初始化，但代码是在本地，还没有提交到远程服务器，所以关键的来了，要提交到就远程代码服务器，进行以下两步：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin 你的远程库地址  // 把本地库与远程库关联</span><br><span class="line"></span><br><span class="line">git push -u origin master    // 第一次推送时</span><br></pre></td></tr></table></figure>

<p>此时即完成</p>
<p>第一次远程推送！</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
